{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 001886a3f5237a3473e8","webpack:///./src/index.ts","webpack:///./src/compile/index.ts","webpack:///./src/log.ts","webpack:///./src/util/index.ts","webpack:///./src/util/util.ts","webpack:///./src/mixins.ts","webpack:///./src/util/handelType.ts","webpack:///./src/util/handelCoding.ts","webpack:///./src/compile/render.ts","webpack:///./src/dom/dom.ts","webpack:///./src/compile/parseTpl.ts","webpack:///./src/parse/index.ts","webpack:///./src/parse/lexer.ts","webpack:///./src/config/lexer_config.ts","webpack:///./src/parse/parser.ts","webpack:///./src/parse/astBuilder.ts","webpack:///./src/config/ast_config.ts","webpack:///./src/parse/astCompile.ts","webpack:///./src/config/unSafeStr.ts","webpack:///./src/pipe/pipe.ts","webpack:///./src/compile/HandelData.ts","webpack:///./src/util/HandelEventer.ts","webpack:///./src/compile/HandelEvent.ts","webpack:///./src/http/index.ts","webpack:///./src/http/parseHttp.ts","webpack:///./src/router/index.ts","webpack:///./src/store/index.ts","webpack:///./src/store/loader/index.ts","webpack:///./src/store/injector/index.ts","webpack:///./src/compile/componentGuard.ts","webpack:///./src/Dom/index.ts","webpack:///./src/Dom/targetDom.ts","webpack:///./src/Dom/nodeModel.ts","webpack:///./src/Dom/eventModel.ts","webpack:///./src/Dom/moveModel.ts","webpack:///./src/Dom/statusModel.ts","webpack:///./src/cache/cookie.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA,0BAAyB;AACzB;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;AC7JA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjBA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;;;;;;;ACJA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,sDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAAyF;AACzF;AACA;AACA;AACA;AACA,gCAA+B,cAAc;AAC7C;AACA;AACA;AACA,8DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B,uDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,yBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,sBAAsB,EAAE;AAC9D;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,iCAAiC,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,gBAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;;;;;;;AC1iBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA,kBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA,6BAA4B,sBAAsB;AAClD;AACA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA,qBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;AACL;AACA;;;;;;;AC5CA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd,6BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;ACpGA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,wCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;AC9DA;AACA;AACA;AACA,oCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,mCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,gCAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,MAAK;AACL;AACA;AACA,cAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,iBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,uBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC;AACvC,mCAAkC,SAAS;AAC3C,mCAAkC,WAAW,UAAU;AACvD,0CAAyC,cAAc;AACvD;AACA,8GAA6G,OAAO,UAAU;AAC9H,iFAAgF,iBAAiB,OAAO;AACxG,yDAAwD,gBAAgB,QAAQ,OAAO;AACvF,+CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,kCAAiC;AACjC;AACA;AACA,UAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,oCAAmC,SAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAwG;AACxG;AACA;AACA,sCAAqC;AACrC;AACA,8BAA6B;AAC7B,0BAAyB;AACzB;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA,wGAAuG,sBAAsB;AAC7H,uEAAsE,mBAAmB;AACzF;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA6F;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA,2DAA0D;AAC1D;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,wGAAuG,UAAU;AACjH;AACA;AACA;AACA;AACA;AACA,mFAAkF,gBAAgB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA,wCAAuC,QAAQ,gBAAgB;AAC/D;AACA;AACA;AACA;AACA,sCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4GAA2G;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAA+G;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,cAAc;AACrC;AACA,4BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,KAAK;AACjC,uBAAsB,GAAG;AACzB;AACA;AACA,oCAAmC,0CAA0C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,iBAAiB;AAChD;AACA,kEAAiE,gBAAgB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAuF,6BAA6B;AACpH,gFAA+E,+BAA+B;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAsD,gBAAgB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,gBAAgB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;ACvqCA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD;AACrD,mEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB,sBAAqB,WAAW,0BAA0B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,uBAAuB;AAC9C;AACA,6DAA4D,eAAe;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;;;;;;;ACpTA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,WAAW;AACzC,gCAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA,iDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;;;;;;;ACvFA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA,mCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;;;;;;ACpMA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D,MAAM;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,4DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;AC3KA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7CA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;ACfA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,KAAI;AACJ;AACA,QAAO;AACP;AACA,gBAAe,4CAA4C;AAC3D,iBAAgB,wCAAwC,EAAE;AAC1D,mBAAkB,wCAAwC;AAC1D,oBAAmB,wCAAwC,EAAE,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,qCAAqC,qCAAqC,2CAA2C,aAAa,4CAA4C,aAAa;AAC3M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA,sDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,+CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;AC5VA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI,qCAAqC,sCAAsC,0CAA0C,UAAU;AACnI,mCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtGA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,uEAAsE;AACtE,gFAA+E;AAC/E,6CAA4C,WAAW;AACvD;AACA,wCAAuC;AACvC,0CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kCAAiC,YAAY,4DAA4D;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,kEAAiE;AACjE;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,kBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sTAAqT;AACrT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD;AACrD;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B;AAC3B;AACA,8DAA6D;AAC7D;AACA;AACA,kNAAiN;AACjN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA;AACA,oPAAmP;AACnP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,4BAA2B;AAC3B;AACA;AACA,oEAAmE;AACnE,cAAa;AACb;AACA;AACA,+EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,wDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,4BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzdA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACbA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;;;;;;ACpEA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD;AACvD;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;;;;;;;AC1CA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAsD,QAAQ;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;;;;;;;ACzDA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;;;;;;;AC5BA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;;;;;;;AChDA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;;;;;;AC3CA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA0F;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAuB,kCAAkC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;;;;;;AC5GA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC,sBAAsB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;ACjEA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC,kBAAkB;AACvD,oCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;ACpGA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,mCAAmC,uCAAuC;AACvG;AACA;AACA,UAAS;AACT,0BAAyB;AACzB;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,qCAAoC,yBAAyB;AAC7D,cAAa;AACb;AACA,gDAA+C,YAAY,EAAE;AAC7D,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;AC9NA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvFA;AACA;AACA;AACA,WAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,0BAAyB,uDAAuD;AAChF;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/BA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;AC3BA;AACA;AACA;AACA,WAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,0BAAyB,uDAAuD;AAChF;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,EAAC;AACD;;;;;;;ACzTA;AACA;AACA;AACA,WAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,0BAAyB,uDAAuD;AAChF;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;AClKA;AACA;AACA;AACA,WAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,0BAAyB,uDAAuD;AAChF;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kEAAiE,UAAU;AAC3E;AACA;AACA;AACA;AACA,4BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,0BAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA,kEAAiE,UAAU;AAC3E;AACA;AACA;AACA;AACA,4BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,0BAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kEAAiE,UAAU;AAC3E;AACA;AACA;AACA;AACA,4BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,0BAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA,kEAAiE,UAAU;AAC3E;AACA;AACA;AACA;AACA,4BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,0BAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;;;;;;AC5GA;AACA;AACA;AACA,WAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,0BAAyB,uDAAuD;AAChF;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,EAAC;AACD;;;;;;;AC9GA;AACA,+CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA,8CAA6C;AAC7C,gDAA+C;AAC/C,gDAA+C;AAC/C;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,4BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC,6BAA6B;AAChE;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,4BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA,qCAAoC,cAAc;AAClD;AACA;AACA","file":"./dist/bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 001886a3f5237a3473e8","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar compile_1 = require(\"./compile\");\r\nexports.Component = compile_1.Component;\r\nvar Dom_1 = require(\"./Dom\");\r\nexports.Dom = Dom_1.default;\r\nvar store_1 = require(\"./store\");\r\nvar Store = new store_1.default('user');\r\nexports.Store = Store;\r\nvar cookie_1 = require(\"./cache/cookie\");\r\nexports.Cookie = cookie_1.default;\r\nexports.default = compile_1.default;\r\nwindow.Cpage = new compile_1.default();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.ts\n// module id = 0\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\nvar render_1 = require(\"./render\");\r\nvar componentGuard_1 = require(\"./componentGuard\");\r\nvar store_1 = require(\"../store\");\r\nvar store = new store_1.default();\r\nstore.data('componentList', []);\r\nstore.service('component', function () {\r\n    this.ensureOneInvokeComponent = function (name, arr) {\r\n        var res = {\r\n            type: 'yes'\r\n        }, rootName = [], names = [];\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i].name == name)\r\n                rootName.push(name);\r\n            names.push(arr[i].name);\r\n        }\r\n        if (rootName.length >= 2)\r\n            res = {\r\n                type: 'no',\r\n                info: '只能有一个根组件，却发现' + rootName.length + '个' + name + '根组件'\r\n            };\r\n        return res;\r\n    };\r\n});\r\nvar CPage = /** @class */ (function () {\r\n    function CPage() {\r\n        this.CList = [];\r\n        this.id = 0;\r\n        this.id = 0;\r\n    }\r\n    /**\r\n     * es6模式，渲染组件\r\n     * @param selector id选择符，如果是class，则取第一个节点\r\n     * @param fn 根组件函数\r\n     */\r\n    CPage.bootstrap = function (selector, fn) {\r\n        var rootComponent = {};\r\n        function componetList(fn, isRoot) {\r\n            if (isRoot === void 0) { isRoot = false; }\r\n            var classToJson = util_1.default.classToJson(fn, isRoot);\r\n            var componentJson = classToJson.componentJson;\r\n            if (isRoot) {\r\n                rootComponent = classToJson.rootComponent;\r\n            }\r\n            componentGuard_1.default(componentJson);\r\n            store.data('componentList', store.get('componentList').push(componentJson));\r\n            if (componentJson.components && util_1.default.type(componentJson.components) == 'array' && componentJson.components.length) {\r\n                componentJson.components.forEach(function (v) {\r\n                    componetList(v);\r\n                });\r\n            }\r\n        }\r\n        componetList(fn, true);\r\n        var r = new render_1.default(selector, rootComponent, store.get('componentList'));\r\n        r.componentToDom();\r\n    };\r\n    /**\r\n     * 路由\r\n     * @param config 路由配置\r\n     */\r\n    CPage.router = function (config) {\r\n        function check(str) {\r\n            if (util_1.default.type(str) != 'array') {\r\n                $log.error('路由配置项需为数组形式');\r\n            }\r\n        }\r\n        check(config);\r\n        config.forEach(function (v) {\r\n            var classToJson = util_1.default.classToJson(v.component, false);\r\n            v.component = classToJson.componentJson;\r\n        });\r\n        store.data('routerConfig', config);\r\n    };\r\n    CPage.prototype.directive = function (name, fn) {\r\n        var conf = fn();\r\n        conf.id = this.id;\r\n        this.CList.push(conf);\r\n        this.id++;\r\n        var guard = store.get('component').ensureOneInvokeComponent(name, this.CList);\r\n        if (guard.type == 'no') {\r\n            $log.error(guard.info);\r\n        }\r\n        return conf;\r\n    };\r\n    /**\r\n     * es5模式获取组建信息\r\n     * @param obj\r\n     */\r\n    CPage.prototype.component = function (obj) {\r\n        componentGuard_1.default(obj);\r\n        var componentInfo = util_1.default.deepClone(obj);\r\n        Object.defineProperties(componentInfo, {\r\n            isRoot: {\r\n                value: false,\r\n                writable: true\r\n            },\r\n            $el: {\r\n                value: undefined,\r\n                writable: true\r\n            },\r\n            $props: {\r\n                value: {},\r\n                writable: true\r\n            }\r\n        });\r\n        return this.directive(obj.name, function () {\r\n            return componentInfo;\r\n        });\r\n    };\r\n    /**\r\n     * es5模式，将组件渲染到dom\r\n     * @param selector id选择符，如果是class，则取第一个节点\r\n     * @param root 根组件信息\r\n     */\r\n    CPage.prototype.bootstrap = function (selector, root) {\r\n        if (util_1.default.type(selector) != 'string') {\r\n            $log.error(selector + '应为字符串');\r\n        }\r\n        if (!document.querySelector(selector)) {\r\n            $log.error('节点“' + selector + '”不存在');\r\n        }\r\n        if (util_1.default.type(root) != 'object') {\r\n            $log.error(root + '应为json对象');\r\n        }\r\n        if (arguments.length == 2) {\r\n            componentGuard_1.default(root);\r\n            if (!root.name) {\r\n                $log.error('找不到根组件的name属性');\r\n            }\r\n            store.data('rootComponent', root.name);\r\n            var r = new render_1.default(selector, root, this.CList);\r\n            r.componentToDom();\r\n        }\r\n    };\r\n    CPage.version = '1.0.5';\r\n    return CPage;\r\n}());\r\nexports.default = CPage;\r\n/**\r\n * es6模式构建组件\r\n */\r\nvar Component = /** @class */ (function () {\r\n    function Component() {\r\n        this.components = [];\r\n        this.name = '';\r\n        this.template = '';\r\n        this.data = {};\r\n        this.props = {};\r\n    }\r\n    Component.prototype.render = function () {\r\n        $log.error('render方法必须被继承');\r\n    };\r\n    return Component;\r\n}());\r\nexports.Component = Component;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/index.ts\n// module id = 1\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction log(str) {\r\n    console.log(str);\r\n}\r\nexports.log = log;\r\nfunction info(str) {\r\n    console.log(str);\r\n}\r\nexports.info = info;\r\nfunction warn(str) {\r\n    console.log(str);\r\n}\r\nexports.warn = warn;\r\nfunction error(str) {\r\n    throw new Error(str);\r\n}\r\nexports.error = error;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/log.ts\n// module id = 2\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar util_1 = require(\"./util\");\r\nvar Util = new util_1.util();\r\nexports.default = Util;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/index.ts\n// module id = 3\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar mixins_1 = require(\"../mixins\");\r\nvar handelType_1 = require(\"./handelType\");\r\nvar handelCoding_1 = require(\"./handelCoding\");\r\nvar $log = require(\"../log\");\r\nvar util = /** @class */ (function () {\r\n    function util() {\r\n    }\r\n    /**\r\n     * 判断两个变量是否相等，只能匹配简单的数据类型\r\n     * @param str1\r\n     * @param str2\r\n     * @returns {boolean}\r\n     */\r\n    util.prototype.isEqual = function (str1, str2) {\r\n        return JSON.stringify(str1) === JSON.stringify(str2);\r\n    };\r\n    /**\r\n     * 判断两个变量是否相等\r\n     * @param newVal\r\n     * @param oldVal\r\n     * @param equalStatus 为TRUE,则深层次比较\r\n     */\r\n    util.prototype.areEqual = function (newVal, oldVal, equalStatus) {\r\n        if (equalStatus) {\r\n            return this.compare(newVal, oldVal);\r\n        }\r\n        else {\r\n            // return (newVal === oldVal) && (typeof newVal == 'number' && typeof oldVal == 'number' && !isNaN(newVal) && !isNaN(oldVal)) && (newVal != NaN && oldVal != NaN);\r\n            if (newVal.toString() == 'NaN') {\r\n                return true;\r\n            }\r\n            else {\r\n                return newVal === oldVal;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 判断两个变量是否相等, 此方法用于相同数据类型的变量比较\r\n     * @param a\r\n     * @param b\r\n     * @returns {boolean}\r\n     */\r\n    util.prototype.compare = function (a, b) {\r\n        var pt = /undefined|number|string|boolean/, fn = /^(function\\s*)(\\w*\\b)/, cr = \"constructor\", cn = \"childNodes\", pn = \"parentNode\";\r\n        if (pt.test(typeof a) || pt.test(typeof b) || a === null || b === null) {\r\n            return a === b || (isNaN(a) && isNaN(b)); //为了方便，此处假定NaN == NaN\r\n        }\r\n        if (a[cr] !== b[cr]) {\r\n            return false;\r\n        }\r\n        switch (a[cr]) {\r\n            case Date:\r\n                return a.valueOf() === b.valueOf();\r\n            case Function:\r\n                return a.toString().replace(fn, '$1') === b.toString().replace(fn, '$1'); //硬编码中声明函数的方式会影响到toString的结果，因此用正则进行格式化\r\n            case Array:\r\n                if (a.length !== b.length) {\r\n                    return false;\r\n                }\r\n                for (var i = 0; i < a.length; i++) {\r\n                    // if(!ce(a[i],b[i])){\r\n                    // \treturn false;\r\n                    // }\r\n                    if (a[i].toString() == b[i].toString()) { }\r\n                }\r\n                break;\r\n            default:\r\n                var alen = 0, blen = 0, d = void 0;\r\n                if (a === b) {\r\n                    return true;\r\n                }\r\n                if (a[cn] || a[pn] || b[cn] || b[pn]) {\r\n                    return a === b;\r\n                }\r\n                for (d in a) {\r\n                    alen++;\r\n                }\r\n                for (d in b) {\r\n                    blen++;\r\n                }\r\n                if (alen !== blen) {\r\n                    return false;\r\n                }\r\n                for (d in a) {\r\n                    if (a[d].toString() != b[d].toString()) {\r\n                        return false;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * 浅拷贝，才方法只针对普通对象{}和数组[]\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    util.prototype.clone = function (str) {\r\n        return JSON.parse(JSON.stringify(str));\r\n    };\r\n    util.prototype.deepClone = function (data) {\r\n        var t = this.type(data), o, i, ni;\r\n        if (t === 'array') {\r\n            o = [];\r\n        }\r\n        else if (t === 'object') {\r\n            o = {};\r\n        }\r\n        else {\r\n            return data;\r\n        }\r\n        if (t === 'array') {\r\n            for (i = 0, ni = data.length; i < ni; i++) {\r\n                o.push(this.deepClone(data[i]));\r\n            }\r\n            return o;\r\n        }\r\n        else if (t === 'object') {\r\n            for (i in data) {\r\n                o[i] = this.deepClone(data[i]);\r\n            }\r\n            return o;\r\n        }\r\n    };\r\n    /**\r\n     * 字符串或函数的执行次数\r\n     * @param obj:类型为Function, String\r\n     */\r\n    util.prototype.repeatObj = function (obj, manyTime) {\r\n        if (this.type(manyTime) != 'number') {\r\n            $log.error('函数repeat的参数manyTime类型为number');\r\n        }\r\n        switch (this.type(obj)) {\r\n            case 'string':\r\n                return obj.repeat(manyTime);\r\n            case 'function':\r\n                var arr = new Array(manyTime);\r\n                for (var i = 0; i < arr.length; i++) {\r\n                    obj();\r\n                }\r\n                break;\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    /**\r\n     * 对每个scope的children进行遍历\r\n     * @param cb\r\n     * @param scope\r\n     * @returns {boolean}\r\n     */\r\n    util.prototype.everyScope = function (cb, scope) {\r\n        if (cb(scope)) {\r\n            return scope.$children.every(function (child) {\r\n                return child.everyScope(cb, scope);\r\n            });\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * 处理scope的event事件\r\n     * @param eventName\r\n     * @param arr\r\n     * @param scope\r\n     */\r\n    util.prototype.handelEvent = function (eventName, arr, scope) {\r\n        // if(arr[eventName] == undefined){\r\n        // \t$log.error('事件'+eventName+'不存在');\r\n        // }\r\n        // const event = {name: eventName};\r\n        var listener = arr[eventName] || function () { };\r\n        try {\r\n            listener(scope);\r\n        }\r\n        catch (e) {\r\n            $log.error(e);\r\n        }\r\n    };\r\n    /**\r\n     * 对象转map对象\r\n     * @param obj\r\n     * @returns {Map}\r\n     */\r\n    util.prototype.objToMap = function (obj) {\r\n        if (this.type(obj) != 'object')\r\n            return;\r\n        var map = new Map();\r\n        for (var i in obj) {\r\n            map.set(i, obj[i]);\r\n        }\r\n        return map;\r\n    };\r\n    /**\r\n     * map对象转普通对象\r\n     * @param map\r\n     * @returns {{}}\r\n     */\r\n    util.prototype.mapToObj = function (map) {\r\n        if (this.type(map) != 'map')\r\n            return;\r\n        var obj = {};\r\n        map.forEach(function (val, key) {\r\n            obj[key] = val;\r\n        });\r\n        return obj;\r\n    };\r\n    /**\r\n     * 此方法用于获取首位不写0浮点数的下一位字符\r\n     * @param index\r\n     * @param str\r\n     * @returns {string|boolean}\r\n     */\r\n    util.prototype.nextLeter = function (index, str) {\r\n        return (index < str.length - 1) ? str.charAt(index + 1) : false;\r\n    };\r\n    /**\r\n     * 将string类型的数据外层包装\\\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    util.prototype.wrapString = function (str) {\r\n        if (this.type(str) == 'string') {\r\n            return '\\'' + str + '\\'';\r\n        }\r\n        else if (this.type(str) == 'null') {\r\n            return 'null';\r\n        }\r\n        else {\r\n            return str;\r\n        }\r\n    };\r\n    /**\r\n     * 判断数组第一个元素是否与有某个元素相等，如果是则将其移除\r\n     * @param str\r\n     * @param arr\r\n     * @returns {any[]}\r\n     */\r\n    util.prototype.expect = function (arr) {\r\n        var str = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            str[_i - 1] = arguments[_i];\r\n        }\r\n        var that = this;\r\n        function es(val) {\r\n            return that.exitFirst(arr, val);\r\n        }\r\n        // console.log(str);\r\n        if (str.some(es)) {\r\n            return arr.shift();\r\n        }\r\n        // if(this.exitFirst(arr, str)) return arr.shift();\r\n    };\r\n    /**\r\n     * 在expect函数基础上，如果目标元素不匹配报错\r\n     * @param str\r\n     * @param arr\r\n     * @returns {any}\r\n     */\r\n    util.prototype.consume = function (arr, str) {\r\n        var t = this.expect(arr, str);\r\n        if (!t)\r\n            $log.error('词法解析错误' + str);\r\n        return t;\r\n    };\r\n    /**\r\n     * 判断数组第一个元素是否与有某个元素相等，相等则返回首个数组首个元素\r\n     * @param str\r\n     * @param arr\r\n     * @returns {number}\r\n     */\r\n    util.prototype.exit = function (str, arr) {\r\n        if (this.type(arr) != 'array')\r\n            return;\r\n        if (!arr.length)\r\n            return;\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (str == arr[i]['text']) {\r\n                return i;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 只针对对象的第一个元素\r\n     * @param arr\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    util.prototype.exitFirst = function (arr, str) {\r\n        if (this.type(arr) != 'array')\r\n            return;\r\n        if (!arr.length)\r\n            return;\r\n        if (!str || (str == arr[0]['text'])) {\r\n            return arr[0];\r\n        }\r\n    };\r\n    /**\r\n     * 数组去重，针对普通类型的数组\r\n     * @param arr\r\n     * @returns {Array}\r\n     */\r\n    util.prototype.uArray = function (arr) {\r\n        var newArr = [];\r\n        var set = new Set(arr);\r\n        set.forEach(function (val) {\r\n            newArr.push(val);\r\n        });\r\n        return newArr;\r\n    };\r\n    /**\r\n     * 获取数组中某个元素的下标，返回结果维数组\r\n     * @param data\r\n     * @param array\r\n     * @returns {any}\r\n     */\r\n    util.prototype.arrayItem = function (data, array) {\r\n        if (this.type(array) != 'array')\r\n            return;\r\n        var item = [];\r\n        for (var i = 0; i < array.length; i++) {\r\n            if (array[i].toString() === data.toString())\r\n                item.push(i);\r\n        }\r\n        // console.log(item,array);\r\n        return item;\r\n    };\r\n    /**\r\n     * 获取数组中某个对象元素的下标\r\n     */\r\n    util.prototype.arrayItem2 = function (data, array) {\r\n        if (this.type(array) != 'array')\r\n            return;\r\n        var item;\r\n        for (var i = 0; i < array.length; i++) {\r\n            if (array[i]['name'] === data)\r\n                item = i;\r\n        }\r\n        return item;\r\n    };\r\n    /**\r\n     * 获取数组中某个重复元素的最后下标\r\n     */\r\n    util.prototype.arrayLastItem = function (data, array) {\r\n        if (this.type(array) != 'array')\r\n            return;\r\n        var item;\r\n        array = array.reverse();\r\n        for (var i = 0; i < array.length; i++) {\r\n            if (array[i] === data)\r\n                item = i;\r\n        }\r\n        return item;\r\n    };\r\n    /**\r\n     * 去除数组中的重复元素\r\n     * @param data\r\n     * @param array\r\n     * @returns {Array}\r\n     */\r\n    util.prototype.arraySplice = function (data, array) {\r\n        if (this.type(array) != 'array')\r\n            return;\r\n        var arr = this.arrayItem(data, array);\r\n        for (var i = 0; i < arr.length; i++) {\r\n            array.splice(arr[i], 1);\r\n        }\r\n        return array;\r\n    };\r\n    /**\r\n     * 去除数组中的'',null,undefined\r\n     */\r\n    util.prototype.arrayCompact = function (arr) {\r\n        var newArr = [];\r\n        arr.forEach(function (v) {\r\n            if (v != '' && v != null && v != undefined)\r\n                newArr.push(v);\r\n        });\r\n        return newArr;\r\n    };\r\n    /**\r\n     * 获取两个数组的交集\r\n     * @param a\r\n     * @param b\r\n     */\r\n    util.prototype.intersection = function (a, b) {\r\n        return a.filter(function (v) { return b.includes(v); });\r\n    };\r\n    /**\r\n     * 对字符串进行解析\r\n     * @param str\r\n     * @returns {Function}\r\n     */\r\n    util.prototype.parseString = function (str) {\r\n        if (this.type(str) != 'string')\r\n            return;\r\n        return new Function(\"return \" + str);\r\n    };\r\n    /**\r\n     * 用于判断对象是否含有某个属性,并返回与表达式 ‘scope’ && （\\‘a\\’ in 'scope'）\r\n     * @param obj\r\n     * @param ele\r\n     * @returns {any}\r\n     */\r\n    util.prototype.hasProperty = function (obj, ele) {\r\n        return obj + ' && (' + this.wrapString(ele) + ' in ' + obj + ')';\r\n    };\r\n    /**\r\n     * 判断所传字符串与目标字符串是否相等\r\n     * @param target\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    util.prototype.inStr = function (target, str) {\r\n        return str.includes(target);\r\n    };\r\n    /**\r\n     * 获取对象的键\r\n     * @param obj\r\n     */\r\n    util.prototype.objKey = function (obj) {\r\n        var arr = [];\r\n        for (var i in obj) {\r\n            arr.push(i);\r\n        }\r\n        return arr;\r\n    };\r\n    /**\r\n     * 获取对象的值\r\n     * @param obj\r\n     */\r\n    util.prototype.objVal = function (obj) {\r\n        var arr = [];\r\n        for (var i in obj) {\r\n            arr.push(obj[i]);\r\n        }\r\n        return arr;\r\n    };\r\n    /**\r\n     * 判断对象是否为空\r\n     * @param obj 对象\r\n     */\r\n    util.prototype.isEmpty = function (obj) {\r\n        if (this.type(obj) != 'object')\r\n            return;\r\n        if (JSON.stringify(obj) == '{}')\r\n            return true;\r\n        return false;\r\n    };\r\n    /**\r\n     * 移除对象中某些元素\r\n     * @param obj 对象\r\n     * @param ...str  需要移除的元素\r\n     */\r\n    util.prototype.expectSome = function (obj) {\r\n        var str = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            str[_i - 1] = arguments[_i];\r\n        }\r\n        var newObj = this.clone(obj);\r\n        str.forEach(function (v) {\r\n            delete newObj[v];\r\n        });\r\n        return newObj;\r\n    };\r\n    /**\r\n     * x-a转驼峰xA\r\n     * @param str\r\n     */\r\n    util.prototype.cameCase = function (str) {\r\n        return str.replace(/\\-(\\w)/g, function (x) { return x.slice(1).toUpperCase(); });\r\n    };\r\n    /**\r\n     * 驼峰xA转x-a\r\n     * @param str\r\n     */\r\n    util.prototype._cameCase = function (str) {\r\n        return str.replace(/([A-Z])/g, \"-$1\");\r\n    };\r\n    /**\r\n     * 合并对象\r\n     * @param target\r\n     * @param source\r\n     */\r\n    util.prototype.extend = function (target, source) {\r\n        for (var i in source) {\r\n            target[i] = source[i];\r\n        }\r\n        return target;\r\n    };\r\n    /**\r\n     * 去除空格 回车 换行\r\n     * @param str\r\n     */\r\n    util.prototype.trimStr = function (str) {\r\n        var res = str.trim();\r\n        res = res.replace(/\\s+/g, '');\r\n        res = res.replace(/[\\r\\n]/g, '');\r\n        return res;\r\n    };\r\n    /**\r\n     * 获取当前时间 20170516\r\n     */\r\n    util.prototype.now = function () {\r\n        var date = new Date(), year = date.getFullYear().toString(), month = (date.getMonth() + 1).toString(), day = date.getDate().toString();\r\n        month = parseInt(month) < 10 ? '0' + month : month;\r\n        return year + month + day + '0';\r\n    };\r\n    util.prototype.page = function () {\r\n        return {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        };\r\n    };\r\n    /**\r\n     * 将class转换为json\r\n     * @param fn class函数\r\n     * @param isRoot 是否为根组件\r\n     */\r\n    util.prototype.classToJson = function (fn, isRoot) {\r\n        if (isRoot === void 0) { isRoot = false; }\r\n        var app;\r\n        var rootComponent = {};\r\n        if (fn) {\r\n            app = new fn();\r\n        }\r\n        else {\r\n            $log.error('函数' + fn + '未找到');\r\n        }\r\n        var obj = Object.create(app);\r\n        var propertyObj = obj.__proto__;\r\n        var prototypeObj = obj.__proto__.__proto__;\r\n        var arr = Object.entries(propertyObj).concat(Object.entries(prototypeObj).slice(1));\r\n        var protoNames = Object.getOwnPropertyNames(prototypeObj);\r\n        var componentJson = {};\r\n        for (var i = 1; i < protoNames.length; i++) {\r\n            componentJson[protoNames[i]] = prototypeObj[protoNames[i]];\r\n        }\r\n        arr.forEach(function (v, i) {\r\n            componentJson[v[0]] = v[1];\r\n            if (isRoot) {\r\n                rootComponent[v[0]] = v[1];\r\n            }\r\n        });\r\n        return {\r\n            componentJson: componentJson, rootComponent: rootComponent\r\n        };\r\n    };\r\n    return util;\r\n}());\r\nexports.util = util;\r\nmixins_1.applyMixins(util, [handelType_1.default, handelCoding_1.default]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/util.ts\n// module id = 4\n// module chunks = 0","\"use strict\";\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spread = (this && this.__spread) || function () {\r\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction mixins() {\r\n    var otherClass = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        otherClass[_i] = arguments[_i];\r\n    }\r\n    return function (targetClass) {\r\n        Object.assign.apply(Object, __spread([targetClass.prototype], otherClass));\r\n    };\r\n}\r\nexports.mixins = mixins;\r\n/**\r\n * 此方法用于实现class多继承\r\n * @param derivedCtor\r\n * @param baseCtors\r\n */\r\nfunction applyMixins(derivedCtor, baseCtors) {\r\n    baseCtors.forEach(function (baseCtor) {\r\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {\r\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\r\n        });\r\n    });\r\n}\r\nexports.applyMixins = applyMixins;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mixins.ts\n// module id = 5\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar HandelType = /** @class */ (function () {\r\n    function HandelType() {\r\n    }\r\n    /**\r\n     * 判断数据类型\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    HandelType.prototype.type = function (str) {\r\n        var toString = Object.prototype.toString, map = {\r\n            '[object Boolean]': 'boolean',\r\n            '[object Number]': 'number',\r\n            '[object String]': 'string',\r\n            '[object Function]': 'function',\r\n            '[object Array]': 'array',\r\n            '[object Date]': 'date',\r\n            '[object RegExp]': 'regExp',\r\n            '[object Undefined]': 'undefined',\r\n            '[object Null]': 'null',\r\n            '[object Object]': 'object',\r\n            '[object Map]': 'map',\r\n            '[object Set]': 'set',\r\n            '[object Symbol]': 'symbol'\r\n        };\r\n        return map[toString.call(str)];\r\n    };\r\n    /**\r\n     * 判断输入的内容是否在0~9之间\r\n     * @param str\r\n     * @returns {boolean}\r\n     */\r\n    HandelType.prototype.isNumber = function (str) {\r\n        // if(Number(str).toString() != 'NaN') return true;\r\n        // else return false;\r\n        if (this.type(str) != 'string')\r\n            return false;\r\n        else\r\n            return str >= '0' && str <= '9';\r\n    };\r\n    /**\r\n     * 判断是否符合指数特征\r\n     * @param ch\r\n     * @returns {boolean|Boolean}\r\n     */\r\n    HandelType.prototype.isExponent = function (ch) {\r\n        return ch === '+' || ch === '-' || this.isNumber(ch);\r\n    };\r\n    /**\r\n     * 判断是否属于特定字符：字母，_, $\r\n     * @param str\r\n     * @returns {boolean}\r\n     */\r\n    HandelType.prototype.isLetter = function (str) {\r\n        var arr = str.split('');\r\n        return arr.every(function (i) {\r\n            return (i >= 'a' && i <= 'z') || (i >= 'A' && i <= 'Z') || (i === '_') || (i === '$');\r\n        });\r\n    };\r\n    /**\r\n     * 判断字符是否属于空格\r\n     * @param str\r\n     * @returns {boolean}\r\n     */\r\n    HandelType.prototype.isWhiteSpace = function (str) {\r\n        return str === ' ' || str === '\\r' || str === '\\t' || str === '\\n' || str === '\\v' || str === '\\u00A0';\r\n    };\r\n    /**\r\n     * 判断被解析的字符串属于那种数据类型\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    HandelType.prototype.whichType = function (str) {\r\n        if (this.type(str) != 'string')\r\n            $log.error('数据类型错误' + str);\r\n        // '12', '12.12', '0.12e2'\r\n        if (this.isNumber(str) || str === '.')\r\n            return 'number';\r\n        // '\"abc\"'  \"'abc'\"\r\n        else if (str.charAt(0) === \"'\" || str.charAt(0) === '\"')\r\n            return 'string';\r\n        //字母，_, $\r\n        else if (this.isLetter(str))\r\n            return 'letter';\r\n        // '[\"a\",\"b\"]'\r\n        else if ((str === '[' || str === ']' || str === ','))\r\n            return 'array';\r\n        // '{}'\r\n        else if ((str === '{' || str === '}' || str === ':'))\r\n            return 'object';\r\n        // 'function'\r\n        else if (str === '(' || str === ')')\r\n            return 'function';\r\n        else\r\n            return 'other';\r\n    };\r\n    return HandelType;\r\n}());\r\nexports.default = HandelType;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/handelType.ts\n// module id = 6\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HandelCoding = /** @class */ (function () {\r\n    function HandelCoding() {\r\n    }\r\n    /**\r\n     * 组合对象属性语句，类似于a.b\r\n     * @param left\r\n     * @param right\r\n     * @returns {any}\r\n     */\r\n    HandelCoding.prototype.nonComputedMember = function (left, right) {\r\n        return '(' + left + ').' + right;\r\n    };\r\n    /**\r\n     *\r\n     * @param left\r\n     * @param right\r\n     * @returns {any}\r\n     */\r\n    HandelCoding.prototype.computedMember = function (left, right) {\r\n        return '(' + left + ')[' + right + ']';\r\n    };\r\n    /**\r\n     * 组合成条件不存在的语句 例如!(str)\r\n     * @param expression any\r\n     * @returns {any}\r\n     */\r\n    HandelCoding.prototype.notExist = function (expression) {\r\n        return '!(' + expression + ')';\r\n    };\r\n    /**\r\n     * 组合js表达式,例如组合成 var a = 123;\r\n     * @param token\r\n     * @param value\r\n     * @returns {any}\r\n     */\r\n    HandelCoding.prototype.concatCode = function (token, value) {\r\n        return token + '=' + value + ';';\r\n    };\r\n    /**\r\n    * 此方法用于模拟if语句，判断参数是否成立，并组装成if语句\r\n    * @param condition\r\n    * @param statement\r\n    */\r\n    HandelCoding.prototype.conditionIsRight = function (array, condition, statement) {\r\n        array.push('if(', condition, '){', statement, '}');\r\n    };\r\n    /**\r\n     * 该函数每次被调用，参数id递增\r\n     * @param id\r\n     * @return {string}\r\n     */\r\n    HandelCoding.prototype.compileId = function (id, arr, flag) {\r\n        var uid = 'compileId' + id;\r\n        if (!flag) {\r\n            arr.unshift(uid);\r\n        }\r\n        return uid;\r\n    };\r\n    return HandelCoding;\r\n}());\r\nexports.default = HandelCoding;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/handelCoding.ts\n// module id = 7\n// module chunks = 0","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\nvar dom_1 = require(\"../dom/dom\");\r\nvar parseTpl_1 = require(\"./parseTpl\");\r\nvar HandelData_1 = require(\"./HandelData\");\r\nvar HandelEventer_1 = require(\"../util/HandelEventer\");\r\nvar HandelEvent_1 = require(\"./HandelEvent\");\r\nvar index_1 = require(\"../parse/index\");\r\nvar http_1 = require(\"../http\");\r\nvar router_1 = require(\"../router\");\r\nvar store_1 = require(\"../store\");\r\nvar store = new store_1.default();\r\nvar PREFIX_DIRECTIVE = /(x[\\:\\-_]|data[\\:\\-_])/i;\r\nvar ID = 'c-data-id';\r\nvar ID_FOR = 'c-for-id';\r\nvar ID_REPEAT = 'c-repeat-id';\r\nvar renderComponents = /** @class */ (function () {\r\n    function renderComponents(selector, root, CList) {\r\n        this.selector = selector;\r\n        this.root = root;\r\n        this.CList = CList;\r\n        this.CObj = this.listToObj(CList);\r\n        this.eventList = [];\r\n        this.cRefList = [];\r\n        this.showList = [];\r\n        this.ifList = [];\r\n        this.ifTpl = {};\r\n        this.cHtmlList = [];\r\n        this.cForList = [];\r\n        this.cRepeatList = [];\r\n        this.cViewList = [];\r\n        this.dataId = parseInt(util_1.default.now());\r\n        this.componentToken = [];\r\n        this.componentNames = this.getComponentNameList();\r\n        this.componentAttrs = {};\r\n        this.templateId = {};\r\n        this.oneRootComponent = 1;\r\n        this.$router = undefined;\r\n        this.$routerCache = {};\r\n    }\r\n    /**\r\n     * 组件渲染到dom节点\r\n     */\r\n    renderComponents.prototype.componentToDom = function () {\r\n        var self = this, node, components = [], rootTpl = dom_1.default.wrapDom(this.theTpl(this.root), util_1.default._cameCase(this.root.name).toLowerCase());\r\n        function handelComponent() {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, invokeLooopNodes()];\r\n                        case 1:\r\n                            _a.sent();\r\n                            return [4 /*yield*/, invokeLoopComponents()];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [4 /*yield*/, invokeRouter()];\r\n                        case 3:\r\n                            _a.sent();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        handelComponent();\r\n        // 遍历节点\r\n        function invokeLooopNodes() {\r\n            node = self.loopNodes(self.root.name, dom_1.default.create(rootTpl), components);\r\n        }\r\n        // 遍历组件\r\n        function invokeLoopComponents() {\r\n            self.root.template = node[0].outerHTML;\r\n            self.root.isRoot = true;\r\n            self.templateId[node[0].getAttribute(ID)] = node[0].outerHTML;\r\n            self.loopComponents(components, self.root.data, self.root.components, self.root.name);\r\n        }\r\n        // 处理路由\r\n        function invokeRouter() {\r\n            if (store.has('routerConfig')) {\r\n                handelRouter();\r\n            }\r\n            function handelRouter() {\r\n                setTimeout(function () {\r\n                    if (window.document.readyState == \"complete\") {\r\n                        var hash = window.location.hash;\r\n                        if (hash == '') { // 处理默认首页， path=\"/\"\r\n                            var index = pathIndex();\r\n                            if (util_1.default.type(index) == 'object') {\r\n                                handelView(index);\r\n                            }\r\n                        }\r\n                        else {\r\n                            var r = getNowRouter(hash.substr(1));\r\n                            if (r != undefined) {\r\n                                handelView(r);\r\n                            }\r\n                        }\r\n                    }\r\n                    window.addEventListener('hashchange', function (data) {\r\n                        var nowPath = '';\r\n                        if (data.newURL.includes('/#')) {\r\n                            nowPath = data.newURL.split('/#')[1];\r\n                        }\r\n                        var r = getNowRouter(nowPath);\r\n                        if (r != undefined) {\r\n                            handelView(r);\r\n                        }\r\n                    }, false);\r\n                    function handelView(obj) {\r\n                        var name = obj.component.name;\r\n                        var delay = obj.delay || 0;\r\n                        setTimeout(function () {\r\n                            self.cViewList.forEach(function (v) {\r\n                                if (!dom_1.default.q(v.ele))\r\n                                    return;\r\n                                if (obj.cache && self.$routerCache.hasOwnProperty(name)) {\r\n                                    dom_1.default.q(v.ele).innerHTML = self.$routerCache[name];\r\n                                    self.handelEventListener(self.CObj[name], dom_1.default.q(v.ele).firstChild);\r\n                                }\r\n                                else {\r\n                                    dom_1.default.q(v.ele).innerHTML = '';\r\n                                    dom_1.default.q(v.ele).insertAdjacentHTML('afterbegin', '<' + util_1.default._cameCase(name) + '></' + util_1.default._cameCase(name) + '>');\r\n                                    self.loopNodes(name, dom_1.default.q(v.ele).childNodes, []);\r\n                                    self.loopComponents([self.CObj[name]], self.CObj[v.which].data || {}, [], v.which);\r\n                                    setTimeout(function () {\r\n                                        self.$routerCache[name] = dom_1.default.q(util_1.default._cameCase(name)).outerHTML;\r\n                                    }, 0);\r\n                                }\r\n                            });\r\n                        }, delay);\r\n                    }\r\n                }, 0);\r\n            }\r\n        }\r\n        // 获取当前路由\r\n        function getNowRouter(path) {\r\n            var router = new router_1.default(path, store.get('routerConfig'));\r\n            self.$router = router;\r\n            return router.nowRouter;\r\n        }\r\n        // 默认路径\r\n        function pathIndex() {\r\n            var obj = undefined;\r\n            store.get('routerConfig').forEach(function (v) {\r\n                if (v.path == '/') {\r\n                    obj = v;\r\n                }\r\n            });\r\n            return obj;\r\n        }\r\n    };\r\n    /**\r\n     * 组件的template, templateId, templateUrl\r\n     * @param component 组件\r\n     */\r\n    renderComponents.prototype.theTpl = function (component) {\r\n        // hasHtmlUrl, webpack打包需要引入html-loader\r\n        return (component.template ? component.template.trim() : undefined) || dom_1.default.hasHtml(component.templateId) || dom_1.default.hasHtmlUrl(component.templateUrl);\r\n    };\r\n    /**\r\n     * 组件的style, styleId, styleUrl\r\n     * @param component 组件\r\n     */\r\n    renderComponents.prototype.theStyle = function (component) {\r\n        // component.style\r\n        function handelString(str) {\r\n            if (str != undefined) {\r\n                return {\r\n                    type: 'string',\r\n                    result: str\r\n                };\r\n            }\r\n            return false;\r\n        }\r\n        // component.styleId\r\n        function handelId(id) {\r\n            if (dom_1.default.q(id) != undefined) {\r\n                return {\r\n                    type: 'id',\r\n                    result: id\r\n                };\r\n            }\r\n            return false;\r\n        }\r\n        // component.styleUrl, webpack打包需要引入css-loader\r\n        function handelUrl(url) {\r\n            if (url != undefined) {\r\n                // 针对import * as css from '';\r\n                if (util_1.default.type(url) == 'object') {\r\n                    url = url[0][1];\r\n                }\r\n                // 针对require('../xx.css')\r\n                if (util_1.default.type(url) == 'array') {\r\n                    url = url[1];\r\n                }\r\n                return {\r\n                    type: 'url',\r\n                    result: url\r\n                };\r\n            }\r\n            return false;\r\n        }\r\n        return handelString(component.style) || handelId(component.styleId) || handelUrl(component.styleUrl);\r\n    };\r\n    /**\r\n     * 遍历dom节点\r\n     * @param name 组件名称\r\n     * @param node dom节点\r\n     * @param components 组件列表\r\n     */\r\n    renderComponents.prototype.loopNodes = function (name, node, components) {\r\n        var _this = this;\r\n        for (var i = 0; i < node.length; i++) {\r\n            if (node[i].nodeType == 1) {\r\n                node[i].setAttribute(\"c-data-id\", this.dataId);\r\n                var cs = this.getComponent(node[i], name);\r\n                cs.forEach(function (v) {\r\n                    if (components) {\r\n                        components.push(util_1.default.deepClone(util_1.default.extend(_this.CObj[v], { token: _this.dataId })));\r\n                        // components.push(Util.extend(this.CObj[v], {token: this.dataId}));\r\n                    }\r\n                });\r\n                this.dataId++;\r\n                // 添加eventList, showList...等集合\r\n                this.addDirectiveList(name, node[i]);\r\n                if (node[i].childNodes && node[i].childNodes.length) {\r\n                    this.loopNodes(name, node[i].childNodes, components);\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    /**\r\n     * 添加eventList, showList...等集合\r\n     * @param name 组件名称\r\n     * @param node 节点\r\n     */\r\n    renderComponents.prototype.addDirectiveList = function (name, node) {\r\n        for (var j = 0, len = node.attributes; j < len.length; j++) {\r\n            var attrName = this.normalizeDirective(len[j].name);\r\n            if (attrName.match(/^cClick|cDbclick|cMouseover|cMousedown|cMouseup|cMousemove|cMouseout|cMouseleave|cBlur|cFocus|cChange|cInput|cDrag|cDragend|cDragenter|cDragleave|cDragover|cDragstart|cDrop|cFocus|cKeydown|cKeypress|cKeyup|cScroll|cSelect|cSubmit|cTtoggle|cResize|cWaiting|cProgress|cLoadstart|cDurationchange|cLoadedmetadata|cLoadeddata|cCanplay|cCanplaythrough|cPlay|cPause|cRef|cShow|cIf|cHtml|cFor|cRepeat|cView$/g)) {\r\n                switch (attrName) {\r\n                    case 'cRef':\r\n                        this.cRefList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID)\r\n                        });\r\n                        break;\r\n                    case 'cShow':\r\n                        this.showList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID),\r\n                            directive: attrName\r\n                        });\r\n                        // 在组件渲染前面处理display\r\n                        var displayStatus = dom_1.default.boolToDisplay(parseTpl_1.default(len[j].value, this.CObj[name].data, this.CObj[name].props));\r\n                        node.style.display = displayStatus;\r\n                        break;\r\n                    case 'cIf':\r\n                        this.ifList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID),\r\n                            directive: attrName,\r\n                            html: node.outerHTML\r\n                        });\r\n                        var ifInfo = parseTpl_1.default(len[j].value, this.CObj[name].data, this.CObj[name].props);\r\n                        if (ifInfo == 'true') {\r\n                            node.style.display = 'none';\r\n                        }\r\n                        break;\r\n                    case 'cHtml':\r\n                        this.cHtmlList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID),\r\n                            directive: attrName,\r\n                            html: node.outerHTML\r\n                        });\r\n                        break;\r\n                    case 'cFor':\r\n                        this.cForList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID),\r\n                            html: node.innerHTML\r\n                        });\r\n                        break;\r\n                    case 'cRepeat':\r\n                        this.cRepeatList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID)\r\n                        });\r\n                        break;\r\n                    case 'cView':\r\n                        this.cViewList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID)\r\n                        });\r\n                        break;\r\n                    default:\r\n                        this.eventList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID)\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 遍历组件\r\n     * @param components 模板中的组件集合\r\n     * @param fatherData 父组件data数据\r\n     * @param componentArr 注入的组件集合\r\n     * @param componentName 父组件名称\r\n     */\r\n    renderComponents.prototype.loopComponents = function (components, fatherData, componentArr, componentName) {\r\n        if (components.length && componentArr == undefined) {\r\n            $log.error('找不到组件为' + componentName + '的components属性');\r\n        }\r\n        var self = this;\r\n        components.forEach(function (v) {\r\n            if (v == undefined)\r\n                return;\r\n            // “模板中的组件” 与 “注入的组件” 对比\r\n            self.compareChildComponentAndInjectComponents(v.name, componentArr);\r\n            // 给组件赋能\r\n            v.$data = HandelData_1.default.$data;\r\n            v.$http = http_1.default;\r\n            v.$event = HandelEvent_1.default;\r\n            v.$router = self.$router;\r\n            function handelCC() {\r\n                return __awaiter(this, void 0, void 0, function () {\r\n                    var before;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, self.handelDataChange(v)];\r\n                            case 1:\r\n                                _a.sent(); // 监听data数据改变\r\n                                return [4 /*yield*/, self.handelBeforeRender(v)];\r\n                            case 2:\r\n                                before = _a.sent();\r\n                                return [4 /*yield*/, self.handelAfterRender(before, v)];\r\n                            case 3:\r\n                                _a.sent(); //在组件渲染之后执行\r\n                                return [2 /*return*/];\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            handelCC();\r\n        });\r\n    };\r\n    /**\r\n     * 在组建渲染之前执行\r\n     * @param v 组件\r\n     */\r\n    renderComponents.prototype.handelBeforeRender = function (v) {\r\n        if (v.beforeRender) {\r\n            v.$el = undefined;\r\n            v.$refs = undefined;\r\n            v.componentStatus = 'beforeRender';\r\n            v.beforeRender();\r\n        }\r\n        return 'beforeRenderIsDone';\r\n    };\r\n    /**\r\n     * 在组件渲染之后执行\r\n     * @param status handelBeforeRender()的返回值\r\n     * @param v 组件\r\n     */\r\n    renderComponents.prototype.handelAfterRender = function (status, v) {\r\n        if (status != 'beforeRenderIsDone') {\r\n            return;\r\n        }\r\n        var self = this;\r\n        function invokeAfterRender() {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var step1, step2, step3, step4, step5, step6, step7;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, addStyle()];\r\n                        case 1:\r\n                            step1 = _a.sent();\r\n                            return [4 /*yield*/, renderOnce(step1)];\r\n                        case 2:\r\n                            step2 = _a.sent();\r\n                            return [4 /*yield*/, handelCforDirective(step2)];\r\n                        case 3:\r\n                            step3 = _a.sent();\r\n                            return [4 /*yield*/, handelOtherDirective(step3)];\r\n                        case 4:\r\n                            step4 = _a.sent();\r\n                            return [4 /*yield*/, handelRenderFn(step4)];\r\n                        case 5:\r\n                            step5 = _a.sent();\r\n                            return [4 /*yield*/, loopChildComponent(step5)];\r\n                        case 6:\r\n                            step6 = _a.sent();\r\n                            return [4 /*yield*/, handelClickDirective(step6)];\r\n                        case 7:\r\n                            step7 = _a.sent();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        if (v.render) {\r\n            invokeAfterRender();\r\n        }\r\n        function addStyle() {\r\n            // head添加style\r\n            dom_1.default.addStyle(self.theStyle(v), v);\r\n            return 'done';\r\n        }\r\n        function renderOnce(status) {\r\n            if (status != 'done') {\r\n                return;\r\n            }\r\n            var node;\r\n            // 根组件单独渲染\r\n            if (v.name == self.root.name) {\r\n                if (self.oneRootComponent == 2) {\r\n                    $log.error('根组件' + self.root.name + '只能有一个');\r\n                }\r\n                var dom = dom_1.default.q(self.selector);\r\n                if (dom == undefined) {\r\n                    $log.error('节点' + self.selector + '不存在');\r\n                }\r\n                dom.innerHTML = parseTpl_1.default(self.theTpl(self.root), self.root.data, {});\r\n                node = dom_1.default.q('[' + ID + '=\"' + v.token + '\"]');\r\n                self.oneRootComponent++;\r\n            }\r\n            else {\r\n                var newNode = self.loopNodes(v.name, dom_1.default.create(self.theTpl(self.CObj[v.name])));\r\n                node = dom_1.default.q('[' + ID + '=\"' + v.token + '\"]');\r\n                self.templateId[v.token] = newNode[0].outerHTML;\r\n                // 编译组件属性，父组件的data值覆盖子组件的props值（组件的attr值与props对比，有则覆盖）\r\n                var newProps = dom_1.default.combineAttrAndProps(self.componentAttrs[v.token], self.CObj[v.name].props);\r\n                node.innerHTML = self.getChangedData(newNode[0].outerHTML, self.CObj[v.name].data, newProps);\r\n            }\r\n            return node;\r\n        }\r\n        function handelCforDirective(node) {\r\n            // 处理c-for\r\n            self.loopCforToDom(self.cForList, v);\r\n            return node;\r\n        }\r\n        function handelOtherDirective(node) {\r\n            // 处理c-if\r\n            self.loopIfToDom(self.ifList, v);\r\n            // 处理c-html\r\n            self.loopHtmlToDom(self.cHtmlList, v);\r\n            return node;\r\n        }\r\n        function handelRenderFn(node) {\r\n            v.$el = node;\r\n            // 处理c-ref\r\n            v.$refs = {};\r\n            var currentRefs = self.cRefList.filter(function (rfs) {\r\n                return rfs.which == v.name;\r\n            });\r\n            currentRefs.forEach(function (r) {\r\n                v.$refs[r.fn] = dom_1.default.q(r.ele);\r\n            });\r\n            v.componentStatus = 'afterRender';\r\n            v.render();\r\n            return node;\r\n        }\r\n        function loopChildComponent(node) {\r\n            // 遍历组件子节点\r\n            if (v.name != self.root.name) {\r\n                var arr = self.findComponent(node.firstChild);\r\n                if (arr.length) {\r\n                    if (v.name) {\r\n                        // self.loopComponents(arr, v.data, Util.deepClone(v.components), v.name)\r\n                        self.loopComponents(arr, v.data, v.components, v.name);\r\n                    }\r\n                }\r\n            }\r\n            return node;\r\n        }\r\n        function handelClickDirective(node) {\r\n            //绑定事件\r\n            self.handelEventListener(v, node);\r\n        }\r\n    };\r\n    /**\r\n     * “模板中的组件” 与 “注入的组件” 对比\r\n     * @param child 模板中的单个组件\r\n     * @param arr 注入的组件集合\r\n     */\r\n    renderComponents.prototype.compareChildComponentAndInjectComponents = function (child, arr) {\r\n        var self = this, flag = false;\r\n        if (child = this.root.name) { //判断是否为根组件\r\n            flag = true;\r\n        }\r\n        else if (!arr.length && child != this.root.name) { //普通组件，有组件标识但components为空\r\n            flag = false;\r\n        }\r\n        else { //普通组件，有组件标识但components不为空\r\n            flag = arr.some(function (v) {\r\n                if (v.name) {\r\n                    return child != self.root.name && child == v.name;\r\n                }\r\n            });\r\n        }\r\n        if (!flag)\r\n            $log.error('名称为' + child + '的组件未找到');\r\n    };\r\n    /**\r\n     * 组件渲染后的事件绑定\r\n     * @param v 组件对象\r\n     * @param node 节点\r\n     */\r\n    renderComponents.prototype.handelEventListener = function (v, node) {\r\n        // 获取当前组件的事件集合\r\n        var attrArr = dom_1.default.getAttr(ID, node);\r\n        var newAttrArr = this.array_intersection(attrArr, this.eventList);\r\n        // 事件绑定处理\r\n        if (newAttrArr.length) {\r\n            var arr = newAttrArr.filter(function (ev) {\r\n                return ev.which == v.name;\r\n            });\r\n            arr.forEach(function (val) {\r\n                var e_1, _a;\r\n                if (document.querySelectorAll(val.ele)) {\r\n                    try {\r\n                        try {\r\n                            for (var _b = __values(document.querySelectorAll(val.ele)), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                                var dq = _c.value;\r\n                                dq.addEventListener(val.type, function (event) {\r\n                                    try {\r\n                                        if (val.fn.toString().match(/\\(\\)$/)) {\r\n                                            if (v.hasOwnProperty(val.fn.toString().split('()')[0])) {\r\n                                                index_1.default.parse(val.fn)(v, { $event: event });\r\n                                            }\r\n                                            else {\r\n                                                $log.error('组件' + v.name + '中不存在方法' + val.fn);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            $log.error('组件' + v.name + '中方法' + val.fn + '语法错误');\r\n                                        }\r\n                                    }\r\n                                    catch (e) {\r\n                                        console.log(e);\r\n                                    }\r\n                                }, false);\r\n                            }\r\n                        }\r\n                        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n                        finally {\r\n                            try {\r\n                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                            }\r\n                            finally { if (e_1) throw e_1.error; }\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        $log.error(e);\r\n                    }\r\n                }\r\n                else {\r\n                    $log.error('属性为' + val.ele + '的节点不存在！');\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * 监听data数据改变\r\n     * @param v 组件对象\r\n     */\r\n    renderComponents.prototype.handelDataChange = function (v, type) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            HandelEventer_1.default.listen(i, function (info) {\r\n                if (info.target == v.token && JSON.stringify(info.oldVal) != JSON.stringify(info.newVal)) { //只处理当前组件的属性改变\r\n                    // 获取组件原始的tpl，将其转为dom\r\n                    var parseNode = dom_1.default.create(_this.templateId[v.token]);\r\n                    var dataPos = _this.dataPosition(i, parseNode, v.name);\r\n                    // 在dom渲染之前执行，更新data数据\r\n                    _this.updateData(i, info);\r\n                    if (dom_1.default.q(util_1.default._cameCase(v.name))) {\r\n                        // data数据改变重新渲染对象的节点\r\n                        _this.dataChangeToDom(parseNode, dataPos, info, v.name);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        for (var i in v.data) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * 在dom渲染之前执行，更新data数据\r\n     * @param key data的key\r\n     * @param info 更改的信息\r\n     */\r\n    renderComponents.prototype.updateData = function (key, info) {\r\n        // 所属组件\r\n        var component = info.which;\r\n        this.CObj[component].data[key] = info.newVal;\r\n    };\r\n    /**\r\n     * data数据改变重新渲染对象的节点\r\n     * @param parseNode 原始的dom节点\r\n     * @param dataPos 改变的数据集合\r\n     * @param info data的变化信息\r\n     * @param component 所属组件\r\n     */\r\n    renderComponents.prototype.dataChangeToDom = function (parseNode, dataPos, info, component) {\r\n        // 文本类型\r\n        this.loopTextToDom(parseNode, dataPos, info, component);\r\n        // 属性类型\r\n        this.loopAttrToDom(dataPos, info, component);\r\n    };\r\n    /**\r\n     * 文本改变渲染对应的dom节点\r\n     * @param parseNode 编译的节点\r\n     * @param dataPos 改变的数据集合\r\n     * @param info data的变化信息\r\n     * @param component 所属组件\r\n     */\r\n    renderComponents.prototype.loopTextToDom = function (parseNode, dataPos, info, component) {\r\n        var textData = dataPos.filter(function (df) {\r\n            return df.type == 'text';\r\n        });\r\n        if (textData.length) {\r\n            textData.forEach(function (dp) {\r\n                var originNode = parseNode[0].parentNode.querySelector(dp.position).childNodes[dp.item].textContent;\r\n                document.querySelector(dp.position).childNodes[dp.item].textContent = parseTpl_1.default(originNode, info.new, info.props);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * 属性改变渲染对应的dom节点\r\n     * @param dataPos 改变的数据集合\r\n     * @param info data的变化信息\r\n     * @param component 所属组件\r\n     */\r\n    renderComponents.prototype.loopAttrToDom = function (dataPos, info, component) {\r\n        var _this = this;\r\n        var self = this;\r\n        var attrData = dataPos.filter(function (df) {\r\n            return df.type == 'attr';\r\n        });\r\n        if (attrData.length) {\r\n            attrData.forEach(function (dp) {\r\n                // 处理指令\r\n                switch (dp.attr) {\r\n                    case 'c-show':\r\n                        var newAttr = dom_1.default.boolToDisplay(index_1.default.parse(dp.value)(info.new));\r\n                        dom_1.default.q(dp.position).style.display = newAttr;\r\n                        break;\r\n                    case 'c-if':\r\n                        var dom = dom_1.default.q(dp.position);\r\n                        if (dom != undefined) {\r\n                            dom_1.default.q(dp.position).setAttribute(dp.attr, info.newVal);\r\n                        }\r\n                        _this.handelIf(dp, component);\r\n                        break;\r\n                    case 'c-for':\r\n                        _this.loopCforToDom(dataPos, _this.CObj[component], 'dataChange');\r\n                        break;\r\n                    default:\r\n                        changeAttr(dp);\r\n                }\r\n                function changeAttr(dp) {\r\n                    dom_1.default.q(dp.position).setAttribute(dp.attr, info.newVal);\r\n                    // 更新componentAttrs\r\n                    self.componentAttrs[dp.componentToken][dp.attr] = info.newVal;\r\n                }\r\n                //父组件的属性改变\r\n                function handelComponent(dp) {\r\n                    var childChangePos = self.dataPosition(dp.attr, dom_1.default.create(self.templateId[dp.componentToken]), component);\r\n                    // 文本类型\r\n                    var childChangePosText = childChangePos.filter(function (df) {\r\n                        return df.type == 'text';\r\n                    });\r\n                    childChangePosText.forEach(function (chItem) {\r\n                        var changedComponent = self.CObj[dp.componentName], changedOriginComponentProps = changedComponent.props, changedComponentData = changedComponent.data, changedPropKey = dp.attr, changedPropVal = self.componentAttrs[dp.componentToken][dp.attr], changedComponentProps = self.combineChangedProps(changedPropKey, changedPropVal, changedOriginComponentProps);\r\n                        var changedOrginNode = dom_1.default.create(self.templateId[dp.componentToken]);\r\n                        var changedOrginText = changedOrginNode[0].parentNode.querySelector(chItem.position).childNodes[chItem.item].textContent;\r\n                        dom_1.default.q(chItem.position).childNodes[chItem.item].textContent = parseTpl_1.default(changedOrginText, changedComponentData, changedComponentProps);\r\n                    });\r\n                    // 属性类型\r\n                    var childChangePosAttr = childChangePos.filter(function (df) {\r\n                        return df.type == 'attr';\r\n                    });\r\n                    childChangePosAttr.forEach(function (chItem) {\r\n                        // 父组件的attr值与子组件的props值进行联动\r\n                        if (dp.attr == chItem.value) {\r\n                            chItem.value = dp.value;\r\n                        }\r\n                        dom_1.default.q(chItem.position).setAttribute(chItem.attr, chItem.value);\r\n                        // 更新componentAttrs\r\n                        self.componentAttrs[chItem.componentToken][chItem.attr] = chItem.value;\r\n                        self.componentAttrs[chItem.componentToken][chItem.attr] = chItem.value;\r\n                        if (chItem.isComponent) {\r\n                            handelComponent(chItem);\r\n                        }\r\n                    });\r\n                }\r\n                if (dp.isComponent) {\r\n                    handelComponent(dp);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * 处理c-for指令\r\n     * @param arr c-for 集合\r\n     * @param component 指令所在组件\r\n     */\r\n    renderComponents.prototype.loopCforToDom = function (arr, component, reRender) {\r\n        var _this = this;\r\n        var currentRepeat = arr.filter(function (rVal) {\r\n            return rVal.which == component.name;\r\n        });\r\n        var self = this;\r\n        currentRepeat.forEach(function (re) {\r\n            // 解析指令，获取重复次数\r\n            var match2 = re.fn.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)\\s*$/);\r\n            if (!match2) {\r\n                $log.error('c-for格式有误');\r\n            }\r\n            var itemExp = match2[1];\r\n            var itemsExp = match2[2];\r\n            var items = _this.inComponent(itemsExp, component);\r\n            if (items && util_1.default.type(items) == 'array' && items.length) {\r\n                if (reRender == 'dataChange') {\r\n                    dom_1.default.removeDomExpectWhich(0, '[c-for-id=\"' + dom_1.default.q(re.ele).getAttribute('c-for-id') + '\"]');\r\n                }\r\n                // 渲染单个有c-for指令的模板\r\n                items.forEach(function (item, i) {\r\n                    // 克隆节点，重复次数\r\n                    var newn = dom_1.default.q(re.ele).cloneNode(true);\r\n                    var data = {};\r\n                    data[match2[1]] = item;\r\n                    newn.innerHTML = parseTpl_1.default(re.html, data, self.CObj[component.name]['props'] || {});\r\n                    var newNode = self.loopNodes(component.name, dom_1.default.create(newn.outerHTML));\r\n                    var innerComponents = self.findComponent(newNode[0]);\r\n                    newNode[0].setAttribute('c-for-id', re.id);\r\n                    // 重新编译节点\r\n                    if (i == 0) {\r\n                        dom_1.default.q(re.ele).innerHTML = newNode[0].innerHTML;\r\n                        dom_1.default.q(re.ele).setAttribute('c-for-id', re.id);\r\n                    }\r\n                    else {\r\n                        var el = document.querySelectorAll('[c-for-id=\"' + re.id + '\"][c-for=\"' + re.fn + '\"]');\r\n                        el[el.length - 1].insertAdjacentElement('afterEnd', newNode[0]);\r\n                    }\r\n                    if (innerComponents.length) {\r\n                        self.loopComponents(util_1.default.deepClone(innerComponents), data, [], component.name);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                $log.error('组件' + component.name + '内c-for指令的格式不正确');\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * 处理c-if指令\r\n     * @param arr c-if 集合\r\n     * @param component 指令所在组件\r\n     */\r\n    renderComponents.prototype.loopIfToDom = function (arr, component) {\r\n        var _this = this;\r\n        var currentIf = arr.filter(function (ifVal) {\r\n            return ifVal.which == component.name;\r\n        });\r\n        currentIf.forEach(function (cIf) {\r\n            _this.handelIf(cIf, component.name);\r\n        });\r\n    };\r\n    /**\r\n     * 移除c-if指令所在的节点\r\n     * @param cIf c-if指令所绑定的节点信息\r\n     */\r\n    renderComponents.prototype.handelIf = function (cIf, componentName) {\r\n        var ifDom = dom_1.default.q(cIf.ele || cIf.position);\r\n        // 节点存在，移除节点\r\n        if (ifDom != undefined) {\r\n            var ifInfo = ifDom.getAttribute('c-if');\r\n            if (ifInfo == 'true') {\r\n                ifDom.parentNode.replaceChild(dom_1.default.addComment('c-if:' + cIf.id + ''), ifDom);\r\n                this.ifTpl[cIf.id] = ifDom.outerHTML;\r\n            }\r\n        }\r\n        // 已经被移除，还原节点\r\n        if (ifDom == undefined) {\r\n            dom_1.default.replaceComment(dom_1.default.q(util_1.default._cameCase(componentName)), cIf.attr + ':' + cIf.id, dom_1.default.create(this.ifTpl[cIf.id])[0]);\r\n            // 更改属性\r\n            dom_1.default.attr((cIf.ele || cIf.position), 'c-if', false);\r\n            dom_1.default.q(cIf.ele || cIf.position).style.display = 'block';\r\n        }\r\n    };\r\n    /**\r\n     * 处理c-html指令\r\n     * @param arr c-html指令集合\r\n     * @param component 所属组件\r\n     */\r\n    renderComponents.prototype.loopHtmlToDom = function (arr, component) {\r\n        var currentHtml = arr.filter(function (h) {\r\n            return h.which == component.name;\r\n        });\r\n        currentHtml.forEach(function (h) {\r\n            dom_1.default.q(h.ele).innerHTML = dom_1.default.attr(h.ele, 'c-html');\r\n        });\r\n    };\r\n    /**\r\n     * 组合经过改变的组件的props值\r\n     * @param key\r\n     * @param val\r\n     * @param props\r\n     */\r\n    renderComponents.prototype.combineChangedProps = function (key, val, props) {\r\n        if (props[key]) {\r\n            props[key]['default'] = val;\r\n        }\r\n        return props;\r\n    };\r\n    /**\r\n     * 数组去重\r\n     * @param a\r\n     * @param b\r\n     */\r\n    renderComponents.prototype.array_intersection = function (a, b) {\r\n        var result = [];\r\n        for (var i = 0; i < b.length; i++) {\r\n            var temp = b[i].id;\r\n            for (var j = 0; j < a.length; j++) {\r\n                if (temp === a[j]) {\r\n                    result.push(b[i]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * 判断dom节点是组件\r\n     * @param node dom节点\r\n     */\r\n    renderComponents.prototype.isComponent = function (node) {\r\n        var name = dom_1.default.parseName(node);\r\n        return this.CObj[name] != undefined;\r\n    };\r\n    /**\r\n     * 判断表达式内的字符是否在组件的data中\r\n     * @param name data属性名称\r\n     * @param expression '{{xxx}}'\r\n     * @returns 存在返回{{ }}内的表达式，否在返回null\r\n     */\r\n    renderComponents.prototype.isComponentData = function (name, expression) {\r\n        var regExp = new RegExp(\"{{\\\\s*([\\\\s\\\\S]*\" + name + \"[\\\\s\\\\S]*)\\\\s*}}\", \"gm\");\r\n        var res = regExp.exec(expression);\r\n        if (res == null) {\r\n            return null;\r\n        }\r\n        var exp = {\r\n            '': true,\r\n            '+': true,\r\n            '-': true,\r\n            '*': true,\r\n            '/': true,\r\n            '(': true,\r\n            ')': true,\r\n            '.': true,\r\n            '[': true,\r\n            ']': true,\r\n            '!': true,\r\n            '!=': true,\r\n            '!==': true,\r\n            '>': true,\r\n            '>=': true,\r\n            '>==': true,\r\n            '<': true,\r\n            '<=': true,\r\n            '<==': true,\r\n            '?': true,\r\n            ':': true\r\n        };\r\n        var nameIndex = res[1].indexOf(name), prev1 = res[1].charAt(nameIndex - 1), prev2 = res[1].charAt(nameIndex - 2), prev3 = res[1].charAt(nameIndex - 3), next1 = res[1].charAt(nameIndex + 1), next2 = res[1].charAt(nameIndex + 2), next3 = res[1].charAt(nameIndex + 3);\r\n        if (exp[prev1] || exp[prev2] || exp[prev3] || exp[next1] || exp[next2] || exp[next3]) {\r\n            return res[1];\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * 获取某个data属性名在节点中的位置\r\n     * @param name data属性名称\r\n     * @param node dom节点\r\n     * @param component 所属组件\r\n     */\r\n    renderComponents.prototype.dataPosition = function (name, node, component) {\r\n        var res = [], self = this;\r\n        // 属性\r\n        function loopAttr(node) {\r\n            if (typeof node == 'object' && node.length) {\r\n                for (var i = 0; i < node.length; i++) {\r\n                    if (node[i].nodeType == 1 && node[i].hasAttributes()) {\r\n                        for (var j = 0, len = node[i].attributes; j < len.length; j++) {\r\n                            if (len[j].name == 'c-for') {\r\n                                var match2 = len[j].value.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)\\s*$/);\r\n                                if (!match2) {\r\n                                    $log.error('组件' + component + '内的c-for指令表达式' + len[j] + '有误');\r\n                                }\r\n                                if (match2[2] == name && !self.isComponent(node[i])) {\r\n                                    res = res.concat({\r\n                                        attr: len[j].name,\r\n                                        fn: len[j].value,\r\n                                        type: 'attr',\r\n                                        id: node[i].getAttribute(ID),\r\n                                        ele: '[' + ID + '=\"' + node[i].getAttribute(ID) + '\"]',\r\n                                        item: i,\r\n                                        isComponent: false,\r\n                                        html: node[i].innerHTML,\r\n                                        which: component //所属组件\r\n                                    });\r\n                                }\r\n                            }\r\n                            else {\r\n                                var attrVal = self.isComponentData(name, len[j].value);\r\n                                if (attrVal) {\r\n                                    var isCs = self.isComponent(node[i]);\r\n                                    if (isCs) {\r\n                                        res = res.concat({\r\n                                            attr: len[j].name,\r\n                                            value: name,\r\n                                            type: 'attr',\r\n                                            id: node[i].getAttribute(ID),\r\n                                            position: '[' + ID + '=\"' + node[i].getAttribute(ID) + '\"]',\r\n                                            item: i,\r\n                                            isComponent: true,\r\n                                            componentName: dom_1.default.parseName(node[i]),\r\n                                            componentToken: node[i].getAttribute(ID),\r\n                                            which: component //所属组件\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        res = res.concat({\r\n                                            attr: len[j].name,\r\n                                            value: attrVal,\r\n                                            type: 'attr',\r\n                                            id: node[i].getAttribute(ID),\r\n                                            position: '[' + ID + '=\"' + node[i].getAttribute(ID) + '\"]',\r\n                                            item: i,\r\n                                            isComponent: false,\r\n                                            which: component //所属组件\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (node[i].childNodes && node[i].childNodes.length) {\r\n                            loopAttr(node[i].childNodes);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        loopAttr(node);\r\n        // textContent\r\n        function loopText(node) {\r\n            if (typeof node == 'object' && node.length) {\r\n                for (var i = 0; i < node.length; i++) {\r\n                    if (node[i].nodeType == 3) {\r\n                        var text = node[i].textContent;\r\n                        if (self.isComponentData(name, text)) {\r\n                            res = res.concat({\r\n                                value: name,\r\n                                type: 'text',\r\n                                position: '[' + ID + '=\"' + node[i].parentNode.getAttribute(ID) + '\"]',\r\n                                item: i,\r\n                                isComponent: false\r\n                            });\r\n                        }\r\n                    }\r\n                    if (node[i].childNodes && node[i].childNodes.length) {\r\n                        loopText(node[i].childNodes);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        loopText(node);\r\n        return res;\r\n    };\r\n    /**\r\n     * 组件集合转json对象\r\n     * @param arr\r\n     */\r\n    renderComponents.prototype.listToObj = function (arr) {\r\n        var obj = {};\r\n        arr.forEach(function (v) {\r\n            obj[v.name] = v;\r\n        });\r\n        return obj;\r\n    };\r\n    /**\r\n     * 获取组件的名称集合\r\n     */\r\n    renderComponents.prototype.getComponentNameList = function () {\r\n        var arr = [];\r\n        this.CList.forEach(function (v) {\r\n            arr.push(v.name);\r\n        });\r\n        return arr;\r\n    };\r\n    /**\r\n     * 根据dom节点获取component， 遍历子节点\r\n     * @param node dom节点\r\n     */\r\n    renderComponents.prototype.findComponent = function (node) {\r\n        if (node.nodeType == 3) {\r\n            return;\r\n        }\r\n        var arr = [];\r\n        var self = this;\r\n        // tag标签\r\n        function loopTagNode(node) {\r\n            var normalizedNodeName = self.normalizeDirective(dom_1.default.getNodeName(node).toLowerCase());\r\n            if (self.componentNames.includes(normalizedNodeName)) {\r\n                // arr.push(Util.deepClone(Util.extend(self.CObj[normalizedNodeName], {token: node.getAttribute(ID)})));\r\n                arr.push(util_1.default.extend(self.CObj[normalizedNodeName], { token: node.getAttribute(ID) }));\r\n            }\r\n            if (node.childNodes && node.childNodes.length) {\r\n                node.childNodes.forEach(function (v) {\r\n                    if (v.nodeType != 3) {\r\n                        loopTagNode(v);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        loopTagNode(node);\r\n        return arr;\r\n    };\r\n    /**\r\n     * 根据dom节点获取component， 不遍历子节点\r\n     * @param node dom节点\r\n     * @param name 组件名称\r\n     */\r\n    renderComponents.prototype.getComponent = function (node, name) {\r\n        var arr = [];\r\n        var self = this;\r\n        // tag标签\r\n        function loopTagNode(node) {\r\n            var normalizedNodeName = util_1.default.cameCase(dom_1.default.getNodeName(node).toLowerCase());\r\n            if (self.componentNames.includes(normalizedNodeName)) {\r\n                arr.push(normalizedNodeName);\r\n                var obj = {};\r\n                for (var i = 0, len = node.attributes; i < len.length; i++) {\r\n                    if (len[i].name != ID) {\r\n                        obj[len[i].name] = parseTpl_1.default(len[i].value, self.CObj[name].data, self.CObj[name].props);\r\n                    }\r\n                }\r\n                if (!dom_1.default.noOtherAttr(ID, node)) {\r\n                    obj['component'] = normalizedNodeName;\r\n                    self.componentAttrs[node.getAttribute(ID)] = obj;\r\n                }\r\n            }\r\n        }\r\n        loopTagNode(node);\r\n        return arr;\r\n    };\r\n    /**\r\n     * 判断指令是否含有mulit属性\r\n     * @param name\r\n     */\r\n    renderComponents.prototype.directiveIsMulit = function (name) {\r\n        for (var i = 0, len = this.CList; i < len.length; i++) {\r\n            if (len[i]['name'] == name && len[i].mulit == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * 组件指令的层级关系\r\n     * @param a\r\n     * @param b\r\n     */\r\n    renderComponents.prototype.componentLayer = function (a, b) {\r\n        var sort = b.layer - a.layer;\r\n        if (sort == 0) {\r\n            if (a.name != b.name) {\r\n                return a.name < b.name ? -1 : 1;\r\n            }\r\n            else {\r\n                return a.cid - b.cid;\r\n            }\r\n        }\r\n        else {\r\n            return sort;\r\n        }\r\n    };\r\n    /**\r\n     * 获取data数据改变后的模板\r\n     * @param html\r\n     * @param data\r\n     */\r\n    renderComponents.prototype.getChangedData = function (html, data, props) {\r\n        return parseTpl_1.default(html, data, props);\r\n    };\r\n    /**\r\n     * 序列化指令\r\n     * @param name\r\n     */\r\n    renderComponents.prototype.normalizeDirective = function (name) {\r\n        return util_1.default.cameCase(name.replace(PREFIX_DIRECTIVE, ''));\r\n    };\r\n    /**\r\n     * 判断变量是否在组件的data,props之中, 并返回结果\r\n     * @param exp 变量\r\n     * @param component 组件\r\n     */\r\n    renderComponents.prototype.inComponent = function (exp, component) {\r\n        return component.data[exp] || component.props.default[exp];\r\n    };\r\n    return renderComponents;\r\n}());\r\nexports.default = renderComponents;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/render.ts\n// module id = 8\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar util_1 = require(\"../util\");\r\nvar $log = require(\"../log\");\r\nvar HandelDom = /** @class */ (function () {\r\n    function HandelDom() {\r\n        this.BOOLEAN_ATTRS = {\r\n            selected: true\r\n        };\r\n        this.BOOLEAN_ELEMENT = {};\r\n    }\r\n    /**\r\n     * 获取dom节点\r\n     * @param str 节点标识,class,id...\r\n     */\r\n    HandelDom.prototype.q = function (str) {\r\n        return document.querySelector(str);\r\n    };\r\n    /**\r\n     * 根据字符串创建dom节点，返回dom节点\r\n     * @param str\r\n     */\r\n    HandelDom.prototype.createDom = function (str) {\r\n        if (util_1.default.type(str) != 'string') {\r\n            $log.error('组件模板' + str + '必须为字符串，请检查组件的template,templateId,templateUrl属性');\r\n        }\r\n        var html = \"\" + str;\r\n        html = html.trim();\r\n        html = html.replace(/<!--[\\s\\S]*?-->/gm, ''); //去除html注释\r\n        html = html.replace(/>\\s+([^\\s<]*)\\s+</gm, '>$1<').trim(); //去除html标签间的多余空白\r\n        var pattern = /([^>]*)(<([a-z/][-a-z0-9_:.]*)[^>/]*(\\/*)>)([^<]*)/gm, matchArr, start = Date.now();\r\n        var arr = [];\r\n        while ((matchArr = pattern.exec(html))) {\r\n            var textBefore = matchArr[1], //获取排在标签前的文本\r\n            elem = matchArr[2], //获取整个开标签或闭标签\r\n            elemName = matchArr[3], //获取标签名\r\n            closeSign = matchArr[4], //判断是否为自闭合标签标记\r\n            textAfter = matchArr[5]; //获取排在标签后的文本\r\n            arr.push(elemName);\r\n        }\r\n        var dom = document.createElement(arr[0]);\r\n        dom.innerHTML = str;\r\n        return dom;\r\n    };\r\n    /**\r\n     * 根据字符串创建dom节点，返回dom的子节点\r\n     * @param str\r\n     */\r\n    HandelDom.prototype.create = function (str) {\r\n        var div = this.createDom(str);\r\n        return div.childNodes;\r\n    };\r\n    /**\r\n    * 获取节点名称\r\n    * @param node\r\n    */\r\n    HandelDom.prototype.getNodeName = function (node) {\r\n        return node.nodeName ? node.nodeName : node[0].nodeName;\r\n    };\r\n    /**\r\n     * 获取节点的驼峰名称\r\n     * @param node\r\n     */\r\n    HandelDom.prototype.parseName = function (node) {\r\n        return util_1.default.cameCase(node.tagName.toLowerCase());\r\n    };\r\n    /**\r\n     * 包括dom节点\r\n     * @param str 节点字符串\r\n     * @param wrap 包括的tag标签\r\n     */\r\n    HandelDom.prototype.wrapDom = function (str, wrap) {\r\n        return \"<\" + wrap + \">\" + str + \"</\" + wrap + \">\";\r\n    };\r\n    /**\r\n     * 获取某个属性的集合\r\n     * @param attr 属性名\r\n     * @param node 节点\r\n     */\r\n    HandelDom.prototype.getAttr = function (attr, node) {\r\n        var arr = [];\r\n        if (node.nodeType == 1 && node.getAttribute(attr)) {\r\n            arr.push(node.getAttribute(attr));\r\n        }\r\n        if (node.childNodes && node.childNodes.length) {\r\n            getA(node.childNodes);\r\n        }\r\n        function getA(node) {\r\n            for (var i = 0; i < node.length; i++) {\r\n                if (node[i].nodeType == 1 && node[i].getAttribute(attr)) {\r\n                    arr.push(node[i].getAttribute(attr));\r\n                }\r\n                if (node[i].childNodes && node[i].childNodes.length) {\r\n                    getA(node[i].childNodes);\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    };\r\n    /**\r\n     * 父组件的data值覆盖子组件的props值（组件的attr值与props对比，有则覆盖）\r\n     * @param attr {component:'hello', 'width': 100}\r\n     * @param props { 'width': { default:50, type:Number } }\r\n     */\r\n    HandelDom.prototype.combineAttrAndProps = function (attr, props) {\r\n        if (util_1.default.isEmpty(attr))\r\n            return props;\r\n        if (attr) {\r\n            var newAttr = util_1.default.expectSome(attr, 'component');\r\n            for (var i in newAttr) {\r\n                if (props && props[i]) {\r\n                    props[i].default = newAttr[i];\r\n                }\r\n            }\r\n        }\r\n        return props;\r\n    };\r\n    /**\r\n     * 节点没有除了attr以外的其他属性\r\n     * @param attr 属性\r\n     * @param node 节点\r\n     */\r\n    HandelDom.prototype.noOtherAttr = function (attr, node) {\r\n        if (node.nodeType == 1) {\r\n            if (node.attributes) {\r\n                if (node.attributes.length >= 2)\r\n                    return false;\r\n                if (node.attributes.length == 1) {\r\n                    if (node.attributes[0].name == attr)\r\n                        return true;\r\n                    else\r\n                        return false;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 根据bool值转化成display\r\n     * @param bool true, false\r\n     */\r\n    HandelDom.prototype.boolToDisplay = function (bool) {\r\n        if (bool == 'true' || bool == true)\r\n            return 'block';\r\n        if (bool == 'false' || bool == false)\r\n            return 'none';\r\n    };\r\n    /**\r\n     * 获取节点除了某些属性外的其他属性\r\n     * @param node 节点\r\n     * @param attr 属性\r\n     */\r\n    HandelDom.prototype.expectSomeAttr = function (node, attr) {\r\n        var obj = {};\r\n        if (node.attributes && node.attributes.length) {\r\n            for (var i = 0, len = node.attributes; i < len.length; i++) {\r\n                if (len[i].name != attr) {\r\n                    obj[len[i].name] = len[i].value;\r\n                }\r\n            }\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * 添加注释节点\r\n     * @param str 注释内容\r\n     */\r\n    HandelDom.prototype.addComment = function (str) {\r\n        var dom = document.createComment(str);\r\n        return dom;\r\n    };\r\n    /**\r\n     * 替换注释节点\r\n     * @param node 父节点\r\n     * @param text 注释内容\r\n     * @param newNode 新的节点\r\n     */\r\n    HandelDom.prototype.replaceComment = function (node, text, newNode) {\r\n        var iterator = document.createNodeIterator(node, NodeFilter.SHOW_COMMENT, null, false);\r\n        var n = iterator.nextNode();\r\n        while (n) {\r\n            if (n.nodeValue == text) {\r\n                n.parentNode.replaceChild(newNode, n);\r\n            }\r\n            n = iterator.nextNode();\r\n        }\r\n    };\r\n    /**\r\n     * 更改节点属性\r\n     * @param str 节点\r\n     * @param key 属性名\r\n     * @param val 属性值\r\n     */\r\n    HandelDom.prototype.attr = function (str, key, val) {\r\n        var dom = this.q(str);\r\n        if (dom != undefined) {\r\n            if (arguments.length == 3) {\r\n                dom.setAttribute(key, val);\r\n            }\r\n            if (arguments.length == 2) {\r\n                return dom.getAttribute(key);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 返回节点的html\r\n     * @param str 节点标识\r\n     */\r\n    HandelDom.prototype.hasHtml = function (str) {\r\n        if (DOM.q(str)) {\r\n            return DOM.q(str).innerHTML;\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * 返回require,import 的html\r\n     * @param str 节点标识\r\n     */\r\n    HandelDom.prototype.hasHtmlUrl = function (str) {\r\n        return str;\r\n    };\r\n    /**\r\n     * head添加style\r\n     * @param res style所属类型\r\n     * @param component style所属组件\r\n     */\r\n    HandelDom.prototype.addStyle = function (res, component) {\r\n        if (component.name == undefined) {\r\n            $log.error('找不到组件的name属性，无法添加style样式');\r\n        }\r\n        if (res == undefined) {\r\n            return;\r\n        }\r\n        // 组件的标签名称\r\n        var tag = util_1.default._cameCase(component.name);\r\n        switch (res.type) {\r\n            case 'string':\r\n                this.appendStyle(res.result, tag);\r\n                break;\r\n            case 'id':\r\n                if (this.q(res.result) == undefined) {\r\n                    $log.error('名称为' + component.name + '组件中，节点' + res.result + '不存在');\r\n                }\r\n                var inner = this.q(res.result).innerHTML;\r\n                this.appendStyle(inner, tag);\r\n                break;\r\n            case 'url':\r\n                this.appendStyle(res.result, tag);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * 将样式表添加到head里面\r\n     * @param inner 样式表内容\r\n     * @param title style的title属性，也是组件tag标签\r\n     */\r\n    HandelDom.prototype.appendStyle = function (inner, title) {\r\n        var style = \"\" + inner;\r\n        style = util_1.default.trimStr(style);\r\n        var newStyle = document.createElement('style');\r\n        newStyle.type = 'text/css';\r\n        newStyle.title = title;\r\n        newStyle.innerHTML = style;\r\n        this.q('head').appendChild(newStyle);\r\n        // 给选择符设置前缀\r\n        this.addSelectorPrefix(title);\r\n    };\r\n    /**\r\n     * 给选择符设置前缀\r\n     * @param title style的title属性\r\n     */\r\n    HandelDom.prototype.addSelectorPrefix = function (title) {\r\n        var stylesheet = document.styleSheets;\r\n        for (var i = 0; i < stylesheet.length; i++) {\r\n            if (stylesheet[i].title == title) {\r\n                for (var j = 0, cr = stylesheet[i].cssRules; j < cr.length; j++) {\r\n                    cr[j].selectorText = title + ' ' + cr[j].selectorText;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 移除具有相同属性的节点，第item个除外\r\n     * @param item 索引\r\n     * @param selector 节点选择器\r\n     */\r\n    HandelDom.prototype.removeDomExpectWhich = function (item, selector) {\r\n        var nodes = document.querySelectorAll(selector);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            if (i != item) {\r\n                nodes[i].parentNode.removeChild(nodes[i]);\r\n            }\r\n        }\r\n    };\r\n    HandelDom.prototype.watch = function (node) {\r\n        // 观察dom数据变化\r\n        var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\r\n        var target = document.querySelector(node);\r\n        var observer = new MutationObserver(function (mu) {\r\n            // console.log(mu)\r\n        });\r\n        var config = { childList: true, attributes: true, characterData: true, subtree: true, attributeOldValue: true, characterDataOldValue: true };\r\n        observer.observe(target, config);\r\n    };\r\n    HandelDom.prototype.booleanAttr = function (node, nodeName) {\r\n    };\r\n    return HandelDom;\r\n}());\r\nvar DOM = new HandelDom();\r\nexports.default = DOM;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/dom/dom.ts\n// module id = 9\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\nvar parse_1 = require(\"../parse\");\r\nvar ParseTpl = /** @class */ (function () {\r\n    function ParseTpl(text, data, props) {\r\n        this.text = text;\r\n        this.data = data;\r\n        this.props = props;\r\n    }\r\n    /**\r\n     * 组合data和props属性\r\n     * @param data\r\n     * @param props\r\n     */\r\n    ParseTpl.prototype.combineData = function (data, props) {\r\n        if (data === void 0) { data = {}; }\r\n        if (props === void 0) { props = {}; }\r\n        if (util_1.default.type(data) != 'object')\r\n            $log.error('组件是属性data必须为对象');\r\n        if (util_1.default.type(props) != 'object')\r\n            $log.error('组件是属性props必须为对象');\r\n        if (util_1.default.isEmpty(props))\r\n            return data;\r\n        for (var i in props) {\r\n            data[i] = props[i].default;\r\n        }\r\n        return data;\r\n    };\r\n    // 渲染模板\r\n    ParseTpl.prototype.tpl = function () {\r\n        var self = this;\r\n        var index = 0, parts = [], startIndex, endIndex, exp, expFn;\r\n        if (this.text == undefined) {\r\n            return;\r\n        }\r\n        while (index < this.text.length) {\r\n            startIndex = this.text.indexOf('{{', index);\r\n            if (startIndex != -1) {\r\n                endIndex = this.text.indexOf('}}', startIndex + 2);\r\n            }\r\n            if (startIndex != -1 && endIndex != -1) {\r\n                if (startIndex != index) {\r\n                    parts.push(this.text.substring(index, startIndex));\r\n                }\r\n                exp = this.text.substring(startIndex + 2, endIndex);\r\n                expFn = parse_1.default.parse(exp);\r\n                parts.push(expFn);\r\n                index = endIndex + 2;\r\n            }\r\n            else {\r\n                parts.push(this.text.substring(index));\r\n                break;\r\n            }\r\n        }\r\n        // console.log(parts)\r\n        return parts.reduce(function (prev, cur) {\r\n            if (util_1.default.type(cur) == 'function') {\r\n                return prev + self.expectNullUndefined(cur(self.combineData(self.data, self.props)));\r\n            }\r\n            else {\r\n                return prev + cur;\r\n            }\r\n        }, '');\r\n    };\r\n    /**\r\n     * 判断表达式是否为null或者undefined，是则返回''\r\n     * @param str\r\n     */\r\n    ParseTpl.prototype.expectNullUndefined = function (str) {\r\n        if (util_1.default.type(str) == 'null' || util_1.default.type(str) == 'undefined') {\r\n            return '';\r\n        }\r\n        else if (typeof str == 'object') {\r\n            return JSON.stringify(str);\r\n        }\r\n        else {\r\n            return '' + str;\r\n        }\r\n    };\r\n    return ParseTpl;\r\n}());\r\nfunction tpl(text, data, props) {\r\n    var parseTpl = new ParseTpl(text, data, props);\r\n    return parseTpl.tpl();\r\n}\r\nexports.default = tpl;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/parseTpl.ts\n// module id = 10\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lexer_1 = require(\"./lexer\");\r\nvar parser_1 = require(\"./parser\");\r\nvar pipe_1 = require(\"../pipe/pipe\");\r\nvar ps = new pipe_1.default();\r\nvar util_1 = require(\"../util\");\r\nvar Parse = /** @class */ (function () {\r\n    function Parse() {\r\n        this.pipes = ps.pipes;\r\n    }\r\n    /**\r\n     * 注册管道\r\n     * @param name\r\n     * @param factory\r\n     */\r\n    Parse.prototype.register = function (name, factory) {\r\n        ps.register(name, factory);\r\n        return this;\r\n    };\r\n    Parse.prototype.pipe = function (name) {\r\n        return ps.pipe(name);\r\n    };\r\n    /**\r\n     * 词法解析\r\n     * @param str\r\n     */\r\n    Parse.prototype.parse = function (str) {\r\n        var that = this;\r\n        function parse(expression, pipes) {\r\n            switch (util_1.default.type(expression)) {\r\n                case 'string':\r\n                    var lexer = new lexer_1.default();\r\n                    var parser = new parser_1.default(lexer, pipes);\r\n                    var oneTime = false;\r\n                    //单次检测\r\n                    if (expression.charAt(0) == ':' && expression.charAt(1) == ':') {\r\n                        oneTime = true;\r\n                        expression = expression.substring(2);\r\n                    }\r\n                    var parseFn = parser.parse(expression);\r\n                    if (parseFn.constant) { //常量\r\n                        parseFn.$$handelWatch = that.constantHandelWatch;\r\n                    }\r\n                    if (oneTime) { //单次检测\r\n                        parseFn.$$handelWatch = parseFn.literal ? that.oneTimeLiteralHandelWatch : that.oneTimeHandelWatch;\r\n                    }\r\n                    if (parseFn.inputs) {\r\n                        parseFn.$$handelWatch = that.inputsHandelWatch;\r\n                    }\r\n                    return parseFn;\r\n                case 'function':\r\n                    return expression;\r\n            }\r\n        }\r\n        return parse(str, this.pipes);\r\n    };\r\n    /**\r\n     * 处理参数为常量的状况\r\n     * @param state\r\n     * @param listenerFn\r\n     * @param valueEq\r\n     * @param watchFn\r\n     */\r\n    Parse.prototype.constantHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n        var cancel = state.$watch(function () {\r\n            return watchFn(state);\r\n        }, function (newVal, oldVal, state) {\r\n            if (util_1.default.type(listenerFn) == 'function') {\r\n                listenerFn.apply(this, arguments);\r\n            }\r\n        }, valueEq);\r\n        return cancel;\r\n    };\r\n    /**\r\n     * 处理单次检测问题\r\n     * @param state\r\n     * @param listenerFn\r\n     * @param valueEq\r\n     * @param watchFn\r\n     */\r\n    Parse.prototype.oneTimeHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n        var lastVal;\r\n        var cancel = state.$watch(function () {\r\n            return watchFn(state);\r\n        }, function (newVal, oldVal, state) {\r\n            lastVal = newVal;\r\n            if (util_1.default.type(listenerFn) == 'function') {\r\n                listenerFn.apply(this, arguments);\r\n            }\r\n            if (util_1.default.type(newVal) != 'undefined') {\r\n                state.$afterDigest(function () {\r\n                    if (util_1.default.type(lastVal) != 'undefined') {\r\n                        cancel();\r\n                    }\r\n                });\r\n            }\r\n        }, valueEq);\r\n        return cancel;\r\n    };\r\n    /**\r\n     * 处理数组或对象的变量问题\r\n     * @param state\r\n     * @param listenerFn\r\n     * @param valueEq\r\n     * @param watchFn\r\n     */\r\n    Parse.prototype.oneTimeLiteralHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n        var lastVal;\r\n        var cancel = state.$watch(function () {\r\n            return watchFn(state);\r\n        }, function (newVal, oldVal, state) {\r\n            lastVal = newVal;\r\n            if (util_1.default.type(listenerFn) == 'function') {\r\n                listenerFn.apply(this, arguments);\r\n            }\r\n            if (util_1.default.type(newVal) != 'undefined') {\r\n                state.$afterDigest(function () {\r\n                    if (util_1.default.type(lastVal) != 'undefined') {\r\n                        cancel();\r\n                    }\r\n                });\r\n            }\r\n        }, valueEq);\r\n        return cancel;\r\n    };\r\n    Parse.prototype.inputsHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n        var inputExpr = watchFn.inputs;\r\n        return state.$watch(function () {\r\n        }, listenerFn, valueEq);\r\n    };\r\n    return Parse;\r\n}());\r\nvar parse = new Parse();\r\nexports.default = parse;\r\n// 默认管道函数--开始\r\nvar newParse = new Parse();\r\nnewParse.register('filter', defaultFilter);\r\nfunction defaultFilter() {\r\n    return function (array, filterExp) {\r\n        var predicateFn;\r\n        switch (util_1.default.type(filterExp)) {\r\n            case 'function':\r\n                predicateFn = filterExp;\r\n                break;\r\n            case 'string':\r\n            case 'number':\r\n            case 'boolean':\r\n            case 'null':\r\n            case 'undefined':\r\n            case 'object':\r\n                predicateFn = createPredicateFn(filterExp);\r\n                break;\r\n            default:\r\n                return array;\r\n        }\r\n        return array.filter(predicateFn);\r\n    };\r\n}\r\n// 如果pipe后面非函数表达式就生成一个\r\nfunction createPredicateFn(exp) {\r\n    // item指数组元素\r\n    return function predicateFn(item) {\r\n        return deepCompareValues(item, exp, compareValues);\r\n    };\r\n}\r\n// source值数组的元素，target值pipe表达式冒号后面的字符，pipe:\"a\"\r\nfunction compareValues(source, target) {\r\n    if (util_1.default.type(source) == 'null' || util_1.default.type(target) == 'null') {\r\n        return source === target;\r\n    }\r\n    // 不对undefined处理\r\n    if (util_1.default.type(source) == 'undefined')\r\n        return false;\r\n    source = ('' + source).toLowerCase();\r\n    target = ('' + target).toLowerCase();\r\n    return source.includes(target);\r\n}\r\n// 如果数组元素是对象进行深度比较\r\nfunction deepCompareValues(source, target, compare) {\r\n    if (util_1.default.type(target) == 'string' && target.startsWith('!')) {\r\n        return !deepCompareValues(source, target.substring(1), compare);\r\n    }\r\n    if (util_1.default.type(source) == 'object') {\r\n        if (util_1.default.type(target) == 'object') {\r\n            for (var i in target) {\r\n                return deepCompareValues(source[i], target[i], compare);\r\n            }\r\n        }\r\n        var arr = util_1.default.objVal(source);\r\n        return arr.some(function (val) {\r\n            return deepCompareValues(val, target, compare);\r\n        });\r\n    }\r\n    return compare(source, target);\r\n}\r\n// 注册管道函数--结束\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/parse/index.ts\n// module id = 11\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\nvar lexer_config_1 = require(\"../config/lexer_config\");\r\n/**\r\n * 此法解析器，用于解析{{a + b}} 之类的插值运算\r\n */\r\nvar Lexer = /** @class */ (function () {\r\n    function Lexer() {\r\n        this.index = 0;\r\n        this.now = undefined;\r\n        this.tokens = [];\r\n        this.text = '';\r\n    }\r\n    /**\r\n     * 词法解析函数\r\n     * @param text\r\n     * @returns {Array<any>}\r\n     */\r\n    Lexer.prototype.lex = function (text) {\r\n        this.text = text;\r\n        while (this.index < this.text.length) {\r\n            this.now = this.text.charAt(this.index);\r\n            if (util_1.default.whichType(this.now) == 'number' ||\r\n                (this.now === '.' && util_1.default.whichType(util_1.default.nextLeter(this.index, this.text)))) {\r\n                this.loopNumber();\r\n            }\r\n            else if (util_1.default.whichType(this.now) == 'string') {\r\n                this.loopString(this.now);\r\n            }\r\n            else if (util_1.default.whichType(this.now) == 'letter') {\r\n                this.loopLetter();\r\n            }\r\n            else if (util_1.default.isWhiteSpace(this.now)) {\r\n                this.index++;\r\n            }\r\n            else if (util_1.default.inStr(this.now, '[],{}.:()?;')) {\r\n                this.pushObj();\r\n            }\r\n            else {\r\n                this.loopOperator();\r\n            }\r\n        }\r\n        return this.tokens;\r\n    };\r\n    /**\r\n     * 添加词法解析对象\r\n     */\r\n    Lexer.prototype.pushObj = function () {\r\n        this.tokens.push({\r\n            text: this.now,\r\n            value: this.now\r\n        });\r\n        this.index++;\r\n    };\r\n    /**\r\n     * 获取下一个字符\r\n     * @param n\r\n     * @returns {string|boolean}\r\n     */\r\n    Lexer.prototype.nextStr = function (n) {\r\n        if (n === void 0) { n = 1; }\r\n        return (this.index + n < this.text.length) ?\r\n            this.text.charAt(this.index + n) :\r\n            false;\r\n    };\r\n    /**\r\n     * 遍历数字类\r\n     */\r\n    Lexer.prototype.loopNumber = function () {\r\n        var number = '';\r\n        while (this.index < this.text.length) {\r\n            var now = this.text.charAt(this.index).toLowerCase();\r\n            if (util_1.default.whichType(now) == 'number' || now === '.') {\r\n                number += now;\r\n            }\r\n            else {\r\n                var next = util_1.default.nextLeter(this.index, this.text);\r\n                var prev = number.charAt(number.length - 1);\r\n                if (now == 'e' && util_1.default.isExponent(next)) {\r\n                    number += now;\r\n                }\r\n                else if (util_1.default.isExponent(now) && prev === 'e' && next && util_1.default.isNumber(next)) {\r\n                    number += now;\r\n                }\r\n                else if (util_1.default.isExponent(now) && prev === 'e' && (!next || !util_1.default.isNumber(next))) {\r\n                    $log.error(\"指数格式错误！\");\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            this.index++;\r\n        }\r\n        this.tokens.push({\r\n            text: number,\r\n            value: Number(number)\r\n        });\r\n    };\r\n    /**\r\n     * 遍历字符串类，'\"abc\"'\r\n     */\r\n    Lexer.prototype.loopString = function (quote) {\r\n        this.index++;\r\n        var string = '', \r\n        //避免单独的操作符匹配错误，例如'\"!\"'\r\n        raw = quote;\r\n        while (this.index < this.text.length) {\r\n            var now = this.text.charAt(this.index);\r\n            raw += now;\r\n            if (now == quote) { //保证首位字符相同\r\n                this.index++;\r\n                this.tokens.push({\r\n                    text: raw,\r\n                    value: string\r\n                });\r\n                return;\r\n            }\r\n            else if (now == lexer_config_1.SPECIALS[now]) { //匹配特殊字符\r\n                string += lexer_config_1.SPECIALS[now];\r\n            }\r\n            else {\r\n                string += now;\r\n            }\r\n            this.index++;\r\n        }\r\n        $log.error('无法匹配的符号');\r\n    };\r\n    /**\r\n     * 字符类, 'abc_$'\r\n     */\r\n    Lexer.prototype.loopLetter = function () {\r\n        var letter = '';\r\n        while (this.index < this.text.length) {\r\n            var now = this.text.charAt(this.index);\r\n            if (util_1.default.isLetter(now) || util_1.default.isNumber(now)) {\r\n                letter += now;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            this.index++;\r\n        }\r\n        // 针对boolean,null,undefined\r\n        var v = lexer_config_1.LETTER.hasOwnProperty(letter) ? lexer_config_1.LETTER[letter] : letter;\r\n        this.tokens.push({\r\n            text: letter,\r\n            identifier: true,\r\n            value: v\r\n        });\r\n    };\r\n    /**\r\n     * 操作符，+- ！==\r\n     */\r\n    Lexer.prototype.loopOperator = function () {\r\n        var str = this.now, str2 = this.now + this.nextStr(1), str3 = this.now + this.nextStr(1) + this.nextStr(2), op = lexer_config_1.OPERATORS[str], op2 = lexer_config_1.OPERATORS[str2], op3 = lexer_config_1.OPERATORS[str3];\r\n        if (op || op2 || op3) {\r\n            var ct = op3 ? str3 : (op2 ? str2 : str);\r\n            this.tokens.push({\r\n                text: ct,\r\n                value: ct\r\n            });\r\n            this.index += ct.length;\r\n        }\r\n        else {\r\n            $log.error('未识别的字符' + this.now);\r\n        }\r\n    };\r\n    return Lexer;\r\n}());\r\nexports.default = Lexer;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/parse/lexer.ts\n// module id = 12\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// js特殊字符\r\nvar SPECIALS = {\r\n    '\\'': '\\'',\r\n    '\\\"': '\\\"',\r\n    '&': '\\&',\r\n    '\\\\': '\\\\',\r\n    'n': '\\n',\r\n    'r': '\\r',\r\n    't': '\\t',\r\n    'b': '\\b',\r\n    'f': '\\f',\r\n};\r\nexports.SPECIALS = SPECIALS;\r\n//词法解析中关于字符的配置对象\r\nvar LETTER = {\r\n    'null': null,\r\n    'true': true,\r\n    'false': false,\r\n    'undefined': undefined,\r\n    'this': undefined\r\n};\r\nexports.LETTER = LETTER;\r\n//运算符\r\nvar OPERATORS = {\r\n    '+': true,\r\n    '!': true,\r\n    '-': true,\r\n    '*': true,\r\n    '%': true,\r\n    '/': true,\r\n    '=': true,\r\n    '>': true,\r\n    '<': true,\r\n    '>=': true,\r\n    '<=': true,\r\n    '==': true,\r\n    '===': true,\r\n    '!=': true,\r\n    '!==': true,\r\n    '&&': true,\r\n    '||': true,\r\n    '|': true\r\n};\r\nexports.OPERATORS = OPERATORS;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/config/lexer_config.ts\n// module id = 13\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar astBuilder_1 = require(\"./astBuilder\");\r\nvar astCompile_1 = require(\"./astCompile\");\r\nvar Parser = /** @class */ (function () {\r\n    function Parser(lexer, pipes) {\r\n        this.lexer = lexer;\r\n        this.astBuilder = new astBuilder_1.default(this.lexer);\r\n        this.astCompile = new astCompile_1.default(this.astBuilder, pipes);\r\n    }\r\n    Parser.prototype.parse = function (text) {\r\n        return this.astCompile.compile(text);\r\n    };\r\n    return Parser;\r\n}());\r\nexports.default = Parser;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/parse/parser.ts\n// module id = 14\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AST = require(\"../config/ast_config\");\r\nvar LEXER = require(\"../config/lexer_config\");\r\nvar util_1 = require(\"../util\");\r\n/**\r\n * 抽象语法结构树\r\n [{ type: 'ASTBuilder.Program',\r\n  body:\r\n   { type: 'ASTBuilder.Binary',\r\n     boolean_expression:\r\n      { type: 'ASTBuilder.Binary',\r\n        operator: '>',\r\n        left: { type: 'ASTBuilder.Identifier', value: 'a' },\r\n        right: { type: 'ASTBuilder.MetaData', value: 2 } },\r\n     true_value: { type: 'ASTBuilder.MetaData', value: 1 },\r\n     error_value: { type: 'ASTBuilder.MetaData', value: 0 } } }]\r\n */\r\nvar ASTBuilder = /** @class */ (function () {\r\n    function ASTBuilder(lexer) {\r\n        this.lexer = lexer;\r\n        this.tokens = [];\r\n    }\r\n    /**\r\n     * 生成抽象语法结构树\r\n     * @param text\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.ast = function (text) {\r\n        this.tokens = this.lexer.lex(text);\r\n        return this.init();\r\n    };\r\n    /**\r\n     * 结构树形式, ';'看作是多个表达式的组合，故词法树的body有对象进化为对象数组Array<object>\r\n     * @returns {{type: string, body: {}}}\r\n     */\r\n    ASTBuilder.prototype.init = function () {\r\n        var body = [];\r\n        while (true) {\r\n            if (this.tokens.length) {\r\n                body.push(this.pipeBuilder());\r\n            }\r\n            if (!util_1.default.expect(this.tokens, ';')) {\r\n                AST.ast_init['body'] = {};\r\n                AST.ast_init['body'] = body;\r\n                return util_1.default.clone(AST.ast_init);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 中介函数\r\n     * @returns {any}\r\n     */\r\n    ASTBuilder.prototype.agency = function () {\r\n        var agency;\r\n        if (util_1.default.expect(this.tokens, '(')) {\r\n            agency = this.pipeBuilder();\r\n            util_1.default.consume(this.tokens, ')');\r\n        }\r\n        else if (util_1.default.expect(this.tokens, '[')) {\r\n            agency = this.arrayBuilder();\r\n        }\r\n        else if (util_1.default.expect(this.tokens, '{')) {\r\n            agency = this.objectBuilder();\r\n        }\r\n        //处理boolean,null,this\r\n        else if (LEXER.LETTER.hasOwnProperty(this.tokens[0]['text'])) {\r\n            if (this.tokens[0]['text'] == \"this\") {\r\n                agency = util_1.default.clone(AST.ast_this);\r\n            }\r\n            else {\r\n                AST.ast_constant['value'] = LEXER.LETTER[util_1.default.consume(this.tokens)['text']];\r\n                agency = util_1.default.clone(AST.ast_constant);\r\n            }\r\n        }\r\n        //处理标识符\r\n        else if (util_1.default.exitFirst(this.tokens).identifier) {\r\n            agency = this.identifierBuilder();\r\n        }\r\n        //处理常量\r\n        else {\r\n            agency = this.constantBuilder();\r\n        }\r\n        /**\r\n         * 处理带有 '.', '[' 的标识符\r\n         * 结构树：{\"type\":\"ASTBuilder.Member\",\"object\":{\"type\":\"ASTBuilder.Member\",\"object\":{\"type\":\"ASTBuilder.Identifier\",\"value\":\"a\"},\"property\":{\"type\":\"ASTBuilder.Identifier\",\"value\":\"b\"}},\"property\":{\"type\":\"ASTBuilder.Identifier\",\"value\":\"c\"}}\r\n         */\r\n        var type;\r\n        while (type = util_1.default.expect(this.tokens, '.', '[', '(')) {\r\n            agency = this.memberBuilder(type, agency);\r\n        }\r\n        // console.log(JSON.stringify(agency));\r\n        return agency;\r\n    };\r\n    /**\r\n     * 遍历'[]','{}','()'等对称标识符\r\n     */\r\n    ASTBuilder.prototype.closingTags = function (quote) {\r\n        var arr = [], that = this;\r\n        if (!util_1.default.exitFirst(this.tokens, quote)) {\r\n            do {\r\n                if (util_1.default.exitFirst(this.tokens, quote))\r\n                    break;\r\n                arr.push(that.agency());\r\n            } while (util_1.default.expect(this.tokens, ','));\r\n        }\r\n        util_1.default.consume(this.tokens, quote);\r\n        return arr;\r\n    };\r\n    /**\r\n     * 结构树的常量部分\r\n     * @returns {{type: string, value: {}}}\r\n     */\r\n    ASTBuilder.prototype.constantBuilder = function () {\r\n        AST.ast_constant['value'] = util_1.default.consume(this.tokens)['value'];\r\n        return util_1.default.clone(AST.ast_constant);\r\n    };\r\n    /**\r\n    * 结构树的标识符部分\r\n    * @returns {{type: string, value: {}}}\r\n    */\r\n    ASTBuilder.prototype.identifierBuilder = function () {\r\n        AST.ast_identifier['value'] = util_1.default.consume(this.tokens)['value'];\r\n        return util_1.default.clone(AST.ast_identifier);\r\n    };\r\n    /**\r\n     * 结构树的数组部分\r\n     * @returns {{type: string, value: {}}}\r\n     */\r\n    ASTBuilder.prototype.arrayBuilder = function () {\r\n        AST.ast_array['value'] = this.closingTags(']');\r\n        return util_1.default.clone(AST.ast_array);\r\n    };\r\n    /**\r\n     * 结构树的对象部分\r\n     * @returns {{type: string, value: {}}}\r\n     */\r\n    ASTBuilder.prototype.objectBuilder = function () {\r\n        var arr = [];\r\n        if (!util_1.default.exitFirst(this.tokens, '}')) {\r\n            do {\r\n                AST.ast_json['key'] = this.constantBuilder();\r\n                util_1.default.consume(this.tokens, ':');\r\n                AST.ast_json['value'] = this.assignmentBuilder();\r\n                arr.push(util_1.default.clone(AST.ast_json));\r\n            } while (util_1.default.expect(this.tokens, ','));\r\n        }\r\n        util_1.default.consume(this.tokens, '}');\r\n        AST.ast_object['value'] = arr;\r\n        return util_1.default.clone(AST.ast_object);\r\n    };\r\n    /**\r\n     * 结构树的对象取值部分，a.b  a[\"b\"]，a() 等\r\n     * @param type\r\n     * @param agency\r\n     * @returns {{type: string, value: {}}}\r\n     */\r\n    ASTBuilder.prototype.memberBuilder = function (type, agency) {\r\n        if (type.text === '[') {\r\n            agency = {\r\n                type: AST.dataType['7'],\r\n                object: agency,\r\n                property: this.agency(),\r\n                computed: true\r\n            };\r\n            util_1.default.consume(this.tokens, ']');\r\n        }\r\n        if (type.text === '.') {\r\n            agency = {\r\n                type: AST.dataType['7'],\r\n                object: agency,\r\n                property: this.identifierBuilder(),\r\n                computed: false\r\n            };\r\n        }\r\n        if (type.text === '(') {\r\n            agency = {\r\n                type: AST.ast_function['type'],\r\n                callee: agency,\r\n                arguments: this.closingTags(')'),\r\n                pipe: false\r\n            };\r\n        }\r\n        return agency;\r\n    };\r\n    /**\r\n     * 含有‘=’等符号\r\n     * @returns {any}\r\n     */\r\n    ASTBuilder.prototype.assignmentBuilder = function () {\r\n        var left = this.ternaryBuilder();\r\n        if (util_1.default.expect(this.tokens, '=')) {\r\n            var right = this.ternaryBuilder();\r\n            AST.ast_assignment['left'] = left;\r\n            AST.ast_assignment['right'] = right;\r\n            return util_1.default.clone(AST.ast_assignment);\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * 一元运算符\r\n     * @returns {any}\r\n     */\r\n    ASTBuilder.prototype.unaryBuilder = function () {\r\n        var ue = util_1.default.expect(this.tokens, '+', '!', '-');\r\n        if (ue) {\r\n            AST.ast_unary['operator'] = ue.text;\r\n            AST.ast_unary['value'] = this.unaryBuilder();\r\n            return util_1.default.clone(AST.ast_unary);\r\n        }\r\n        if (!ue)\r\n            return this.agency();\r\n    };\r\n    /**\r\n     *乘法运算\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.multiplicativeBuilder = function () {\r\n        var left = this.unaryBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '*', '%', '/')) {\r\n            AST.ast_binary['operator'] = ue.text;\r\n            AST.ast_binary['left'] = left;\r\n            AST.ast_binary['right'] = this.unaryBuilder();\r\n            left = util_1.default.clone(AST.ast_binary);\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * 加法运算\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.additiveBuilder = function () {\r\n        var left = this.multiplicativeBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '+', '-')) {\r\n            left = {\r\n                type: AST.ast_binary['type'],\r\n                operator: ue.text,\r\n                left: left,\r\n                right: this.multiplicativeBuilder()\r\n            };\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * 关系运算符，‘>’\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.relationalBuilder = function () {\r\n        var left = this.additiveBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '>', '<', '>=', '<=')) {\r\n            left = {\r\n                type: AST.ast_binary['type'],\r\n                operator: ue.text,\r\n                left: left,\r\n                right: this.additiveBuilder()\r\n            };\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * 等法运算符，‘==’\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.equalityBuilder = function () {\r\n        var left = this.relationalBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '==', '===', '!=', '!==')) {\r\n            left = {\r\n                type: AST.ast_binary['type'],\r\n                operator: ue.text,\r\n                left: left,\r\n                right: this.relationalBuilder()\r\n            };\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * && 运算符， &&高于||\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.andBuilder = function () {\r\n        var left = this.equalityBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '&&')) {\r\n            left = {\r\n                type: AST.ast_logical['type'],\r\n                operator: ue.text,\r\n                left: left,\r\n                right: this.equalityBuilder()\r\n            };\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * || 运算符， &&高于||\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.orBuilder = function () {\r\n        var left = this.andBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '||')) {\r\n            left = {\r\n                type: AST.ast_logical['type'],\r\n                operator: ue.text,\r\n                left: left,\r\n                right: this.andBuilder()\r\n            };\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * 三元运算符\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.ternaryBuilder = function () {\r\n        var boolean_expression = this.orBuilder();\r\n        if (util_1.default.expect(this.tokens, '?')) {\r\n            var true_value = this.assignmentBuilder();\r\n            if (util_1.default.consume(this.tokens, ':')) {\r\n                var error_value = this.assignmentBuilder();\r\n                return {\r\n                    type: AST.ast_teranry['type'],\r\n                    boolean_expression: boolean_expression,\r\n                    true_value: true_value,\r\n                    error_value: error_value\r\n                };\r\n            }\r\n        }\r\n        return boolean_expression;\r\n    };\r\n    /**\r\n     * 管道处理\r\n     */\r\n    ASTBuilder.prototype.pipeBuilder = function () {\r\n        var pipes = this.assignmentBuilder();\r\n        while (util_1.default.expect(this.tokens, '|')) {\r\n            var args = [pipes];\r\n            pipes = {\r\n                type: AST.ast_function['type'],\r\n                callee: this.identifierBuilder(),\r\n                arguments: args,\r\n                pipe: true\r\n            };\r\n            while (util_1.default.expect(this.tokens, ':')) {\r\n                args.push(this.assignmentBuilder());\r\n            }\r\n        }\r\n        return pipes;\r\n    };\r\n    return ASTBuilder;\r\n}());\r\nexports.default = ASTBuilder;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/parse/astBuilder.ts\n// module id = 15\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//数据类型\r\nexports.dataType = {\r\n    '1': 'ASTBuilder.Init',\r\n    '2': 'ASTBuilder.MetaData',\r\n    '3': 'ASTBuilder.Array',\r\n    '4': 'ASTBuilder.Object',\r\n    '5': 'ASTBuilder.Identifier',\r\n    '6': 'ASTBuilder.This',\r\n    '7': 'ASTBuilder.Member',\r\n    '8': 'ASTBuilder.Function',\r\n    '9': 'ASTBuilder.Assignment',\r\n    '10': 'ASTBuilder.Unary',\r\n    '11': 'ASTBuilder.Binary',\r\n    '12': 'ASTBuilder.Logical',\r\n    '13': 'ASTBuilder.Teranry'\r\n};\r\n// astBuilder的词法解析匹配模式\r\nexports.ast_init = {\r\n    type: exports.dataType['1'],\r\n    body: {}\r\n};\r\n//常量\r\nexports.ast_constant = {\r\n    type: exports.dataType['2'],\r\n    value: undefined\r\n};\r\n//数组\r\nexports.ast_array = {\r\n    type: exports.dataType['3'],\r\n    value: undefined\r\n};\r\n/**\r\n * 对象\r\n * {\"type\":\"ASTBuilder.Object\",\"value\":[{\"type\":\"ASTBuilder.Identifier\",\"key\":{\"type\":\"ASTBuilder.MetaData\",\"value\":\"id\"},\"value\":{\"type\"\r\n:\"ASTBuilder.MetaData\",\"value\":1}}]}\r\n */\r\nexports.ast_object = {\r\n    type: exports.dataType['4'],\r\n    value: undefined //数组，指向ast_json\r\n};\r\nexports.ast_json = {\r\n    type: exports.dataType['5'],\r\n    key: undefined,\r\n    value: undefined\r\n};\r\n// 标识符\r\nexports.ast_identifier = {\r\n    type: exports.dataType['5'],\r\n    value: undefined\r\n};\r\n// this\r\nexports.ast_this = {\r\n    type: exports.dataType['6']\r\n};\r\n// 对象属性表达式，a.b a['b']\r\nexports.ast_member = {\r\n    type: exports.dataType['7'],\r\n    object: undefined,\r\n    property: undefined,\r\n    computed: undefined\r\n};\r\n// 函数表达式\r\nexports.ast_function = {\r\n    type: exports.dataType['8'],\r\n    callee: undefined,\r\n    arguments: undefined,\r\n    pipe: Boolean\r\n};\r\n// 赋值表达式\r\nexports.ast_assignment = {\r\n    type: exports.dataType['9'],\r\n    left: undefined,\r\n    right: undefined\r\n};\r\n// 一元运算符\r\nexports.ast_unary = {\r\n    type: exports.dataType['10'],\r\n    operator: '+',\r\n    value: undefined\r\n};\r\n// 二元运算符\r\nexports.ast_binary = {\r\n    type: exports.dataType['11'],\r\n    left: undefined,\r\n    operator: undefined,\r\n    right: undefined\r\n};\r\n// 逻辑运算符\r\nexports.ast_logical = {\r\n    type: exports.dataType['12'],\r\n    left: undefined,\r\n    operator: undefined,\r\n    right: undefined\r\n};\r\n// 三元运算符\r\nexports.ast_teranry = {\r\n    type: exports.dataType['13'],\r\n    boolean_expression: undefined,\r\n    true_value: undefined,\r\n    error_value: undefined\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/config/ast_config.ts\n// module id = 16\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ast_config_1 = require(\"../config/ast_config\");\r\nvar $log = require(\"../log\");\r\nvar K = require(\"../config/unSafeStr\");\r\nvar util_1 = require(\"../util\");\r\nvar ps = {}; //管道集合\r\nvar ASTCompile = /** @class */ (function () {\r\n    function ASTCompile(astBuilder, pipes) {\r\n        this.astBuilder = astBuilder;\r\n        this.state = {\r\n            body: [],\r\n            compileId: 0,\r\n            echo: [],\r\n            pipes: {} //管道过滤器\r\n        };\r\n        this.ast = {};\r\n        ps = pipes;\r\n    }\r\n    /**\r\n     * 词法树的最终解析执行函数\r\n     * @param text\r\n     * @returns {Function}\r\n     */\r\n    ASTCompile.prototype.compile = function (text) {\r\n        this.ast = this.astBuilder.ast(text);\r\n        this.handelTree(this.ast);\r\n        this.constantExpr(this.ast);\r\n        var fn = this.pipePrefix() + 'var fn = function(scope, local){'\r\n            + (this.state.echo.length ? 'var ' + this.state.echo.join(',') + ';' : '')\r\n            + this.state.body.join('') + '}; return fn;';\r\n        var fns = new Function('safeProperty', 'safeObject', 'safeFunction', 'isUndefined', 'pipe', fn)(safeProperty, safeObject, safeFunction, isUndefined, pipe);\r\n        fns.literal = this.isLiteral(); // 定义字面量\r\n        fns.constant = this.ast.constant; // 定义常亮\r\n        return fns;\r\n    };\r\n    /**\r\n     * 递归解析词法树\r\n     * @param ast 词法结构树\r\n     * @param context 针对函数的上下文\r\n     * @param createNewElement 布尔值，如果属性不存在就动态创建一个\r\n     * @returns {any}\r\n     */\r\n    ASTCompile.prototype.handelTree = function (ast, context, createNewElement) {\r\n        if (context === void 0) { context = { context: undefined, name: undefined, computed: undefined }; }\r\n        switch (ast.type) {\r\n            case ast_config_1.dataType['1']: //'ASTBuilder.Init'\r\n                this.initCompile(ast);\r\n                break;\r\n            case ast_config_1.dataType['2']: //'ASTBuilder.MetaData'\r\n                return this.metaCompile(ast);\r\n            case ast_config_1.dataType['3']: //'ASTBuilder.Array'\r\n                return this.arrayCompile(ast);\r\n            case ast_config_1.dataType['4']: //'ASTBuilder.Object'\r\n                return this.objectCompile(ast);\r\n            case ast_config_1.dataType['5']: //'ASTBuilder.Identifier'\r\n                return this.identifierCompile(ast, context, createNewElement);\r\n            case ast_config_1.dataType['6']: //'ASTBuilder.This'\r\n                return this.thisCompile();\r\n            case ast_config_1.dataType['7']: //'ASTBuilder.Member'\r\n                return this.memberCompile(ast, context, createNewElement);\r\n            case ast_config_1.dataType['8']: //'ASTBuilder.Function'\r\n                return this.functionCompile(ast);\r\n            case ast_config_1.dataType['9']: //'ASTBuilder.Assignment'\r\n                return this.assigmentCompile(ast);\r\n            case ast_config_1.dataType['10']: //'ASTBuilder.Unary'\r\n                return this.unaryCompile(ast);\r\n            case ast_config_1.dataType['11']: //'ASTBuilder.Binary'\r\n                return this.binaryCompile(ast);\r\n            case ast_config_1.dataType['12']: //'ASTBuilder.Logical'\r\n                return this.logicalCompile(ast);\r\n            case ast_config_1.dataType['13']: //'ASTBuilder.Ternary'\r\n                return this.ternaryCompile(ast);\r\n        }\r\n    };\r\n    /**\r\n     * 初始化词法编译器\r\n     * @param ast\r\n     */\r\n    ASTCompile.prototype.initCompile = function (ast) {\r\n        var _this = this;\r\n        var arr = util_1.default.clone(ast.body);\r\n        var last = arr.pop();\r\n        arr.forEach(function (val) {\r\n            _this.state.body.push(_this.handelTree(val));\r\n        });\r\n        this.state.body.push('return ', this.handelTree(last), ';');\r\n    };\r\n    /**\r\n     * 基础类数据编译\r\n     * @param ast\r\n     * @returns {any}\r\n     */\r\n    ASTCompile.prototype.metaCompile = function (ast) {\r\n        return util_1.default.wrapString(ast.value);\r\n    };\r\n    /**\r\n     * 数组类词法树编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.arrayCompile = function (ast) {\r\n        var _this = this;\r\n        var arr = ast.value.map(function (val) {\r\n            return _this.handelTree(val);\r\n        });\r\n        return '[' + arr.join(',') + ']';\r\n    };\r\n    /**\r\n     * 对象类词法树编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.objectCompile = function (ast) {\r\n        var _this = this;\r\n        var arrJson = ast.value.map(function (val) {\r\n            var key = val['key']['value'];\r\n            var value = _this.handelTree(val['value']);\r\n            return key + ':' + value;\r\n        });\r\n        return '{' + arrJson.join(',') + '}';\r\n    };\r\n    /**\r\n     * 标识符词法树编译\r\n     * @param ast\r\n     * @param context\r\n     * @param createNewElement\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.identifierCompile = function (ast, context, createNewElement) {\r\n        //判断是否是安全的属性名\r\n        safeProperty(ast.value);\r\n        var id = this.incrementId();\r\n        // 存在本地属性local\r\n        util_1.default.conditionIsRight(this.state.body, util_1.default.hasProperty('local', ast.value), util_1.default.concatCode(id, util_1.default.nonComputedMember('local', ast.value)));\r\n        // 创建空对象\r\n        if (createNewElement) {\r\n            util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.hasProperty('local', ast.value)) + ' && scope && ' + util_1.default.notExist(util_1.default.hasProperty('scope', ast.value)), util_1.default.concatCode(util_1.default.nonComputedMember('scope', ast.value), '{}'));\r\n        }\r\n        //不存在本地属性，只有scope属性\r\n        util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.hasProperty('local', ast.value)) + ' && scope', util_1.default.concatCode(id, util_1.default.nonComputedMember('scope', ast.value)));\r\n        // 处理函数上下文\r\n        if (context) {\r\n            context.context = util_1.default.hasProperty('local', ast.value) + '?local:scope';\r\n            context.name = ast.value;\r\n            context.computed = false;\r\n        }\r\n        this.state.body.push('safeObject(' + id + ');');\r\n        return id;\r\n    };\r\n    /**\r\n     * 含有this的编译\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.thisCompile = function () {\r\n        return 'scope';\r\n    };\r\n    /**\r\n     * 对象属性操作类词法树编译，如a.b, a[\"b\"]\r\n     * @param ast\r\n     * @param context\r\n     * @param createNewElement\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.memberCompile = function (ast, context, createNewElement) {\r\n        var id = this.incrementId();\r\n        var noComp = this.handelTree(ast.object, undefined, true);\r\n        if (context) {\r\n            context.context = noComp;\r\n        }\r\n        if (ast.computed) { //a[\"b\"]\r\n            var comp = this.handelTree(ast.property);\r\n            this.state.body.push('safeProperty(' + comp + ');');\r\n            //处理空对象\r\n            if (createNewElement) {\r\n                util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.computedMember(noComp, comp)), util_1.default.concatCode(util_1.default.computedMember(noComp, comp), '{}'));\r\n            }\r\n            util_1.default.conditionIsRight(this.state.body, noComp, util_1.default.concatCode(id, 'safeObject(' + util_1.default.computedMember(noComp, comp) + ')'));\r\n            if (context) {\r\n                context.name = comp;\r\n                context.computed = true;\r\n            }\r\n        }\r\n        if (!ast.computed) { //a.b\r\n            safeProperty(ast.property.value);\r\n            if (createNewElement) {\r\n                util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.nonComputedMember(noComp, ast.property.value)), util_1.default.concatCode(util_1.default.nonComputedMember(noComp, ast.property.value), '{}'));\r\n            }\r\n            util_1.default.conditionIsRight(this.state.body, noComp, util_1.default.concatCode(id, 'safeObject(' + util_1.default.nonComputedMember(noComp, ast.property.value) + ')'));\r\n            if (context) {\r\n                context.name = ast.property.value;\r\n                context.computed = false;\r\n            }\r\n        }\r\n        return id;\r\n    };\r\n    /**\r\n     * 函数类词法树编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.functionCompile = function (ast) {\r\n        var _this = this;\r\n        var callContext, callee, args;\r\n        if (ast.pipe) {\r\n            callee = this.pipeCompile(ast.callee.value);\r\n            args = ast.arguments.map(function (val) {\r\n                return _this.handelTree(val);\r\n            });\r\n            return callee + '(' + args.join(',') + ')';\r\n        }\r\n        if (!ast.pipe) {\r\n            callContext = { context: undefined, name: undefined, computed: undefined };\r\n            callee = this.handelTree(ast.callee, callContext);\r\n            args = ast.arguments.map(function (val) {\r\n                return 'safeObject(' + _this.handelTree(val) + ')'; //检测函数参数是否安全\r\n            });\r\n            // console.log(callContext);\r\n            if (callContext.name) {\r\n                this.state.body.push('safeObject(' + callContext.context + ');');\r\n                if (callContext.computed) {\r\n                    callee = util_1.default.computedMember(callContext.context, callContext.name);\r\n                }\r\n                else {\r\n                    callee = util_1.default.nonComputedMember(callContext.context, callContext.name);\r\n                }\r\n            }\r\n            //检测函数是否安全\r\n            this.state.body.push('safeFunction(' + callee + ');');\r\n            //safeObject 检测函数返回值是否安全\r\n            return callee + ' && safeObject(' + callee + '(' + args.join(',') + '))';\r\n        }\r\n    };\r\n    /**\r\n     *含有等号等符号类词法树编译\r\n     * @param ast\r\n     * @returns {any}\r\n     */\r\n    ASTCompile.prototype.assigmentCompile = function (ast) {\r\n        var left, leftCon = { context: undefined, name: undefined, computed: undefined };\r\n        this.handelTree(ast.left, leftCon, true);\r\n        if (leftCon.computed) {\r\n            left = util_1.default.computedMember(leftCon.context, leftCon.name);\r\n        }\r\n        else {\r\n            left = util_1.default.nonComputedMember(leftCon.context, leftCon.name);\r\n        }\r\n        // console.log(leftCon, left);\r\n        //safeObject 用于检测表达式右侧是否安全\r\n        return util_1.default.concatCode(left, 'safeObject(' + this.handelTree(ast.right) + ')');\r\n    };\r\n    /**\r\n     * 含有一元运算符的编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.unaryCompile = function (ast) {\r\n        return ast.operator + '(' + 'isUndefined(' + this.handelTree(ast.value) + '))';\r\n    };\r\n    /**\r\n     * 二元运算符编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.binaryCompile = function (ast) {\r\n        if (util_1.default.inStr(ast.operator, '+-')) { //加减运算\r\n            return '(isUndefined(' + this.handelTree(ast.left) + ')' + ast.operator + 'isUndefined(' + this.handelTree(ast.right) + '))';\r\n        }\r\n        return '(' + this.handelTree(ast.left) + ast.operator + this.handelTree(ast.right) + ')';\r\n    };\r\n    /**\r\n     * 逻辑运算符编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.logicalCompile = function (ast) {\r\n        var id = this.incrementId();\r\n        this.state.body.push(util_1.default.concatCode(id, this.handelTree(ast.left)));\r\n        util_1.default.conditionIsRight(this.state.body, ast.operator == '&&' ? id : util_1.default.notExist(id), util_1.default.concatCode(id, this.handelTree(ast.right)));\r\n        return id;\r\n    };\r\n    /**\r\n     * 三元运算符编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.ternaryCompile = function (ast) {\r\n        var id = this.incrementId();\r\n        var id2 = this.incrementId();\r\n        this.state.body.push(util_1.default.concatCode(id2, this.handelTree(ast.boolean_expression)));\r\n        util_1.default.conditionIsRight(this.state.body, id2, util_1.default.concatCode(id, this.handelTree(ast.true_value)));\r\n        util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(id2), util_1.default.concatCode(id, this.handelTree(ast.error_value)));\r\n        return id;\r\n    };\r\n    /**\r\n     * 管道编译\r\n     * @param name\r\n     */\r\n    ASTCompile.prototype.pipeCompile = function (name) {\r\n        var ps = this.state.pipes;\r\n        if (!ps.hasOwnProperty('name')) {\r\n            ps[name] = this.incrementId(true);\r\n        }\r\n        return ps[name];\r\n    };\r\n    /**\r\n     * 判断pipes是否存在\r\n     */\r\n    ASTCompile.prototype.pipePrefix = function () {\r\n        var ps = this.state.pipes;\r\n        if (JSON.stringify(ps) == '{}') {\r\n            return '';\r\n        }\r\n        var arr = [];\r\n        for (var k in ps) {\r\n            arr.push(ps[k] + '=' + 'pipe(' + util_1.default.wrapString(k) + ')');\r\n        }\r\n        // console.log(arr);\r\n        return 'var ' + arr.join(',') + ';';\r\n    };\r\n    /**\r\n     * compileId自增\r\n     */\r\n    ASTCompile.prototype.incrementId = function (flag) {\r\n        var id = util_1.default.compileId(this.state.compileId, this.state.echo, flag);\r\n        this.state.compileId++;\r\n        return id;\r\n    };\r\n    /**\r\n     * 字面量\r\n     */\r\n    ASTCompile.prototype.isLiteral = function () {\r\n        var arr = this.ast.body;\r\n        return !arr.length || ((arr.length === 1) &&\r\n            (arr[0].type === ast_config_1.dataType['2'] ||\r\n                arr[0].type === ast_config_1.dataType['3'] ||\r\n                arr[0].type === ast_config_1.dataType['4'] ||\r\n                arr[0].type === ast_config_1.dataType['5']));\r\n    };\r\n    /**\r\n     * 常量\r\n     * @param ast\r\n     */\r\n    ASTCompile.prototype.constantExpr = function (ast) {\r\n        var _this = this;\r\n        var cons, that = this;\r\n        switch (ast.type) {\r\n            case ast_config_1.dataType['1']: //ASTBuilder.Init\r\n                cons = true;\r\n                arrayLike(ast.body);\r\n                break;\r\n            case ast_config_1.dataType['2']: //ASTBuilder.MetaData\r\n                ast.constant = true;\r\n                break;\r\n            case ast_config_1.dataType['3']: //ASTBuilder.Array\r\n                cons = true;\r\n                arrayLike(ast.value);\r\n                ast.constant = cons;\r\n                break;\r\n            case ast_config_1.dataType['4']: //ASTBuilder.Object\r\n                cons = true;\r\n                ast.value.forEach(function (val) {\r\n                    _this.constantExpr(val.value);\r\n                    cons = cons && val.value.constant;\r\n                });\r\n                ast.constant = cons;\r\n                break;\r\n            case ast_config_1.dataType['5']: //ASTBuilder.Identifier\r\n            case ast_config_1.dataType['6']: //ASTBuilder.This\r\n                ast.constant = false;\r\n                break;\r\n            case ast_config_1.dataType['7']: //ASTBuilder.Member\r\n                this.constantExpr(ast.object);\r\n                if (ast.computed) {\r\n                    this.constantExpr(ast.property);\r\n                }\r\n                ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);\r\n                break;\r\n            case ast_config_1.dataType['8']: //ASTBuilder.Function\r\n                cons = ast.pipe;\r\n                arrayLike(ast.arguments);\r\n                ast.constant = cons;\r\n                break;\r\n            case ast_config_1.dataType['9']: //ASTBuilder.Assignment\r\n                leftRight();\r\n                break;\r\n            case ast_config_1.dataType['10']: //ASTBuilder.Unary\r\n                this.constantExpr(ast.value);\r\n                ast.constant = ast.value.constant;\r\n                break;\r\n            case ast_config_1.dataType['11']: //ASTBuilder.Binary\r\n            case ast_config_1.dataType['12']: //ASTBuilder.Logical\r\n                leftRight();\r\n                break;\r\n            case ast_config_1.dataType['13']: //ASTBuilder.Teranry\r\n                this.constantExpr(ast.boolean_expression);\r\n                this.constantExpr(ast.true_value);\r\n                this.constantExpr(ast.error_value);\r\n                ast.constant = ast.boolean_expression.constant && ast.true_value.constant && ast.error_value.constant;\r\n                break;\r\n        }\r\n        function arrayLike(array) {\r\n            array.forEach(function (val) {\r\n                that.constantExpr(val);\r\n                cons = cons && val.constant;\r\n            });\r\n            ast.constant = cons;\r\n        }\r\n        function leftRight() {\r\n            that.constantExpr(ast.left);\r\n            that.constantExpr(ast.right);\r\n            ast.constant = ast.left.constant && ast.right.constant;\r\n        }\r\n    };\r\n    return ASTCompile;\r\n}());\r\nexports.default = ASTCompile;\r\n/**\r\n * 检测是否是安全的属性名，例如constructor, __defineGetter__等\r\n * @param str\r\n */\r\nfunction safeProperty(str) {\r\n    var f = K.PROPERTY.some(function (val) {\r\n        return val === str;\r\n    });\r\n    if (f)\r\n        $log.error(str + '存在编译风险');\r\n}\r\n/**\r\n * 检测是否是安全的对象\r\n * @param obj\r\n */\r\nfunction safeObject(obj) {\r\n    if (obj == undefined)\r\n        return;\r\n    var f = K.WINDOW.every(function (val) {\r\n        return obj[val];\r\n    });\r\n    var f2 = K.NODE.every(function (val) {\r\n        return obj[val];\r\n    });\r\n    if (f || f2 || obj.constructor == obj || obj.getOwnPropertyDescriptor || obj.getOwnPropertyNames)\r\n        $log.error(obj + '存在编译风险');\r\n    return obj;\r\n}\r\n/**\r\n * 检查函数是否安全\r\n * @param fun\r\n */\r\nfunction safeFunction(fun) {\r\n    var f = K.FUN.some(function (val) {\r\n        return val == fun;\r\n    });\r\n    if (f || fun.constructor == fun)\r\n        $log.error(fun + '存在编译风险');\r\n}\r\n/**\r\n * 判断目标是否为undefined\r\n * @param target\r\n * @param value\r\n * @returns {any}\r\n */\r\nfunction isUndefined(target, value) {\r\n    if (value === void 0) { value = 0; }\r\n    return typeof target === 'undefined' ? value : target;\r\n}\r\n/**\r\n * 根据管道名称返回管道处理函数\r\n * @param name 管道名称\r\n */\r\nfunction pipe(name) {\r\n    // console.log(ps);\r\n    return ps[name];\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/parse/astCompile.ts\n// module id = 17\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//对象属性\r\nvar PROPERTY = ['constructor', '__proto__', '__defineGetter__', '__defineSetter__', '__lookupGetter__', '__loopupSetter__'];\r\nexports.PROPERTY = PROPERTY;\r\n//window对象\r\nvar WINDOW = ['document', 'alert', 'location', 'setInterval', 'setTimeout'];\r\nexports.WINDOW = WINDOW;\r\n//dom节点\r\nvar NODE = ['nodeName', 'children'];\r\nexports.NODE = NODE;\r\n//函数\r\nvar FUN = [Function.prototype.call, Function.prototype.apply, Function.prototype.bind];\r\nexports.FUN = FUN;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/config/unSafeStr.ts\n// module id = 18\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\n/**\r\n * 执行管道过滤操作\r\n */\r\nvar Pipe = /** @class */ (function () {\r\n    function Pipe() {\r\n        this.pipes = {};\r\n    }\r\n    /**\r\n     * 注册管道函数\r\n     * @param name 字符串或者对象\r\n     * @param factory\r\n     */\r\n    Pipe.prototype.register = function (name, factory) {\r\n        // this.pipes = {};\r\n        //允许对象方式注册多个pipe\r\n        if (util_1.default.type(name) == 'object') {\r\n            for (var i in name) {\r\n                return this.register(i, name[i]);\r\n            }\r\n        }\r\n        if (util_1.default.type(name) == 'string') {\r\n            if (util_1.default.type(factory) != 'function')\r\n                $log.error('注册的管道函数类型为function');\r\n            var pipe = factory();\r\n            this.pipes[name] = pipe;\r\n            return pipe;\r\n        }\r\n    };\r\n    /**\r\n     * 管道执行函数\r\n     * @param name\r\n     */\r\n    Pipe.prototype.pipe = function (name) {\r\n        return this.pipes[name];\r\n    };\r\n    Pipe.prototype.returnPipes = function () {\r\n        return this.pipes;\r\n    };\r\n    return Pipe;\r\n}());\r\nexports.default = Pipe;\r\n// const pipe = new Pipe();\r\nfunction $pipeProvider($provider) {\r\n    var pipes = {};\r\n    this.register = function (name, factory) {\r\n        //允许对象方式注册多个pipe\r\n        if (util_1.default.type(name) == 'object') {\r\n            for (var i in name) {\r\n                return this.register(i, name[i]);\r\n            }\r\n        }\r\n        if (util_1.default.type(name) == 'string') {\r\n            if (util_1.default.type(factory) != 'function')\r\n                $log.error('注册的管道函数类型为function');\r\n            return $provider.factory(name + 'Pipe', factory);\r\n        }\r\n    };\r\n    this.$get = ['$injector', function ($injector) {\r\n            return function (name) {\r\n                return $injector.get(name + 'Pipe');\r\n            };\r\n        }];\r\n}\r\nexports.$pipeProvider = $pipeProvider;\r\n$pipeProvider.$inject = ['$provider'];\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pipe/pipe.ts\n// module id = 19\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HandelEventer_1 = require(\"../util/HandelEventer\");\r\nvar util_1 = require(\"../util\");\r\n/**\r\n * 监听组件的data数据变化\r\n */\r\nvar HandelData = /** @class */ (function () {\r\n    function HandelData() {\r\n        this.data = {};\r\n        this.name = '';\r\n        this.token = undefined;\r\n        this.props = {};\r\n        this.componentStatus = '';\r\n    }\r\n    HandelData.prototype.$data = function (key, val) {\r\n        var n = arguments.length;\r\n        switch (n) {\r\n            case 0:\r\n                return this.data;\r\n            case 1:\r\n                return this.data[key];\r\n            case 2:\r\n                var oldData = util_1.default.deepClone(this.data);\r\n                this.data[key] = val;\r\n                var newData = this.data;\r\n                HandelEventer_1.default.trigger(key, util_1.default.clone({\r\n                    target: this.token,\r\n                    which: this.name,\r\n                    old: oldData,\r\n                    new: newData,\r\n                    oldVal: oldData[key],\r\n                    newVal: newData[key],\r\n                    props: this.props == undefined ? {} : this.props,\r\n                    componentStatus: this.componentStatus\r\n                }));\r\n                break;\r\n        }\r\n    };\r\n    return HandelData;\r\n}());\r\nvar Data = new HandelData();\r\nexports.default = Data;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/HandelData.ts\n// module id = 20\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HandelEventer = /** @class */ (function () {\r\n    function HandelEventer() {\r\n        this.eventList = {};\r\n    }\r\n    /**\r\n     * 触发事件\r\n     * @param name\r\n     * @param msg\r\n     */\r\n    HandelEventer.prototype.trigger = function (name, msg) {\r\n        var key = Array.prototype.shift.call(arguments);\r\n        var fns = this.eventList[key];\r\n        if (!fns || fns.length === 0) {\r\n            return false;\r\n        }\r\n        ;\r\n        for (var i = 0, fn; fn = fns[i++];) {\r\n            fn.apply(this, arguments);\r\n        }\r\n    };\r\n    /**\r\n     * 监听事件\r\n     * @param name\r\n     * @param fn\r\n     */\r\n    HandelEventer.prototype.listen = function (name, fn) {\r\n        if (!this.eventList[name]) {\r\n            this.eventList[name] = [];\r\n        }\r\n        ;\r\n        this.eventList[name].push(fn);\r\n    };\r\n    HandelEventer.prototype.remove = function (key, fn) {\r\n        var fns = this.eventList[key];\r\n        // key对应的消息没有被人订阅\r\n        if (!fns) {\r\n            return false;\r\n        }\r\n        // 没有传入fn(具体的回调函数), 表示取消key对应的所有订阅\r\n        if (!fn) {\r\n            fns && (fns.length = 0);\r\n        }\r\n        else {\r\n            // 反向遍历\r\n            for (var i = fns.length - 1, _fn = fns[i]; i >= 0; i--) {\r\n                if (_fn === fn) {\r\n                    // 删除订阅回调函数\r\n                    fns.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return HandelEventer;\r\n}());\r\nvar Eventer = new HandelEventer();\r\nexports.default = Eventer;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/HandelEventer.ts\n// module id = 21\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HandelEventer_1 = require(\"../util/HandelEventer\");\r\n/**\r\n * 组件事件监听函数\r\n */\r\nvar HandelEvent = /** @class */ (function () {\r\n    function HandelEvent() {\r\n    }\r\n    /**\r\n     * 触发事件\r\n     * @param name 事件名称\r\n     * @param msg 信息\r\n     */\r\n    HandelEvent.prototype.trigger = function (name, msg) {\r\n        HandelEventer_1.default.trigger(name, msg);\r\n    };\r\n    /**\r\n     * 监听事件\r\n     * @param name 事件名称\r\n     * @param fn 回调函数，返回触发的信息\r\n     */\r\n    HandelEvent.prototype.listen = function (name, fn) {\r\n        HandelEventer_1.default.listen(name, fn);\r\n    };\r\n    return HandelEvent;\r\n}());\r\nvar handelEvent = new HandelEvent();\r\nexports.default = handelEvent;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/HandelEvent.ts\n// module id = 22\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar parseHttp_1 = require(\"./parseHttp\");\r\nvar Http = /** @class */ (function () {\r\n    function Http() {\r\n    }\r\n    /**\r\n     * ajax请求方式，全配置\r\n     * @param param0\r\n     */\r\n    Http.prototype.ajax = function (_a) {\r\n        var _b = _a.type, type = _b === void 0 ? 'get' : _b, _c = _a.url, url = _c === void 0 ? '' : _c, data = _a.data;\r\n        return parseHttp_1.parseHttp(type, url, data);\r\n    };\r\n    /**\r\n     * get请求方式\r\n     * @param url\r\n     */\r\n    Http.prototype.get = function (url) {\r\n        return parseHttp_1.parseHttp('get', url, null);\r\n    };\r\n    /**\r\n     * post请求\r\n     * @param url\r\n     * @param data\r\n     */\r\n    Http.prototype.post = function (url, data) {\r\n        return parseHttp_1.parseHttp('post', url, data);\r\n    };\r\n    /**\r\n     * put请求\r\n     * @param url\r\n     * @param data\r\n     */\r\n    Http.prototype.put = function (url, data) {\r\n        return parseHttp_1.parseHttp('put', url, data);\r\n    };\r\n    /**\r\n     * delete请求\r\n     * @param url\r\n     * @param data\r\n     */\r\n    Http.prototype.delete = function (url, data) {\r\n        return parseHttp_1.parseHttp('delete', url, data);\r\n    };\r\n    return Http;\r\n}());\r\nvar http = new Http();\r\nexports.default = http;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/http/index.ts\n// module id = 23\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar util_1 = require(\"../util\");\r\nvar $log = require(\"../log\");\r\n// 支持的类型\r\nvar httpType = ['get', 'post', 'put', 'delete', 'head', 'options'];\r\n/**\r\n * 解析http请求\r\n * @param type 请求类型\r\n * @param url\r\n * @param data\r\n */\r\nfunction parseHttp(type, url, data) {\r\n    if (util_1.default.type(type) != 'string' && !httpType.includes(type.toLowerCase())) {\r\n        $log.error('http请求类型必须为' + httpType + '中的一个');\r\n    }\r\n    if (util_1.default.type(url) != 'string') {\r\n        $log.error('http请求的url参数需为字符');\r\n    }\r\n    if (data && util_1.default.type(data) != 'object') {\r\n        $log.error('http请求的data参数需为对象');\r\n    }\r\n    var promise = new Promise(function (resolve, reject) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(type, url);\r\n        xhr.onreadystatechange = handel;\r\n        xhr.responseType = 'json';\r\n        xhr.setRequestHeader('Accept', 'application/json');\r\n        xhr.send(data || null);\r\n        function handel() {\r\n            if (this.readyState != 4) {\r\n                return;\r\n            }\r\n            if (this.status == 200) {\r\n                resolve(this.response);\r\n            }\r\n            else {\r\n                reject(new Error(this.statusText));\r\n            }\r\n        }\r\n    });\r\n    return promise;\r\n}\r\nexports.parseHttp = parseHttp;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/http/parseHttp.ts\n// module id = 24\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar store_1 = require(\"../store\");\r\nvar store = new store_1.default();\r\nvar Router = /** @class */ (function () {\r\n    function Router(url, routers) {\r\n        this.url = url;\r\n        this.routers = this._parseRouters(routers);\r\n        this.nowRouter = this._getNowRouter(url, this.routers);\r\n        this.params = this.nowRouter ? (this.nowRouter.params ? this.nowRouter.params : {}) : {};\r\n    }\r\n    /**\r\n     * 获取当前路由\r\n     * @param url 浏览器pathname\r\n     * @param routers 路由集合\r\n     */\r\n    Router.prototype._getNowRouter = function (url, routers) {\r\n        if (url.includes('?')) {\r\n            url = url.substr(0, url.lastIndexOf('?'));\r\n        }\r\n        return routers.filter(function (v) {\r\n            return url.match(v.info.regexp);\r\n        })[0];\r\n    };\r\n    Router.prototype._parseRouters = function (routers) {\r\n        var _this = this;\r\n        routers.forEach(function (v) {\r\n            var r = _this._pathToReg(v.path);\r\n            if (r != null) {\r\n                v.info = r;\r\n                _this.params = v.params || {};\r\n            }\r\n        });\r\n        return routers;\r\n    };\r\n    /**\r\n     * 转换路径为正则\r\n     * @param path 路径\r\n     */\r\n    Router.prototype._pathToReg = function (path) {\r\n        var ret = {\r\n            originalPath: path,\r\n            regexp: path\r\n        }, keys = ret.keys = [];\r\n        path = path\r\n            .replace(/([().])/g, '\\\\$1')\r\n            .replace(/(\\/)?:(\\w+)(\\*\\?|[?*])?/g, function (_, slash, key, option) {\r\n            var optional = (option === '?' || option === '*?') ? '?' : null;\r\n            var star = (option === '*' || option === '*?') ? '*' : null;\r\n            keys.push({ name: key, optional: !!optional });\r\n            slash = slash || '';\r\n            return ''\r\n                + (optional ? '' : slash)\r\n                + '(?:'\r\n                + (optional ? slash : '')\r\n                + (star && '(.+?)' || '([^/]+)')\r\n                + (optional || '')\r\n                + ')'\r\n                + (optional || '');\r\n        })\r\n            .replace(/([/$*])/g, '\\\\$1');\r\n        ret.regexp = new RegExp('^' + path + '$', '');\r\n        return ret;\r\n    };\r\n    /**\r\n     * 跳转到已存在的路由页面\r\n     * @param path 需要跳转的路径\r\n     */\r\n    Router.prototype.go = function (_a) {\r\n        var _b = _a.path, path = _b === void 0 ? '' : _b, _c = _a.params, params = _c === void 0 ? {} : _c;\r\n        updateRouterConfig(path, params);\r\n        this.hash(path);\r\n    };\r\n    /**\r\n     * url的hash\r\n     * @param path\r\n     */\r\n    Router.prototype.hash = function (path) {\r\n        if (!path) {\r\n            return window.location.hash;\r\n        }\r\n        window.location.hash = '#' + path;\r\n    };\r\n    /**\r\n     * 刷新当前路由\r\n     */\r\n    Router.prototype.reflesh = function () {\r\n        var hash = window.location.hash;\r\n        window.location.hash = '#';\r\n        window.location.hash = hash;\r\n    };\r\n    /**\r\n     * 返回\r\n     */\r\n    Router.prototype.back = function () {\r\n        window.history.back();\r\n    };\r\n    return Router;\r\n}());\r\nexports.default = Router;\r\n// 更新路由配置\r\nfunction updateRouterConfig(path, params) {\r\n    store.get('routerConfig').forEach(function (v) {\r\n        if (v.path == path) {\r\n            v.params = params;\r\n        }\r\n    });\r\n    store.data('routerConfig', store.get('routerConfig'));\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/router/index.ts\n// module id = 25\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar loader_1 = require(\"./loader\");\r\nvar injector_1 = require(\"./injector\");\r\nvar loader = new loader_1.default();\r\nvar inject = new injector_1.default();\r\n/**\r\n * 数据存储解析服务\r\n */\r\nvar Store = /** @class */ (function () {\r\n    function Store(moduleName) {\r\n        if (moduleName === void 0) { moduleName = 'Cpage'; }\r\n        this.app = loader.module(moduleName, []);\r\n        this.ins = function () {\r\n            return inject.inject([moduleName]);\r\n        };\r\n    }\r\n    /**\r\n     * 存储数据\r\n     * @param key\r\n     * @param val\r\n     */\r\n    Store.prototype.data = function (key, val) {\r\n        this.app.data(key, val);\r\n    };\r\n    /**\r\n     * 是否有key这个变量\r\n     * @param key\r\n     */\r\n    Store.prototype.has = function (key) {\r\n        return this.ins().has(key);\r\n    };\r\n    /**\r\n     * 获取数据\r\n     * @param key\r\n     */\r\n    Store.prototype.get = function (key) {\r\n        return this.ins().get(key);\r\n    };\r\n    /**\r\n     * provider函数\r\n     * @param key\r\n     * @param obj { $get: function(){} }\r\n     */\r\n    Store.prototype.provider = function (key, obj) {\r\n        this.app.provider(key, obj);\r\n    };\r\n    /**\r\n     * factory函数\r\n     * @param key\r\n     * @param fn 需要返回值\r\n     */\r\n    Store.prototype.factory = function (key, fn) {\r\n        this.app.factory(key, fn);\r\n    };\r\n    /**\r\n     * service 函数\r\n     * @param key\r\n     * @param fn\r\n     */\r\n    Store.prototype.service = function (key, fn) {\r\n        this.app.service(key, fn);\r\n    };\r\n    return Store;\r\n}());\r\nexports.default = Store;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/store/index.ts\n// module id = 26\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../../log\");\r\nvar moduleNames = {};\r\nvar Loader = /** @class */ (function () {\r\n    function Loader() {\r\n        this.modules = {\r\n            name: '',\r\n            requires: []\r\n        };\r\n    }\r\n    Loader.prototype.clear = function () {\r\n        this.modules = {};\r\n    };\r\n    /**\r\n     * 模块\r\n     * @param name 模块名称\r\n     * @param requires 模块的依赖项\r\n     * @param configFn 配置函数\r\n     */\r\n    Loader.prototype.module = function (name, requires, configFn) {\r\n        var modules = {};\r\n        if (requires) {\r\n            this.modules = this.$$set(name, requires, modules, configFn);\r\n        }\r\n        else {\r\n            this.modules = this.$$get(name, modules);\r\n        }\r\n        return this.modules;\r\n    };\r\n    /**\r\n     * 生成module\r\n     * @param name\r\n     * @param requires\r\n     * @param configFn\r\n     */\r\n    Loader.prototype.$$set = function (name, requires, modules, configFn) {\r\n        if (name == 'hasOwnProperty')\r\n            $log.error('hasOwnProperty不能用于键名');\r\n        var invokeQueue = [];\r\n        var configQueue = [];\r\n        /**\r\n         * 引用函数\r\n         * @param service 服务名称\r\n         * @param prefix data,provider\r\n         * @param arrProp 数组属性\r\n         * @param queue 引用队列\r\n         */\r\n        var invokeFn = function (service, prefix, arrProp, queue) {\r\n            if (arrProp === void 0) { arrProp = 'push'; }\r\n            if (queue === void 0) { queue = invokeQueue; }\r\n            return function () {\r\n                queue[arrProp]([service, prefix, arguments]);\r\n                return moduleObj;\r\n            };\r\n        };\r\n        var moduleObj = {\r\n            name: name,\r\n            requires: requires,\r\n            // data: (key, val)=>{\r\n            //     invokeQueue.unshift(['data', [key, val]]);\r\n            // },\r\n            // provider: (key, val)=>{\r\n            //     invokeQueue.push(['provider', [key, val]]);\r\n            // },\r\n            data: invokeFn('$provider', 'data', 'unshift'),\r\n            provider: invokeFn('$provider', 'provider'),\r\n            factory: invokeFn('$provider', 'factory'),\r\n            value: invokeFn('$provider', 'value'),\r\n            service: invokeFn('$provider', 'service'),\r\n            config: invokeFn('$injector', 'invoke', 'push', configQueue),\r\n            run: function (fn) {\r\n                moduleObj._runQueue.push(fn);\r\n                return moduleObj;\r\n            },\r\n            pipe: invokeFn('$pipeProvider', 'register'),\r\n            // directive: invokeFn('$compileProvider', 'directive'),\r\n            _invokeQueue: invokeQueue,\r\n            _configQueue: configQueue,\r\n            _runQueue: []\r\n        };\r\n        if (configFn) {\r\n            moduleObj.config(configFn);\r\n        }\r\n        this.modules = moduleNames[name] = moduleObj;\r\n        return moduleObj;\r\n    };\r\n    /**\r\n     * 根据name获取module\r\n     * @param name\r\n     * @param modules\r\n     */\r\n    Loader.prototype.$$get = function (name, modules) {\r\n        if (moduleNames.hasOwnProperty(name)) {\r\n            return moduleNames[name];\r\n        }\r\n        $log.error('名称为' + name + '的module不存在！');\r\n    };\r\n    return Loader;\r\n}());\r\nexports.default = Loader;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/store/loader/index.ts\n// module id = 27\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../../log\");\r\nvar util_1 = require(\"../../util\");\r\nvar loader_1 = require(\"../loader\");\r\nvar loader = new loader_1.default();\r\n// 处理函数\r\nvar FN_REG = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\r\n// 处理空格\r\nvar SPACE_REG = /^\\s*(\\S+)\\s*$/;\r\n// 处理注释\r\nvar COMMENTS_REG = /(\\/\\*.*?\\*\\/)|(\\/\\/$)/mg;\r\nvar Injector = /** @class */ (function () {\r\n    function Injector() {\r\n    }\r\n    /**\r\n     * 模块注入函数\r\n     * @param moduleNames 模块名称\r\n     * @param strict 严格模式的判断，默认false\r\n     */\r\n    Injector.prototype.inject = function (moduleNames, strict) {\r\n        if (util_1.default.type(moduleNames) != 'array')\r\n            $log.error('模块的名称的参数为数组');\r\n        // 缓存data数据\r\n        var providerCache = { $injector: undefined, $provider: { data: undefined, provider: undefined } };\r\n        var providerInjecter = providerCache.$injector = injectAgency(providerCache, function () {\r\n            // $log.error('未知的provider'+JSON.stringify(depPath));\r\n        });\r\n        var dataCache = { $injector: undefined };\r\n        var dataInjecter = dataCache.$injector = injectAgency(dataCache, function (name) {\r\n            var provider = providerInjecter.get(name + 'Provider');\r\n            return dataInjecter.invoke(provider.$get, provider);\r\n        });\r\n        // 已经加载的模块\r\n        var loadedModules = new Map();\r\n        var cricle = false;\r\n        // provider依赖数组,[['数组名',['依赖项']]] [['a',['b']]]\r\n        var depPath = [];\r\n        // run 函数队列\r\n        var runQueue = [];\r\n        /**\r\n         * 处理函数的返回值\r\n         * @param fn\r\n         */\r\n        function handelReturn(fn) {\r\n            return function () {\r\n                var val = dataInjecter.invoke(fn);\r\n                if (util_1.default.type(val) == 'undefined') {\r\n                    $log.error('factory函数必须有返回值');\r\n                }\r\n                return val;\r\n            };\r\n        }\r\n        providerCache.$provider = {\r\n            data: function (key, val) {\r\n                if (key == 'hasOwnProperty' || key == '$injector' || key == '$provider')\r\n                    $log.error(key + '不能用于标识符');\r\n                dataCache[key] = val;\r\n                providerCache[key] = val;\r\n            },\r\n            provider: function (key, val) {\r\n                if (key == 'hasOwnProperty' || key == '$injector' || key == '$provider')\r\n                    $log.error(key + '不能用于标识符');\r\n                if (util_1.default.type(val) == 'function') {\r\n                    // val = instantiate(val);\r\n                    val = providerInjecter.instantiate(val);\r\n                }\r\n                providerCache[key + 'Provider'] = val;\r\n            },\r\n            factory: function (key, fn) {\r\n                this.provider(key, { $get: handelReturn(fn) });\r\n            },\r\n            value: function (key, val) {\r\n                this.factory(key, function () { return val; });\r\n            },\r\n            service: function (key, fn) {\r\n                this.factory(key, function () {\r\n                    return dataInjecter.instantiate(fn);\r\n                });\r\n            }\r\n        };\r\n        var listQueue = function (queues) {\r\n            queues.forEach(function (inq) {\r\n                var service = providerInjecter.get(inq[0]);\r\n                var method = inq[1];\r\n                var args = inq[2];\r\n                // const arr = [args[0], args[1]];\r\n                // providerCache.$provider[method].apply(providerCache.$provider, args);\r\n                service[method].apply(service, args);\r\n            });\r\n        };\r\n        moduleNames.forEach(function loadMobule(val) {\r\n            if (!loadedModules.get(val)) {\r\n                loadedModules.set(val, true);\r\n                if (util_1.default.type(val) == 'string') {\r\n                    var module_1 = loader.module(val);\r\n                    module_1.requires.forEach(loadMobule); // 递归其他的依赖模块\r\n                    listQueue(module_1._invokeQueue);\r\n                    listQueue(module_1._configQueue);\r\n                    runQueue = runQueue.concat(module_1._runQueue);\r\n                }\r\n                if (util_1.default.type(val) == 'function' || util_1.default.type(val) == 'array') {\r\n                    runQueue.push(providerInjecter.invoke(val));\r\n                }\r\n            }\r\n        });\r\n        //执行run函数队列\r\n        util_1.default.arrayCompact(runQueue).forEach(function (run) {\r\n            dataInjecter.invoke(run);\r\n        });\r\n        function injectAgency(cache, fn) {\r\n            /**\r\n             * 处理缓存\r\n             * @param name data或者provideer名称\r\n             */\r\n            function handelCache(name) {\r\n                handeldepPath(depPath);\r\n                if (cache.hasOwnProperty(name)) {\r\n                    return cache[name];\r\n                }\r\n                else {\r\n                    try {\r\n                        return (cache[name] = fn(name));\r\n                    }\r\n                    finally {\r\n                        if (cricle)\r\n                            delete cache[name];\r\n                    }\r\n                }\r\n            }\r\n            /**\r\n             * $inject内部的调用函数\r\n             * @param fn 注入的函数或数组\r\n             * @param obj 对象，fn为其属性\r\n             * @param local 用于覆盖$inject数组的item项\r\n             * @param name data或provider名称\r\n             */\r\n            function invoke(fn, obj, local, name) {\r\n                if (arguments.length == 1) {\r\n                    obj = null;\r\n                }\r\n                var args = annotate(fn, name).map(function (v) {\r\n                    if (util_1.default.type(v) == 'string')\r\n                        return (local && local.hasOwnProperty(v)) ? local[v] : handelCache(v);\r\n                    else\r\n                        $log.error('无效的标识符' + v + '，标识符应为字符串');\r\n                });\r\n                if (util_1.default.type(fn) == 'array') {\r\n                    fn = fn.slice(-1)[0];\r\n                }\r\n                return fn.apply(obj, args);\r\n            }\r\n            /**\r\n             * 实例化\r\n             * @param fn\r\n             * @param local\r\n             */\r\n            function instantiate(fn, local) {\r\n                var fn2 = util_1.default.type(fn) == 'array' ? fn.slice(-1)[0] : fn;\r\n                var instance = Object.create(fn2.prototype);\r\n                invoke(fn, instance, local);\r\n                return instance;\r\n            }\r\n            function hasKey(key) {\r\n                return dataCache.hasOwnProperty(key) || providerCache.hasOwnProperty(key + 'Provider');\r\n            }\r\n            return {\r\n                has: hasKey,\r\n                get: handelCache,\r\n                invoke: invoke,\r\n                annotate: annotate,\r\n                instantiate: instantiate\r\n            };\r\n        }\r\n        function handeldepPath(arr) {\r\n            if (arr.length) {\r\n                if (arr[arr.length - 1][1].includes(arr[0][0])) {\r\n                    var path = arr.map(function (v) {\r\n                        return v[0];\r\n                    });\r\n                    path.push(arr[0][0]);\r\n                    cricle = true;\r\n                    $log.error('发现循环依赖' + path.join('->'));\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * 装饰器函数\r\n         * @param fn 注入的函数\r\n         */\r\n        function annotate(fn, name) {\r\n            var arr = [];\r\n            if (util_1.default.type(fn) == 'array') {\r\n                if (fn.length)\r\n                    arr = fn.slice(0, fn.length - 1);\r\n                else\r\n                    arr = [];\r\n            }\r\n            if (util_1.default.type(fn) == 'function') {\r\n                if (strict) {\r\n                    $log.error('函数没有$inject属性，不能再严格模式下使用');\r\n                }\r\n                else if (fn.$inject) { //普通函数，有$inject属性\r\n                    arr = fn.$inject;\r\n                }\r\n                else {\r\n                    var fns = (fn.toString().replace(COMMENTS_REG, '')).match(FN_REG);\r\n                    arr = util_1.default.arrayCompact(fns[1].split(',')).map(function (a) {\r\n                        return a.match(SPACE_REG)[1];\r\n                    });\r\n                    if (name != null) {\r\n                        depPath.push([name, arr]);\r\n                    }\r\n                }\r\n            }\r\n            // console.log(arr)\r\n            return arr;\r\n        }\r\n        return dataInjecter;\r\n    };\r\n    return Injector;\r\n}());\r\nexports.default = Injector;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/store/injector/index.ts\n// module id = 28\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\n/**\r\n * 验证组件的状态\r\n * @param component 组件\r\n */\r\nfunction componentGuard(component) {\r\n    // 验证组件名称\r\n    if (!component.name) {\r\n        return;\r\n    }\r\n    if (component.name) {\r\n        if (util_1.default.type(component.name) != 'string')\r\n            $log.error('组件' + component.name + '的名称必须为字符串');\r\n    }\r\n    // 验证组件components属性\r\n    if (component.components) {\r\n        if (util_1.default.type(component.components) != 'array') {\r\n            $log.error('组件' + component.name + '的components属性应为数组！');\r\n        }\r\n    }\r\n    // 验证组件style属性\r\n    if (component.style) {\r\n        if (util_1.default.type(component.style) != 'string') {\r\n            $log.error('组件' + component.name + '的style属性应为字符！');\r\n        }\r\n    }\r\n    // 验证组件styleeId属性\r\n    if (component.styleId) {\r\n        if (util_1.default.type(component.styleId) != 'string') {\r\n            $log.error('组件' + component.name + '的styleId属性应为字符！');\r\n        }\r\n        if (document.querySelector(component.styleId) == undefined) {\r\n            $log.error('节点' + component.styleId + '不存在');\r\n        }\r\n    }\r\n    // 验证组件template属性\r\n    if (component.template) {\r\n        if (util_1.default.type(component.template) != 'string') {\r\n            $log.error('组件' + component.name + '的template属性应为字符！');\r\n        }\r\n    }\r\n    // 验证组件templateId属性\r\n    if (component.templateId) {\r\n        if (util_1.default.type(component.templateId) != 'string') {\r\n            $log.error('组件' + component.name + '的templateId属性应为字符！');\r\n        }\r\n        if (document.querySelector(component.templateId) == undefined) {\r\n            $log.error('节点' + component.templateId + '不存在');\r\n        }\r\n    }\r\n    // 验证组件data属性\r\n    if (component.data) {\r\n        if (util_1.default.type(component.data) != 'object') {\r\n            $log.error('组件' + component.name + '的data属性应为对象！');\r\n        }\r\n    }\r\n    // 验证组件props属性\r\n    if (component.props) {\r\n        if (util_1.default.type(component.props) != 'object') {\r\n            $log.error('组件' + component.name + '的props属性应为对象！');\r\n        }\r\n        // 验证type类型\r\n        Object.entries(component.props).forEach(function (v) {\r\n            if (util_1.default.type(v[1]['default']) != v[1]['type']) {\r\n                $log.error('组件' + component.name + 'props属性中元素' + v[0] + '的default值非' + v[1]['type'] + '类型！');\r\n            }\r\n        });\r\n    }\r\n    // 验证组件props方法\r\n    if (component.beforeRender) {\r\n        if (util_1.default.type(component.beforeRender) != 'function') {\r\n            $log.error('组件' + component.name + '的beforeRender属性应为函数！');\r\n        }\r\n    }\r\n    // 验证组件render方法\r\n    if (component.render) {\r\n        if (util_1.default.type(component.render) != 'function') {\r\n            $log.error('组件' + component.name + '的render属性应为函数！');\r\n        }\r\n    }\r\n    else {\r\n        return;\r\n    }\r\n}\r\nexports.default = componentGuard;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/componentGuard.ts\n// module id = 29\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar targetDom_1 = require(\"./targetDom\");\r\nvar nodeModel_1 = require(\"./nodeModel\");\r\nvar eventModel_1 = require(\"./eventModel\");\r\nvar moveModel_1 = require(\"./moveModel\");\r\nvar statusModel_1 = require(\"./statusModel\");\r\nvar mixins_1 = require(\"../mixins\");\r\n// dom操作\r\nvar DomAction = /** @class */ (function (_super) {\r\n    __extends(DomAction, _super);\r\n    function DomAction(selector) {\r\n        return _super.call(this, selector) || this;\r\n    }\r\n    return DomAction;\r\n}(targetDom_1.default));\r\nmixins_1.applyMixins(DomAction, [nodeModel_1.default, eventModel_1.default, moveModel_1.default, statusModel_1.default]);\r\nvar Dom = function (selector) {\r\n    var dom = new DomAction(selector);\r\n    return dom;\r\n};\r\nexports.default = Dom;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/index.ts\n// module id = 30\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * 公共方法\r\n */\r\nvar targetDom = /** @class */ (function () {\r\n    function targetDom(selector) {\r\n        this.elements = document.querySelectorAll(selector);\r\n        this.els = this._getEles(this.elements);\r\n    }\r\n    targetDom.prototype._getEles = function (nodes) {\r\n        if (nodes && nodes.length) {\r\n            return nodes;\r\n        }\r\n    };\r\n    /**\r\n     * 遍历dom节点\r\n     * @param nodes 节点\r\n     * @param fn 回调函数 val, index\r\n     */\r\n    targetDom.prototype.each = function (nodes, fn) {\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            fn(nodes[i], i);\r\n        }\r\n    };\r\n    return targetDom;\r\n}());\r\nexports.default = targetDom;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/targetDom.ts\n// module id = 31\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar targetDom_1 = require(\"./targetDom\");\r\nvar util_1 = require(\"../util\");\r\n// 操作dom节点\r\nvar nodeModel = /** @class */ (function (_super) {\r\n    __extends(nodeModel, _super);\r\n    function nodeModel(selector) {\r\n        return _super.call(this, selector) || this;\r\n    }\r\n    /**\r\n     * 设置，获取html\r\n     * @param str html值\r\n     */\r\n    nodeModel.prototype.html = function (str) {\r\n        if (str && util_1.default.type(str) != 'string') {\r\n            return;\r\n        }\r\n        if (!str) {\r\n            return this.els[0].innerHTML;\r\n        }\r\n        else {\r\n            this.each(this.els, function (val, index) {\r\n                val.innerHTML = str;\r\n            });\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * 设置，获取节点文本\r\n     * @param str 文本值\r\n     */\r\n    nodeModel.prototype.text = function (str) {\r\n        var e_1, _a;\r\n        if (str && util_1.default.type(str) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (arguments.length == 0) {\r\n                    return i.innerText || i.textContent;\r\n                }\r\n                else if (arguments.length == 1) {\r\n                    if (i.innerText) {\r\n                        i.innerText = str;\r\n                    }\r\n                    else {\r\n                        i.textContent = str;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        return this;\r\n    };\r\n    nodeModel.prototype.css = function (key, value) {\r\n        var e_2, _a;\r\n        if (key && util_1.default.type(key) != 'string') {\r\n            return;\r\n        }\r\n        if (value && util_1.default.type(value) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (arguments.length == 1) {\r\n                    return window.getComputedStyle(i, null)[key];\r\n                }\r\n                else if (arguments.length == 2) {\r\n                    i.style[key] = value;\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n    };\r\n    /**\r\n     * 获取，设置元素宽度\r\n     * @param str\r\n     */\r\n    nodeModel.prototype.width = function (str) {\r\n        var e_3, _a;\r\n        if (str && util_1.default.type(str) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (str) {\r\n                    i.style.width = str;\r\n                }\r\n                else {\r\n                    return i.offsetWidth;\r\n                }\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n    * 获取，设置元素高度\r\n    * @param str\r\n    */\r\n    nodeModel.prototype.height = function (str) {\r\n        var e_4, _a;\r\n        if (str && util_1.default.type(str) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (str) {\r\n                    i.style.height = str;\r\n                }\r\n                else {\r\n                    return i.offsetHeight;\r\n                }\r\n            }\r\n        }\r\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_4) throw e_4.error; }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 获取，设置节点的属性值\r\n     * @param attr 属性名\r\n     * @param value 属性值\r\n     */\r\n    nodeModel.prototype.attr = function (attr, value) {\r\n        var e_5, _a;\r\n        if (util_1.default.type(attr) != 'string') {\r\n            return;\r\n        }\r\n        if (value && util_1.default.type(value) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (arguments.length == 1) {\r\n                    if (i.hasAttribute(attr)) {\r\n                        return i.getAttribute(attr);\r\n                    }\r\n                }\r\n                else if (arguments.length == 2) {\r\n                    i.setAttribute(attr, value);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_5) throw e_5.error; }\r\n        }\r\n    };\r\n    /**\r\n     * 获取，设置节点的value值\r\n     * @param str value值\r\n     */\r\n    nodeModel.prototype.val = function (str) {\r\n        var e_6, _a;\r\n        if (str && util_1.default.type(str) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (arguments.length == 1) {\r\n                    var oldStr = i.getAttribute('value');\r\n                    i.setAttribute(oldStr, str);\r\n                }\r\n                else if (arguments.length == 0) {\r\n                    if (i.nodeName.match(/INPUT|TEXTAREA|SELECT|RADIO|CHECKBOX/)) {\r\n                        return i.value;\r\n                    }\r\n                    return i.getAttribute('value');\r\n                }\r\n            }\r\n        }\r\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_6) throw e_6.error; }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 给节点添加class\r\n     * @param name\r\n     */\r\n    nodeModel.prototype.addClass = function (name) {\r\n        var e_7, _a;\r\n        if (name && util_1.default.type(name) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                i.classList.add(name);\r\n            }\r\n        }\r\n        catch (e_7_1) { e_7 = { error: e_7_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_7) throw e_7.error; }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 删除节点的class\r\n     * @param name\r\n     */\r\n    nodeModel.prototype.removeClass = function (name) {\r\n        var e_8, _a;\r\n        if (name && util_1.default.type(name) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                i.classList.remove(name);\r\n            }\r\n        }\r\n        catch (e_8_1) { e_8 = { error: e_8_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_8) throw e_8.error; }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 切换class\r\n     */\r\n    nodeModel.prototype.toggleClass = function (name) {\r\n        var e_9, _a;\r\n        if (name && util_1.default.type(name) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (i.classList.toggle(name)) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        catch (e_9_1) { e_9 = { error: e_9_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_9) throw e_9.error; }\r\n        }\r\n    };\r\n    return nodeModel;\r\n}(targetDom_1.default));\r\nexports.default = nodeModel;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/nodeModel.ts\n// module id = 32\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar targetDom_1 = require(\"./targetDom\");\r\nvar util_1 = require(\"../util\");\r\n// 事件的操作\r\nvar eventModel = /** @class */ (function (_super) {\r\n    __extends(eventModel, _super);\r\n    function eventModel(selector) {\r\n        return _super.call(this, selector) || this;\r\n    }\r\n    // 事件绑定\r\n    eventModel.prototype.on = function (eventType, fn) {\r\n        this.each(this.els, function (val, index) {\r\n            val.addEventListener(eventType, fn, false);\r\n        });\r\n    };\r\n    // 解除事件绑定\r\n    eventModel.prototype.off = function (eventType, fn) {\r\n        this.each(this.els, function (val, index) {\r\n            val.removeEventListener(eventType, fn, false);\r\n        });\r\n    };\r\n    // 鼠标移入移除\r\n    eventModel.prototype.hover = function (hover, out) {\r\n        var e_1, _a;\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (util_1.default.type(hover) == 'function') {\r\n                    i.addEventListener('mouseover', hover, false);\r\n                }\r\n                else {\r\n                    throw new Error('hover方法：没有传递回调函数');\r\n                }\r\n                if (util_1.default.type(out) == 'function') {\r\n                    i.addEventListener('mouseout', hover, false);\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        return this;\r\n    };\r\n    // 点击事件\r\n    eventModel.prototype.click = function (fn) {\r\n        var e_2, _a;\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (util_1.default.type(fn) == 'function') {\r\n                    i.addEventListener('click', fn, false);\r\n                }\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n        return this;\r\n    };\r\n    //设置点击切换方法\r\n    eventModel.prototype.toggle = function () {\r\n        var e_3, _a;\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                (function (element, args) {\r\n                    var count = 0;\r\n                    element.addEventListener('click', function () {\r\n                        args[count++ % args.length].call(this);\r\n                    }, false);\r\n                })(i, arguments);\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n        return this;\r\n    };\r\n    //窗口滚动事件\r\n    eventModel.prototype.scroll = function (fn) {\r\n        var e_4, _a;\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (util_1.default.type(fn) == 'function') {\r\n                    i.addEventListener('scroll', fn, false);\r\n                }\r\n            }\r\n        }\r\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_4) throw e_4.error; }\r\n        }\r\n        return this;\r\n    };\r\n    eventModel.prototype.resize = function (fn) {\r\n        var e_5, _a;\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                var offsetLeft = i.offsetLeft;\r\n                var offsetWidth = i.offsetWidth;\r\n                var offsetTop = i.offsetTop;\r\n                var offsetHeight = i.offsetHeight;\r\n                window.onresize = function () {\r\n                    fn();\r\n                    if (offsetLeft >= util_1.default.page().width - offsetWidth) {\r\n                        offsetLeft = util_1.default.page().width - offsetWidth;\r\n                    }\r\n                    if (offsetTop >= util_1.default.page().height - offsetHeight) {\r\n                        offsetTop = util_1.default.page().height - offsetHeight;\r\n                    }\r\n                };\r\n            }\r\n        }\r\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_5) throw e_5.error; }\r\n        }\r\n        return this;\r\n    };\r\n    return eventModel;\r\n}(targetDom_1.default));\r\nexports.default = eventModel;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/eventModel.ts\n// module id = 33\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar targetDom_1 = require(\"./targetDom\");\r\nvar moveModel = /** @class */ (function (_super) {\r\n    __extends(moveModel, _super);\r\n    function moveModel(selector) {\r\n        return _super.call(this, selector) || this;\r\n    }\r\n    moveModel.prototype.show = function (delay) {\r\n        var e_1, _a, e_2, _b;\r\n        if (delay && typeof delay == 'number') {\r\n            var _loop_1 = function (i) {\r\n                setTimeout(function () {\r\n                    i.style.display = 'none';\r\n                }, delay || 500);\r\n            };\r\n            try {\r\n                for (var _c = __values(this.els), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                    var i = _d.value;\r\n                    _loop_1(i);\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        }\r\n        else if (!delay) {\r\n            try {\r\n                for (var _e = __values(this.els), _f = _e.next(); !_f.done; _f = _e.next()) {\r\n                    var i = _f.value;\r\n                    i.style.display = 'block';\r\n                }\r\n            }\r\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\r\n                }\r\n                finally { if (e_2) throw e_2.error; }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    moveModel.prototype.hide = function (delay) {\r\n        var e_3, _a, e_4, _b;\r\n        if (delay && typeof delay == 'number') {\r\n            var _loop_2 = function (i) {\r\n                setTimeout(function () {\r\n                    i.style.display = 'block';\r\n                }, delay || 500);\r\n            };\r\n            try {\r\n                for (var _c = __values(this.els), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                    var i = _d.value;\r\n                    _loop_2(i);\r\n                }\r\n            }\r\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n                }\r\n                finally { if (e_3) throw e_3.error; }\r\n            }\r\n        }\r\n        else if (!delay) {\r\n            try {\r\n                for (var _e = __values(this.els), _f = _e.next(); !_f.done; _f = _e.next()) {\r\n                    var i = _f.value;\r\n                    i.style.display = 'none';\r\n                }\r\n            }\r\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\r\n                }\r\n                finally { if (e_4) throw e_4.error; }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    return moveModel;\r\n}(targetDom_1.default));\r\nexports.default = moveModel;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/moveModel.ts\n// module id = 34\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar targetDom_1 = require(\"./targetDom\");\r\nvar util_1 = require(\"../util\");\r\n// 操作dom节点\r\nvar statusModel = /** @class */ (function (_super) {\r\n    __extends(statusModel, _super);\r\n    function statusModel(selector) {\r\n        return _super.call(this, selector) || this;\r\n    }\r\n    // 判断节点是否拥有属性\r\n    statusModel.prototype.hasAttrs = function () {\r\n        var e_1, _a;\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (i.hasAttributes()) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    /**\r\n     * 判断节点是否有某个属性\r\n     * @param attr 属性名\r\n     */\r\n    statusModel.prototype.hasAttr = function (attr) {\r\n        var e_2, _a;\r\n        if (attr && util_1.default.type(attr) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (i.hasAttribute(attr)) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n    };\r\n    /**\r\n     * 判断节点是否有某个class\r\n     * @param name class名称\r\n     */\r\n    statusModel.prototype.hasClass = function (name) {\r\n        var e_3, _a;\r\n        if (name && util_1.default.type(name) != 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            for (var _b = __values(this.els), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var i = _c.value;\r\n                if (i.classList.contains(name)) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n    };\r\n    return statusModel;\r\n}(targetDom_1.default));\r\nexports.default = statusModel;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/statusModel.ts\n// module id = 35\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Cookie = {\r\n    // 判断cookie是否可用\r\n    support: function () {\r\n        if (!(document.cookie || navigator.cookieEnabled))\r\n            return false;\r\n        return true;\r\n    },\r\n    // 添加cookie\r\n    set: function (name, value, config) {\r\n        // config = {hours, path, domain, secure}\r\n        var data = name + \"=\" + encodeURIComponent(value);\r\n        console.log(123);\r\n        if (config && config.hours != undefined) {\r\n            var d = new Date();\r\n            d.setHours(d.getHours() + config.hours);\r\n            data += \"; expires=\" + d.toUTCString();\r\n        }\r\n        data += (config && config.path) ? (\"; path=\" + config.path) : \"\";\r\n        data += (config && config.domain) ? (\"; domain=\" + config.domain) : \"\";\r\n        data += (config && config.secure) ? (\"; secure=\" + config.secure) : \"\";\r\n        document.cookie = data;\r\n    },\r\n    // 查询 cookie\r\n    get: function (name) {\r\n        var len = arguments.length;\r\n        if (len == 0) {\r\n            var cs = document.cookie, arr = [], arr2 = [], obj = {};\r\n            arr = cs.split(';');\r\n            // console.log(arr);\r\n            for (var i = 0; i < arr.length; i++) {\r\n                var a = arr[i].split('=');\r\n                var a1 = [a[0].trim(), decodeURIComponent(a[1])];\r\n                arr2.push(a1);\r\n            }\r\n            return JSON.stringify(arr2);\r\n        }\r\n        else if (len == 1) {\r\n            var reg = eval(\"/(?:^|;\\\\s*)\" + name + \"=([^=]+)(?:;|$)/\");\r\n            return reg.test(document.cookie) ? decodeURIComponent(RegExp.$1) : \"\";\r\n        }\r\n    },\r\n    // 删除 cookie\r\n    remove: function (name, path) {\r\n        if (arguments.length == 0) {\r\n            var all = this.get();\r\n            for (var i = 0; i < all.length; i++) {\r\n                this.set(all[i][0], \"\", -1);\r\n            }\r\n        }\r\n        this.set(name, path || '', { \"hours\": -1 });\r\n    }\r\n};\r\nexports.default = Cookie;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/cache/cookie.ts\n// module id = 36\n// module chunks = 0"],"sourceRoot":""}