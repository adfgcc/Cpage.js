{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/bundle.js","webpack:///webpack/bootstrap f27ae950ade394ee3c04","webpack:///./src/index.ts","webpack:///./src/util/index.ts","webpack:///./src/log.ts","webpack:///./src/Dom/targetDom.ts","webpack:///./src/store/index.ts","webpack:///./src/util/HandelEventer.ts","webpack:///./src/config/ast_config.ts","webpack:///./src/config/lexer_config.ts","webpack:///./src/mixins.ts","webpack:///./src/parse/index.ts","webpack:///./src/store/loader/index.ts","webpack:///./src/Dom/eventModel.ts","webpack:///./src/Dom/index.ts","webpack:///./src/Dom/moveModel.ts","webpack:///./src/Dom/nodeModel.ts","webpack:///./src/Dom/statusModel.ts","webpack:///./src/cache/cookie.ts","webpack:///./src/compile/HandelData.ts","webpack:///./src/compile/HandelEvent.ts","webpack:///./src/compile/componentGuard.ts","webpack:///./src/compile/index.ts","webpack:///./src/compile/parseTpl.ts","webpack:///./src/compile/render.ts","webpack:///./src/config/unSafeStr.ts","webpack:///./src/dom/dom.ts","webpack:///./src/http/index.ts","webpack:///./src/http/parseHttp.ts","webpack:///./src/parse/astBuilder.ts","webpack:///./src/parse/astCompile.ts","webpack:///./src/parse/lexer.ts","webpack:///./src/parse/parser.ts","webpack:///./src/pipe/pipe.ts","webpack:///./src/router/index.ts","webpack:///./src/store/injector/index.ts","webpack:///./src/util/handelCoding.ts","webpack:///./src/util/handelType.ts","webpack:///./src/util/util.ts"],"names":["root","factory","exports","module","define","amd","a","i","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","compile_1","Component","Dom_1","Dom","default","store_1","Store","cookie_1","Cookie","window","Cpage","util_1","Util","util","log","str","console","info","warn","error","Error","targetDom","selector","elements","document","querySelectorAll","els","_getEles","prototype","nodes","length","each","fn","loader_1","injector_1","loader","inject","moduleName","app","ins","data","key","val","has","get","provider","obj","service","HandelEventer","eventList","trigger","name","msg","Array","shift","arguments","fns","apply","listen","push","remove","_fn","splice","Eventer","dataType","1","2","3","4","5","6","7","8","9","10","11","12","13","ast_init","type","body","ast_constant","undefined","ast_array","ast_object","ast_json","ast_identifier","ast_this","ast_member","object","property","computed","ast_function","callee","pipe","Boolean","ast_assignment","left","right","ast_unary","operator","ast_binary","ast_logical","ast_teranry","boolean_expression","true_value","error_value","SPECIALS","'","\"","&","\\","n","r","t","b","f","LETTER","null","true","false","OPERATORS","+","!","-","*","%","/","=",">","<",">=","<=","==","===","!=","!==","&&","||","|","mixins","otherClass","_i","targetClass","assign","concat","applyMixins","derivedCtor","baseCtors","forEach","baseCtor","getOwnPropertyNames","defaultFilter","array","filterExp","predicateFn","createPredicateFn","filter","exp","item","deepCompareValues","compareValues","source","target","toLowerCase","includes","compare","startsWith","substring","arr","objVal","some","lexer_1","parser_1","pipe_1","ps","Parse","pipes","register","parse","expression","lexer","parser","oneTime","charAt","parseFn","constant","$$handelWatch","that","constantHandelWatch","literal","oneTimeLiteralHandelWatch","oneTimeHandelWatch","inputs","inputsHandelWatch","state","listenerFn","valueEq","watchFn","cancel","$watch","newVal","oldVal","lastVal","$afterDigest","newParse","$log","moduleNames","Loader","requires","clear","configFn","$$set","$$get","invokeQueue","configQueue","invokeFn","prefix","arrProp","queue","moduleObj","config","run","_runQueue","_invokeQueue","_configQueue","hasOwnProperty","__extends","extendStatics","setPrototypeOf","__proto__","d","__","constructor","create","targetDom_1","eventModel","_super","on","eventType","index","addEventListener","off","removeEventListener","hover","out","_a","click","toggle","element","args","count","scroll","resize","offsetLeft","offsetWidth","offsetTop","offsetHeight","onresize","page","width","height","nodeModel_1","eventModel_1","moveModel_1","statusModel_1","mixins_1","DomAction","dom","moveModel","show","delay","_loop_1","setTimeout","style","display","_b","_c","hide","_loop_2","nodeModel","html","innerHTML","text","innerText","textContent","css","getComputedStyle","attr","hasAttribute","getAttribute","setAttribute","oldStr","nodeName","match","addClass","classList","add","removeClass","toggleClass","statusModel","hasAttrs","hasAttributes","hasAttr","hasClass","contains","support","cookie","navigator","cookieEnabled","set","encodeURIComponent","hours","Date","setHours","getHours","toUTCString","path","domain","secure","len","cs","arr2","split","a1","trim","decodeURIComponent","JSON","stringify","reg","eval","test","RegExp","$1","all","HandelEventer_1","HandelData","token","props","componentStatus","$data","oldData","deepClone","newData","clone","which","old","new","Data","HandelEvent","handelEvent","componentGuard","component","components","styleId","querySelector","template","templateId","beforeRender","render","render_1","componentGuard_1","store","ensureOneInvokeComponent","res","rootName","names","CPage","CList","bootstrap","componetList","isRoot","classToJson","componentJson","rootComponent","v","componentToDom","router","check","directive","conf","guard","componentInfo","defineProperties","writable","$el","$props","version","tpl","parseTpl","ParseTpl","parse_1","combineData","isEmpty","startIndex","endIndex","expFn","self","parts","indexOf","reduce","prev","cur","expectNullUndefined","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","verb","op","TypeError","_","y","label","ops","pop","trys","g","sent","throw","return","Symbol","iterator","dom_1","parseTpl_1","HandelData_1","HandelEvent_1","index_1","http_1","router_1","PREFIX_DIRECTIVE","ID","renderComponents","CObj","listToObj","cRefList","showList","ifList","ifTpl","cHtmlList","cForList","cRepeatList","cViewList","dataId","parseInt","now","componentToken","componentNames","getComponentNameList","componentAttrs","oneRootComponent","$router","$routerCache","handelComponent","invokeLooopNodes","invokeLoopComponents","invokeRouter","node","loopNodes","rootTpl","outerHTML","loopComponents","handelRouter","handelView","q","ele","cache","handelEventListener","firstChild","insertAdjacentHTML","_cameCase","childNodes","readyState","hash","location","pathIndex","getNowRouter","substr","nowPath","newURL","nowRouter","wrapDom","theTpl","hasHtml","hasHtmlUrl","templateUrl","theStyle","handelString","handelId","handelUrl","url","styleUrl","_this","nodeType","getComponent","extend","addDirectiveList","j","attributes","attrName","normalizeDirective","displayStatus","boolToDisplay","ifInfo","fatherData","componentArr","componentName","handelCC","before","handelDataChange","handelBeforeRender","handelAfterRender","compareChildComponentAndInjectComponents","$http","$event","$refs","status","invokeAfterRender","step1","step2","step3","step4","step5","step6","step7","addStyle","renderOnce","handelCforDirective","handelOtherDirective","handelRenderFn","loopChildComponent","handelClickDirective","newNode","newProps","combineAttrAndProps","getChangedData","loopCforToDom","loopIfToDom","loopHtmlToDom","currentRefs","rfs","findComponent","child","flag","attrArr","getAttr","newAttrArr","array_intersection","ev","dq","event","toString","parseNode","dataPos","dataPosition","updateData","dataChangeToDom","loopTextToDom","loopAttrToDom","textData","df","dp","originNode","parentNode","position","attrData","changeAttr","childChangePos","childChangePosText","chItem","changedComponent","changedOriginComponentProps","changedComponentData","changedPropKey","changedPropVal","changedComponentProps","combineChangedProps","changedOrginNode","changedOrginText","childChangePosAttr","isComponent","newAttr","handelIf","reRender","currentRepeat","rVal","re","match2","itemsExp","items","inComponent","removeDomExpectWhich","newn","cloneNode","innerComponents","el","insertAdjacentElement","currentIf","ifVal","cIf","ifDom","replaceChild","addComment","replaceComment","currentHtml","h","temp","parseName","isComponentData","regExp","exec","","(",")",".","[","]",">==","<==","?",":","nameIndex","prev1","prev2","prev3","next1","next2","next3","loopAttr","attrVal","isCs","loopText","loopTagNode","normalizedNodeName","getNodeName","cameCase","noOtherAttr","directiveIsMulit","mulit","componentLayer","sort","layer","cid","replace","PROPERTY","WINDOW","NODE","FUN","Function","bind","HandelDom","BOOLEAN_ATTRS","selected","BOOLEAN_ELEMENT","createDom","matchArr","pattern","elemName","createElement","div","tagName","wrap","getA","expectSome","bool","expectSomeAttr","createComment","createNodeIterator","NodeFilter","SHOW_COMMENT","nextNode","nodeValue","DOM","tag","appendStyle","inner","title","trimStr","newStyle","appendChild","addSelectorPrefix","stylesheet","styleSheets","cr","cssRules","selectorText","removeChild","watch","MutationObserver","WebKitMutationObserver","MozMutationObserver","observer","mu","childList","characterData","subtree","attributeOldValue","characterDataOldValue","observe","booleanAttr","parseHttp_1","Http","ajax","parseHttp","post","put","delete","http","httpType","promise","handel","response","statusText","xhr","XMLHttpRequest","open","onreadystatechange","responseType","setRequestHeader","send","AST","LEXER","ASTBuilder","tokens","ast","lex","init","pipeBuilder","expect","agency","consume","arrayBuilder","objectBuilder","exitFirst","identifier","identifierBuilder","constantBuilder","memberBuilder","closingTags","quote","assignmentBuilder","ternaryBuilder","unaryBuilder","ue","multiplicativeBuilder","additiveBuilder","relationalBuilder","equalityBuilder","andBuilder","orBuilder","safeProperty","K","safeObject","every","f2","getOwnPropertyDescriptor","safeFunction","fun","isUndefined","ast_config_1","ASTCompile","astBuilder","compileId","echo","compile","handelTree","constantExpr","pipePrefix","join","isLiteral","context","createNewElement","initCompile","metaCompile","arrayCompile","objectCompile","identifierCompile","thisCompile","memberCompile","functionCompile","assigmentCompile","unaryCompile","binaryCompile","logicalCompile","ternaryCompile","last","wrapString","map","arrJson","incrementId","conditionIsRight","hasProperty","concatCode","nonComputedMember","notExist","noComp","comp","computedMember","callContext","pipeCompile","leftCon","inStr","id2","k","arrayLike","cons","leftRight","lexer_config_1","Lexer","whichType","nextLeter","loopNumber","loopString","loopLetter","isWhiteSpace","pushObj","loopOperator","nextStr","number","isExponent","isNumber","Number","string","raw","letter","isLetter","str2","str3","op2","op3","ct","astBuilder_1","astCompile_1","Parser","astCompile","$pipeProvider","$provider","$get","$injector","Pipe","returnPipes","$inject","updateRouterConfig","params","Router","routers","_parseRouters","_getNowRouter","lastIndexOf","regexp","_pathToReg","ret","originalPath","keys","slash","option","optional","star","go","reflesh","back","history","FN_REG","SPACE_REG","COMMENTS_REG","Injector","strict","handelReturn","dataInjecter","invoke","injectAgency","handelCache","handeldepPath","depPath","cricle","local","annotate","slice","instantiate","fn2","instance","hasKey","dataCache","providerCache","arrayCompact","providerInjecter","loadedModules","Map","runQueue","listQueue","queues","inq","method","loadMobule","module_1","HandelCoding","condition","statement","uid","unshift","HandelType","[object Boolean]","[object Number]","[object String]","[object Function]","[object Array]","[object Date]","[object RegExp]","[object Undefined]","[object Null]","[object Object]","[object Map]","[object Set]","[object Symbol]","ch","handelType_1","handelCoding_1","isEqual","str1","areEqual","equalStatus","pt","cn","pn","isNaN","valueOf","alen","blen","o","ni","repeatObj","manyTime","repeat","everyScope","cb","scope","$children","eventName","listener","objToMap","mapToObj","es","exit","uArray","newArr","Set","arrayItem","arrayItem2","arrayLastItem","reverse","arraySplice","intersection","parseString","objKey","newObj","x","toUpperCase","date","year","getFullYear","month","getMonth","day","getDate","innerWidth","innerHeight","propertyObj","prototypeObj","entries","protoNames"],"mappings":"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","file":"./dist/bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar compile_1 = __webpack_require__(20);\r\n\texports.Component = compile_1.Component;\r\n\tvar Dom_1 = __webpack_require__(12);\r\n\texports.Dom = Dom_1.default;\r\n\tvar store_1 = __webpack_require__(4);\r\n\tvar Store = new store_1.default('user');\r\n\texports.Store = Store;\r\n\tvar cookie_1 = __webpack_require__(16);\r\n\texports.Cookie = cookie_1.default;\r\n\texports.default = compile_1.default;\r\n\twindow.Cpage = new compile_1.default();\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar util_1 = __webpack_require__(36);\r\n\tvar Util = new util_1.util();\r\n\texports.default = Util;\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tfunction log(str) {\r\n\t    console.log(str);\r\n\t}\r\n\texports.log = log;\r\n\tfunction info(str) {\r\n\t    console.log(str);\r\n\t}\r\n\texports.info = info;\r\n\tfunction warn(str) {\r\n\t    console.log(str);\r\n\t}\r\n\texports.warn = warn;\r\n\tfunction error(str) {\r\n\t    throw new Error(str);\r\n\t}\r\n\texports.error = error;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t/**\r\n\t * 公共方法\r\n\t */\r\n\tvar targetDom = /** @class */ (function () {\r\n\t    function targetDom(selector) {\r\n\t        this.elements = document.querySelectorAll(selector);\r\n\t        this.els = this._getEles(this.elements);\r\n\t    }\r\n\t    targetDom.prototype._getEles = function (nodes) {\r\n\t        if (nodes && nodes.length) {\r\n\t            return nodes;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 遍历dom节点\r\n\t     * @param nodes 节点\r\n\t     * @param fn 回调函数 val, index\r\n\t     */\r\n\t    targetDom.prototype.each = function (nodes, fn) {\r\n\t        for (var i = 0; i < nodes.length; i++) {\r\n\t            fn(nodes[i], i);\r\n\t        }\r\n\t    };\r\n\t    return targetDom;\r\n\t}());\r\n\texports.default = targetDom;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar loader_1 = __webpack_require__(10);\r\n\tvar injector_1 = __webpack_require__(33);\r\n\tvar loader = new loader_1.default();\r\n\tvar inject = new injector_1.default();\r\n\t/**\r\n\t * 数据存储解析服务\r\n\t */\r\n\tvar Store = /** @class */ (function () {\r\n\t    function Store(moduleName) {\r\n\t        if (moduleName === void 0) { moduleName = 'Cpage'; }\r\n\t        this.app = loader.module(moduleName, []);\r\n\t        this.ins = function () {\r\n\t            return inject.inject([moduleName]);\r\n\t        };\r\n\t    }\r\n\t    /**\r\n\t     * 存储数据\r\n\t     * @param key\r\n\t     * @param val\r\n\t     */\r\n\t    Store.prototype.data = function (key, val) {\r\n\t        this.app.data(key, val);\r\n\t    };\r\n\t    /**\r\n\t     * 是否有key这个变量\r\n\t     * @param key\r\n\t     */\r\n\t    Store.prototype.has = function (key) {\r\n\t        return this.ins().has(key);\r\n\t    };\r\n\t    /**\r\n\t     * 获取数据\r\n\t     * @param key\r\n\t     */\r\n\t    Store.prototype.get = function (key) {\r\n\t        return this.ins().get(key);\r\n\t    };\r\n\t    /**\r\n\t     * provider函数\r\n\t     * @param key\r\n\t     * @param obj { $get: function(){} }\r\n\t     */\r\n\t    Store.prototype.provider = function (key, obj) {\r\n\t        this.app.provider(key, obj);\r\n\t    };\r\n\t    /**\r\n\t     * factory函数\r\n\t     * @param key\r\n\t     * @param fn 需要返回值\r\n\t     */\r\n\t    Store.prototype.factory = function (key, fn) {\r\n\t        this.app.factory(key, fn);\r\n\t    };\r\n\t    /**\r\n\t     * service 函数\r\n\t     * @param key\r\n\t     * @param fn\r\n\t     */\r\n\t    Store.prototype.service = function (key, fn) {\r\n\t        this.app.service(key, fn);\r\n\t    };\r\n\t    return Store;\r\n\t}());\r\n\texports.default = Store;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar HandelEventer = /** @class */ (function () {\r\n\t    function HandelEventer() {\r\n\t        this.eventList = {};\r\n\t    }\r\n\t    /**\r\n\t     * 触发事件\r\n\t     * @param name\r\n\t     * @param msg\r\n\t     */\r\n\t    HandelEventer.prototype.trigger = function (name, msg) {\r\n\t        var key = Array.prototype.shift.call(arguments);\r\n\t        var fns = this.eventList[key];\r\n\t        if (!fns || fns.length === 0) {\r\n\t            return false;\r\n\t        }\r\n\t        ;\r\n\t        for (var i = 0, fn; fn = fns[i++];) {\r\n\t            fn.apply(this, arguments);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 监听事件\r\n\t     * @param name\r\n\t     * @param fn\r\n\t     */\r\n\t    HandelEventer.prototype.listen = function (name, fn) {\r\n\t        if (!this.eventList[name]) {\r\n\t            this.eventList[name] = [];\r\n\t        }\r\n\t        ;\r\n\t        this.eventList[name].push(fn);\r\n\t    };\r\n\t    HandelEventer.prototype.remove = function (key, fn) {\r\n\t        var fns = this.eventList[key];\r\n\t        // key对应的消息没有被人订阅\r\n\t        if (!fns) {\r\n\t            return false;\r\n\t        }\r\n\t        // 没有传入fn(具体的回调函数), 表示取消key对应的所有订阅\r\n\t        if (!fn) {\r\n\t            fns && (fns.length = 0);\r\n\t        }\r\n\t        else {\r\n\t            // 反向遍历\r\n\t            for (var i = fns.length - 1, _fn = fns[i]; i >= 0; i--) {\r\n\t                if (_fn === fn) {\r\n\t                    // 删除订阅回调函数\r\n\t                    fns.splice(i, 1);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    return HandelEventer;\r\n\t}());\r\n\tvar Eventer = new HandelEventer();\r\n\texports.default = Eventer;\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t//数据类型\r\n\texports.dataType = {\r\n\t    '1': 'ASTBuilder.Init',\r\n\t    '2': 'ASTBuilder.MetaData',\r\n\t    '3': 'ASTBuilder.Array',\r\n\t    '4': 'ASTBuilder.Object',\r\n\t    '5': 'ASTBuilder.Identifier',\r\n\t    '6': 'ASTBuilder.This',\r\n\t    '7': 'ASTBuilder.Member',\r\n\t    '8': 'ASTBuilder.Function',\r\n\t    '9': 'ASTBuilder.Assignment',\r\n\t    '10': 'ASTBuilder.Unary',\r\n\t    '11': 'ASTBuilder.Binary',\r\n\t    '12': 'ASTBuilder.Logical',\r\n\t    '13': 'ASTBuilder.Teranry'\r\n\t};\r\n\t// astBuilder的词法解析匹配模式\r\n\texports.ast_init = {\r\n\t    type: exports.dataType['1'],\r\n\t    body: {}\r\n\t};\r\n\t//常量\r\n\texports.ast_constant = {\r\n\t    type: exports.dataType['2'],\r\n\t    value: undefined\r\n\t};\r\n\t//数组\r\n\texports.ast_array = {\r\n\t    type: exports.dataType['3'],\r\n\t    value: undefined\r\n\t};\r\n\t/**\r\n\t * 对象\r\n\t * {\"type\":\"ASTBuilder.Object\",\"value\":[{\"type\":\"ASTBuilder.Identifier\",\"key\":{\"type\":\"ASTBuilder.MetaData\",\"value\":\"id\"},\"value\":{\"type\"\r\n\t:\"ASTBuilder.MetaData\",\"value\":1}}]}\r\n\t */\r\n\texports.ast_object = {\r\n\t    type: exports.dataType['4'],\r\n\t    value: undefined //数组，指向ast_json\r\n\t};\r\n\texports.ast_json = {\r\n\t    type: exports.dataType['5'],\r\n\t    key: undefined,\r\n\t    value: undefined\r\n\t};\r\n\t// 标识符\r\n\texports.ast_identifier = {\r\n\t    type: exports.dataType['5'],\r\n\t    value: undefined\r\n\t};\r\n\t// this\r\n\texports.ast_this = {\r\n\t    type: exports.dataType['6']\r\n\t};\r\n\t// 对象属性表达式，a.b a['b']\r\n\texports.ast_member = {\r\n\t    type: exports.dataType['7'],\r\n\t    object: undefined,\r\n\t    property: undefined,\r\n\t    computed: undefined\r\n\t};\r\n\t// 函数表达式\r\n\texports.ast_function = {\r\n\t    type: exports.dataType['8'],\r\n\t    callee: undefined,\r\n\t    arguments: undefined,\r\n\t    pipe: Boolean\r\n\t};\r\n\t// 赋值表达式\r\n\texports.ast_assignment = {\r\n\t    type: exports.dataType['9'],\r\n\t    left: undefined,\r\n\t    right: undefined\r\n\t};\r\n\t// 一元运算符\r\n\texports.ast_unary = {\r\n\t    type: exports.dataType['10'],\r\n\t    operator: '+',\r\n\t    value: undefined\r\n\t};\r\n\t// 二元运算符\r\n\texports.ast_binary = {\r\n\t    type: exports.dataType['11'],\r\n\t    left: undefined,\r\n\t    operator: undefined,\r\n\t    right: undefined\r\n\t};\r\n\t// 逻辑运算符\r\n\texports.ast_logical = {\r\n\t    type: exports.dataType['12'],\r\n\t    left: undefined,\r\n\t    operator: undefined,\r\n\t    right: undefined\r\n\t};\r\n\t// 三元运算符\r\n\texports.ast_teranry = {\r\n\t    type: exports.dataType['13'],\r\n\t    boolean_expression: undefined,\r\n\t    true_value: undefined,\r\n\t    error_value: undefined\r\n\t};\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t// js特殊字符\r\n\tvar SPECIALS = {\r\n\t    '\\'': '\\'',\r\n\t    '\\\"': '\\\"',\r\n\t    '&': '\\&',\r\n\t    '\\\\': '\\\\',\r\n\t    'n': '\\n',\r\n\t    'r': '\\r',\r\n\t    't': '\\t',\r\n\t    'b': '\\b',\r\n\t    'f': '\\f',\r\n\t};\r\n\texports.SPECIALS = SPECIALS;\r\n\t//词法解析中关于字符的配置对象\r\n\tvar LETTER = {\r\n\t    'null': null,\r\n\t    'true': true,\r\n\t    'false': false,\r\n\t    'undefined': undefined,\r\n\t    'this': undefined\r\n\t};\r\n\texports.LETTER = LETTER;\r\n\t//运算符\r\n\tvar OPERATORS = {\r\n\t    '+': true,\r\n\t    '!': true,\r\n\t    '-': true,\r\n\t    '*': true,\r\n\t    '%': true,\r\n\t    '/': true,\r\n\t    '=': true,\r\n\t    '>': true,\r\n\t    '<': true,\r\n\t    '>=': true,\r\n\t    '<=': true,\r\n\t    '==': true,\r\n\t    '===': true,\r\n\t    '!=': true,\r\n\t    '!==': true,\r\n\t    '&&': true,\r\n\t    '||': true,\r\n\t    '|': true\r\n\t};\r\n\texports.OPERATORS = OPERATORS;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tfunction mixins() {\r\n\t    var otherClass = [];\r\n\t    for (var _i = 0; _i < arguments.length; _i++) {\r\n\t        otherClass[_i] = arguments[_i];\r\n\t    }\r\n\t    return function (targetClass) {\r\n\t        Object.assign.apply(Object, [targetClass.prototype].concat(otherClass));\r\n\t    };\r\n\t}\r\n\texports.mixins = mixins;\r\n\t/**\r\n\t * 此方法用于实现class多继承\r\n\t * @param derivedCtor\r\n\t * @param baseCtors\r\n\t */\r\n\tfunction applyMixins(derivedCtor, baseCtors) {\r\n\t    baseCtors.forEach(function (baseCtor) {\r\n\t        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {\r\n\t            derivedCtor.prototype[name] = baseCtor.prototype[name];\r\n\t        });\r\n\t    });\r\n\t}\r\n\texports.applyMixins = applyMixins;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar lexer_1 = __webpack_require__(29);\r\n\tvar parser_1 = __webpack_require__(30);\r\n\tvar pipe_1 = __webpack_require__(31);\r\n\tvar ps = new pipe_1.default();\r\n\tvar util_1 = __webpack_require__(1);\r\n\tvar Parse = /** @class */ (function () {\r\n\t    function Parse() {\r\n\t        this.pipes = ps.pipes;\r\n\t    }\r\n\t    /**\r\n\t     * 注册管道\r\n\t     * @param name\r\n\t     * @param factory\r\n\t     */\r\n\t    Parse.prototype.register = function (name, factory) {\r\n\t        ps.register(name, factory);\r\n\t        return this;\r\n\t    };\r\n\t    Parse.prototype.pipe = function (name) {\r\n\t        return ps.pipe(name);\r\n\t    };\r\n\t    /**\r\n\t     * 词法解析\r\n\t     * @param str\r\n\t     */\r\n\t    Parse.prototype.parse = function (str) {\r\n\t        var that = this;\r\n\t        function parse(expression, pipes) {\r\n\t            switch (util_1.default.type(expression)) {\r\n\t                case 'string':\r\n\t                    var lexer = new lexer_1.default();\r\n\t                    var parser = new parser_1.default(lexer, pipes);\r\n\t                    var oneTime = false;\r\n\t                    //单次检测\r\n\t                    if (expression.charAt(0) == ':' && expression.charAt(1) == ':') {\r\n\t                        oneTime = true;\r\n\t                        expression = expression.substring(2);\r\n\t                    }\r\n\t                    var parseFn = parser.parse(expression);\r\n\t                    if (parseFn.constant) {\r\n\t                        parseFn.$$handelWatch = that.constantHandelWatch;\r\n\t                    }\r\n\t                    if (oneTime) {\r\n\t                        parseFn.$$handelWatch = parseFn.literal ? that.oneTimeLiteralHandelWatch : that.oneTimeHandelWatch;\r\n\t                    }\r\n\t                    if (parseFn.inputs) {\r\n\t                        parseFn.$$handelWatch = that.inputsHandelWatch;\r\n\t                    }\r\n\t                    return parseFn;\r\n\t                case 'function':\r\n\t                    return expression;\r\n\t            }\r\n\t        }\r\n\t        return parse(str, this.pipes);\r\n\t    };\r\n\t    /**\r\n\t     * 处理参数为常量的状况\r\n\t     * @param state\r\n\t     * @param listenerFn\r\n\t     * @param valueEq\r\n\t     * @param watchFn\r\n\t     */\r\n\t    Parse.prototype.constantHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n\t        var cancel = state.$watch(function () {\r\n\t            return watchFn(state);\r\n\t        }, function (newVal, oldVal, state) {\r\n\t            if (util_1.default.type(listenerFn) == 'function') {\r\n\t                listenerFn.apply(this, arguments);\r\n\t            }\r\n\t        }, valueEq);\r\n\t        return cancel;\r\n\t    };\r\n\t    /**\r\n\t     * 处理单次检测问题\r\n\t     * @param state\r\n\t     * @param listenerFn\r\n\t     * @param valueEq\r\n\t     * @param watchFn\r\n\t     */\r\n\t    Parse.prototype.oneTimeHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n\t        var lastVal;\r\n\t        var cancel = state.$watch(function () {\r\n\t            return watchFn(state);\r\n\t        }, function (newVal, oldVal, state) {\r\n\t            lastVal = newVal;\r\n\t            if (util_1.default.type(listenerFn) == 'function') {\r\n\t                listenerFn.apply(this, arguments);\r\n\t            }\r\n\t            if (util_1.default.type(newVal) != 'undefined') {\r\n\t                state.$afterDigest(function () {\r\n\t                    if (util_1.default.type(lastVal) != 'undefined') {\r\n\t                        cancel();\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        }, valueEq);\r\n\t        return cancel;\r\n\t    };\r\n\t    /**\r\n\t     * 处理数组或对象的变量问题\r\n\t     * @param state\r\n\t     * @param listenerFn\r\n\t     * @param valueEq\r\n\t     * @param watchFn\r\n\t     */\r\n\t    Parse.prototype.oneTimeLiteralHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n\t        var lastVal;\r\n\t        var cancel = state.$watch(function () {\r\n\t            return watchFn(state);\r\n\t        }, function (newVal, oldVal, state) {\r\n\t            lastVal = newVal;\r\n\t            if (util_1.default.type(listenerFn) == 'function') {\r\n\t                listenerFn.apply(this, arguments);\r\n\t            }\r\n\t            if (util_1.default.type(newVal) != 'undefined') {\r\n\t                state.$afterDigest(function () {\r\n\t                    if (util_1.default.type(lastVal) != 'undefined') {\r\n\t                        cancel();\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        }, valueEq);\r\n\t        return cancel;\r\n\t    };\r\n\t    Parse.prototype.inputsHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n\t        var inputExpr = watchFn.inputs;\r\n\t        return state.$watch(function () {\r\n\t        }, listenerFn, valueEq);\r\n\t    };\r\n\t    return Parse;\r\n\t}());\r\n\tvar parse = new Parse();\r\n\texports.default = parse;\r\n\t// 默认管道函数--开始\r\n\tvar newParse = new Parse();\r\n\tnewParse.register('filter', defaultFilter);\r\n\tfunction defaultFilter() {\r\n\t    return function (array, filterExp) {\r\n\t        var predicateFn;\r\n\t        switch (util_1.default.type(filterExp)) {\r\n\t            case 'function':\r\n\t                predicateFn = filterExp;\r\n\t                break;\r\n\t            case 'string':\r\n\t            case 'number':\r\n\t            case 'boolean':\r\n\t            case 'null':\r\n\t            case 'undefined':\r\n\t            case 'object':\r\n\t                predicateFn = createPredicateFn(filterExp);\r\n\t                break;\r\n\t            default:\r\n\t                return array;\r\n\t        }\r\n\t        return array.filter(predicateFn);\r\n\t    };\r\n\t}\r\n\t// 如果pipe后面非函数表达式就生成一个\r\n\tfunction createPredicateFn(exp) {\r\n\t    // item指数组元素\r\n\t    return function predicateFn(item) {\r\n\t        return deepCompareValues(item, exp, compareValues);\r\n\t    };\r\n\t}\r\n\t// source值数组的元素，target值pipe表达式冒号后面的字符，pipe:\"a\"\r\n\tfunction compareValues(source, target) {\r\n\t    if (util_1.default.type(source) == 'null' || util_1.default.type(target) == 'null') {\r\n\t        return source === target;\r\n\t    }\r\n\t    // 不对undefined处理\r\n\t    if (util_1.default.type(source) == 'undefined')\r\n\t        return false;\r\n\t    source = ('' + source).toLowerCase();\r\n\t    target = ('' + target).toLowerCase();\r\n\t    return source.includes(target);\r\n\t}\r\n\t// 如果数组元素是对象进行深度比较\r\n\tfunction deepCompareValues(source, target, compare) {\r\n\t    if (util_1.default.type(target) == 'string' && target.startsWith('!')) {\r\n\t        return !deepCompareValues(source, target.substring(1), compare);\r\n\t    }\r\n\t    if (util_1.default.type(source) == 'object') {\r\n\t        if (util_1.default.type(target) == 'object') {\r\n\t            for (var i in target) {\r\n\t                return deepCompareValues(source[i], target[i], compare);\r\n\t            }\r\n\t        }\r\n\t        var arr = util_1.default.objVal(source);\r\n\t        return arr.some(function (val) {\r\n\t            return deepCompareValues(val, target, compare);\r\n\t        });\r\n\t    }\r\n\t    return compare(source, target);\r\n\t}\r\n\t// 注册管道函数--结束\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar $log = __webpack_require__(2);\r\n\tvar moduleNames = {};\r\n\tvar Loader = /** @class */ (function () {\r\n\t    function Loader() {\r\n\t        this.modules = {\r\n\t            name: '',\r\n\t            requires: []\r\n\t        };\r\n\t    }\r\n\t    Loader.prototype.clear = function () {\r\n\t        this.modules = {};\r\n\t    };\r\n\t    /**\r\n\t     * 模块\r\n\t     * @param name 模块名称\r\n\t     * @param requires 模块的依赖项\r\n\t     * @param configFn 配置函数\r\n\t     */\r\n\t    Loader.prototype.module = function (name, requires, configFn) {\r\n\t        var modules = {};\r\n\t        if (requires) {\r\n\t            this.modules = this.$$set(name, requires, modules, configFn);\r\n\t        }\r\n\t        else {\r\n\t            this.modules = this.$$get(name, modules);\r\n\t        }\r\n\t        return this.modules;\r\n\t    };\r\n\t    /**\r\n\t     * 生成module\r\n\t     * @param name\r\n\t     * @param requires\r\n\t     * @param configFn\r\n\t     */\r\n\t    Loader.prototype.$$set = function (name, requires, modules, configFn) {\r\n\t        if (name == 'hasOwnProperty')\r\n\t            $log.error('hasOwnProperty不能用于键名');\r\n\t        var invokeQueue = [];\r\n\t        var configQueue = [];\r\n\t        /**\r\n\t         * 引用函数\r\n\t         * @param service 服务名称\r\n\t         * @param prefix data,provider\r\n\t         * @param arrProp 数组属性\r\n\t         * @param queue 引用队列\r\n\t         */\r\n\t        var invokeFn = function (service, prefix, arrProp, queue) {\r\n\t            if (arrProp === void 0) { arrProp = 'push'; }\r\n\t            if (queue === void 0) { queue = invokeQueue; }\r\n\t            return function () {\r\n\t                queue[arrProp]([service, prefix, arguments]);\r\n\t                return moduleObj;\r\n\t            };\r\n\t        };\r\n\t        var moduleObj = {\r\n\t            name: name,\r\n\t            requires: requires,\r\n\t            // data: (key, val)=>{\r\n\t            //     invokeQueue.unshift(['data', [key, val]]);\r\n\t            // },\r\n\t            // provider: (key, val)=>{\r\n\t            //     invokeQueue.push(['provider', [key, val]]);\r\n\t            // },\r\n\t            data: invokeFn('$provider', 'data', 'unshift'),\r\n\t            provider: invokeFn('$provider', 'provider'),\r\n\t            factory: invokeFn('$provider', 'factory'),\r\n\t            value: invokeFn('$provider', 'value'),\r\n\t            service: invokeFn('$provider', 'service'),\r\n\t            config: invokeFn('$injector', 'invoke', 'push', configQueue),\r\n\t            run: function (fn) {\r\n\t                moduleObj._runQueue.push(fn);\r\n\t                return moduleObj;\r\n\t            },\r\n\t            pipe: invokeFn('$pipeProvider', 'register'),\r\n\t            // directive: invokeFn('$compileProvider', 'directive'),\r\n\t            _invokeQueue: invokeQueue,\r\n\t            _configQueue: configQueue,\r\n\t            _runQueue: []\r\n\t        };\r\n\t        if (configFn) {\r\n\t            moduleObj.config(configFn);\r\n\t        }\r\n\t        this.modules = moduleNames[name] = moduleObj;\r\n\t        return moduleObj;\r\n\t    };\r\n\t    /**\r\n\t     * 根据name获取module\r\n\t     * @param name\r\n\t     * @param modules\r\n\t     */\r\n\t    Loader.prototype.$$get = function (name, modules) {\r\n\t        if (moduleNames.hasOwnProperty(name)) {\r\n\t            return moduleNames[name];\r\n\t        }\r\n\t        $log.error('名称为' + name + '的module不存在！');\r\n\t    };\r\n\t    return Loader;\r\n\t}());\r\n\texports.default = Loader;\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar targetDom_1 = __webpack_require__(3);\r\n\tvar util_1 = __webpack_require__(1);\r\n\t// 事件的操作\r\n\tvar eventModel = /** @class */ (function (_super) {\r\n\t    __extends(eventModel, _super);\r\n\t    function eventModel(selector) {\r\n\t        return _super.call(this, selector) || this;\r\n\t    }\r\n\t    // 事件绑定\r\n\t    eventModel.prototype.on = function (eventType, fn) {\r\n\t        this.each(this.els, function (val, index) {\r\n\t            val.addEventListener(eventType, fn, false);\r\n\t        });\r\n\t    };\r\n\t    // 解除事件绑定\r\n\t    eventModel.prototype.off = function (eventType, fn) {\r\n\t        this.each(this.els, function (val, index) {\r\n\t            val.removeEventListener(eventType, fn, false);\r\n\t        });\r\n\t    };\r\n\t    // 鼠标移入移除\r\n\t    eventModel.prototype.hover = function (hover, out) {\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (util_1.default.type(hover) == 'function') {\r\n\t                i.addEventListener('mouseover', hover, false);\r\n\t            }\r\n\t            else {\r\n\t                throw new Error('hover方法：没有传递回调函数');\r\n\t            }\r\n\t            if (util_1.default.type(out) == 'function') {\r\n\t                i.addEventListener('mouseout', hover, false);\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    // 点击事件\r\n\t    eventModel.prototype.click = function (fn) {\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (util_1.default.type(fn) == 'function') {\r\n\t                i.addEventListener('click', fn, false);\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    //设置点击切换方法\r\n\t    eventModel.prototype.toggle = function () {\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            (function (element, args) {\r\n\t                var count = 0;\r\n\t                element.addEventListener('click', function () {\r\n\t                    args[count++ % args.length].call(this);\r\n\t                }, false);\r\n\t            })(i, arguments);\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    //窗口滚动事件\r\n\t    eventModel.prototype.scroll = function (fn) {\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (util_1.default.type(fn) == 'function') {\r\n\t                i.addEventListener('scroll', fn, false);\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    eventModel.prototype.resize = function (fn) {\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            var offsetLeft = i.offsetLeft;\r\n\t            var offsetWidth = i.offsetWidth;\r\n\t            var offsetTop = i.offsetTop;\r\n\t            var offsetHeight = i.offsetHeight;\r\n\t            window.onresize = function () {\r\n\t                fn();\r\n\t                if (offsetLeft >= util_1.default.page().width - offsetWidth) {\r\n\t                    offsetLeft = util_1.default.page().width - offsetWidth;\r\n\t                }\r\n\t                if (offsetTop >= util_1.default.page().height - offsetHeight) {\r\n\t                    offsetTop = util_1.default.page().height - offsetHeight;\r\n\t                }\r\n\t            };\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    return eventModel;\r\n\t}(targetDom_1.default));\r\n\texports.default = eventModel;\r\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar targetDom_1 = __webpack_require__(3);\r\n\tvar nodeModel_1 = __webpack_require__(14);\r\n\tvar eventModel_1 = __webpack_require__(11);\r\n\tvar moveModel_1 = __webpack_require__(13);\r\n\tvar statusModel_1 = __webpack_require__(15);\r\n\tvar mixins_1 = __webpack_require__(8);\r\n\t// dom操作\r\n\tvar DomAction = /** @class */ (function (_super) {\r\n\t    __extends(DomAction, _super);\r\n\t    function DomAction(selector) {\r\n\t        return _super.call(this, selector) || this;\r\n\t    }\r\n\t    return DomAction;\r\n\t}(targetDom_1.default));\r\n\tmixins_1.applyMixins(DomAction, [nodeModel_1.default, eventModel_1.default, moveModel_1.default, statusModel_1.default]);\r\n\tvar Dom = function (selector) {\r\n\t    var dom = new DomAction(selector);\r\n\t    return dom;\r\n\t};\r\n\texports.default = Dom;\r\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar targetDom_1 = __webpack_require__(3);\r\n\tvar moveModel = /** @class */ (function (_super) {\r\n\t    __extends(moveModel, _super);\r\n\t    function moveModel(selector) {\r\n\t        return _super.call(this, selector) || this;\r\n\t    }\r\n\t    moveModel.prototype.show = function (delay) {\r\n\t        if (delay && typeof delay == 'number') {\r\n\t            var _loop_1 = function (i) {\r\n\t                setTimeout(function () {\r\n\t                    i.style.display = 'none';\r\n\t                }, delay || 500);\r\n\t            };\r\n\t            for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t                var i = _a[_i];\r\n\t                _loop_1(i);\r\n\t            }\r\n\t        }\r\n\t        else if (!delay) {\r\n\t            for (var _b = 0, _c = this.els; _b < _c.length; _b++) {\r\n\t                var i = _c[_b];\r\n\t                i.style.display = 'block';\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    moveModel.prototype.hide = function (delay) {\r\n\t        if (delay && typeof delay == 'number') {\r\n\t            var _loop_2 = function (i) {\r\n\t                setTimeout(function () {\r\n\t                    i.style.display = 'block';\r\n\t                }, delay || 500);\r\n\t            };\r\n\t            for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t                var i = _a[_i];\r\n\t                _loop_2(i);\r\n\t            }\r\n\t        }\r\n\t        else if (!delay) {\r\n\t            for (var _b = 0, _c = this.els; _b < _c.length; _b++) {\r\n\t                var i = _c[_b];\r\n\t                i.style.display = 'none';\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    return moveModel;\r\n\t}(targetDom_1.default));\r\n\texports.default = moveModel;\r\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar targetDom_1 = __webpack_require__(3);\r\n\tvar util_1 = __webpack_require__(1);\r\n\t// 操作dom节点\r\n\tvar nodeModel = /** @class */ (function (_super) {\r\n\t    __extends(nodeModel, _super);\r\n\t    function nodeModel(selector) {\r\n\t        return _super.call(this, selector) || this;\r\n\t    }\r\n\t    /**\r\n\t     * 设置，获取html\r\n\t     * @param str html值\r\n\t     */\r\n\t    nodeModel.prototype.html = function (str) {\r\n\t        if (str && util_1.default.type(str) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        if (!str) {\r\n\t            return this.els[0].innerHTML;\r\n\t        }\r\n\t        else {\r\n\t            this.each(this.els, function (val, index) {\r\n\t                val.innerHTML = str;\r\n\t            });\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 设置，获取节点文本\r\n\t     * @param str 文本值\r\n\t     */\r\n\t    nodeModel.prototype.text = function (str) {\r\n\t        if (str && util_1.default.type(str) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (arguments.length == 0) {\r\n\t                return i.innerText || i.textContent;\r\n\t            }\r\n\t            else if (arguments.length == 1) {\r\n\t                if (i.innerText) {\r\n\t                    i.innerText = str;\r\n\t                }\r\n\t                else {\r\n\t                    i.textContent = str;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    nodeModel.prototype.css = function (key, value) {\r\n\t        if (key && util_1.default.type(key) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        if (value && util_1.default.type(value) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (arguments.length == 1) {\r\n\t                return window.getComputedStyle(i, null)[key];\r\n\t            }\r\n\t            else if (arguments.length == 2) {\r\n\t                i.style[key] = value;\r\n\t                return this;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 获取，设置元素宽度\r\n\t     * @param str\r\n\t     */\r\n\t    nodeModel.prototype.width = function (str) {\r\n\t        if (str && util_1.default.type(str) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (str) {\r\n\t                i.style.width = str;\r\n\t            }\r\n\t            else {\r\n\t                return i.offsetWidth;\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    /**\r\n\t    * 获取，设置元素高度\r\n\t    * @param str\r\n\t    */\r\n\t    nodeModel.prototype.height = function (str) {\r\n\t        if (str && util_1.default.type(str) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (str) {\r\n\t                i.style.height = str;\r\n\t            }\r\n\t            else {\r\n\t                return i.offsetHeight;\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    /**\r\n\t     * 获取，设置节点的属性值\r\n\t     * @param attr 属性名\r\n\t     * @param value 属性值\r\n\t     */\r\n\t    nodeModel.prototype.attr = function (attr, value) {\r\n\t        if (util_1.default.type(attr) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        if (value && util_1.default.type(value) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (arguments.length == 1) {\r\n\t                if (i.hasAttribute(attr)) {\r\n\t                    return i.getAttribute(attr);\r\n\t                }\r\n\t            }\r\n\t            else if (arguments.length == 2) {\r\n\t                i.setAttribute(attr, value);\r\n\t                return this;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 获取，设置节点的value值\r\n\t     * @param str value值\r\n\t     */\r\n\t    nodeModel.prototype.val = function (str) {\r\n\t        if (str && util_1.default.type(str) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (arguments.length == 1) {\r\n\t                var oldStr = i.getAttribute('value');\r\n\t                i.setAttribute(oldStr, str);\r\n\t            }\r\n\t            else if (arguments.length == 0) {\r\n\t                if (i.nodeName.match(/INPUT|TEXTAREA|SELECT|RADIO|CHECKBOX/)) {\r\n\t                    return i.value;\r\n\t                }\r\n\t                return i.getAttribute('value');\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    /**\r\n\t     * 给节点添加class\r\n\t     * @param name\r\n\t     */\r\n\t    nodeModel.prototype.addClass = function (name) {\r\n\t        if (name && util_1.default.type(name) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            i.classList.add(name);\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    /**\r\n\t     * 删除节点的class\r\n\t     * @param name\r\n\t     */\r\n\t    nodeModel.prototype.removeClass = function (name) {\r\n\t        if (name && util_1.default.type(name) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            i.classList.remove(name);\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    /**\r\n\t     * 切换class\r\n\t     */\r\n\t    nodeModel.prototype.toggleClass = function (name) {\r\n\t        if (name && util_1.default.type(name) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (i.classList.toggle(name)) {\r\n\t                return true;\r\n\t            }\r\n\t            else {\r\n\t                return false;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    return nodeModel;\r\n\t}(targetDom_1.default));\r\n\texports.default = nodeModel;\r\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || (function () {\r\n\t    var extendStatics = Object.setPrototypeOf ||\r\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\t    return function (d, b) {\r\n\t        extendStatics(d, b);\r\n\t        function __() { this.constructor = d; }\r\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t    };\r\n\t})();\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar targetDom_1 = __webpack_require__(3);\r\n\tvar util_1 = __webpack_require__(1);\r\n\t// 操作dom节点\r\n\tvar statusModel = /** @class */ (function (_super) {\r\n\t    __extends(statusModel, _super);\r\n\t    function statusModel(selector) {\r\n\t        return _super.call(this, selector) || this;\r\n\t    }\r\n\t    // 判断节点是否拥有属性\r\n\t    statusModel.prototype.hasAttrs = function () {\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (i.hasAttributes()) {\r\n\t                return true;\r\n\t            }\r\n\t            else {\r\n\t                return false;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 判断节点是否有某个属性\r\n\t     * @param attr 属性名\r\n\t     */\r\n\t    statusModel.prototype.hasAttr = function (attr) {\r\n\t        if (attr && util_1.default.type(attr) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (i.hasAttribute(attr)) {\r\n\t                return true;\r\n\t            }\r\n\t            else {\r\n\t                return false;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 判断节点是否有某个class\r\n\t     * @param name class名称\r\n\t     */\r\n\t    statusModel.prototype.hasClass = function (name) {\r\n\t        if (name && util_1.default.type(name) != 'string') {\r\n\t            return;\r\n\t        }\r\n\t        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n\t            var i = _a[_i];\r\n\t            if (i.classList.contains(name)) {\r\n\t                return true;\r\n\t            }\r\n\t            else {\r\n\t                return false;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    return statusModel;\r\n\t}(targetDom_1.default));\r\n\texports.default = statusModel;\r\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar Cookie = {\r\n\t    // 判断cookie是否可用\r\n\t    support: function () {\r\n\t        if (!(document.cookie || navigator.cookieEnabled))\r\n\t            return false;\r\n\t        return true;\r\n\t    },\r\n\t    // 添加cookie\r\n\t    set: function (name, value, config) {\r\n\t        // config = {hours, path, domain, secure}\r\n\t        var data = name + \"=\" + encodeURIComponent(value);\r\n\t        console.log(123);\r\n\t        if (config && config.hours != undefined) {\r\n\t            var d = new Date();\r\n\t            d.setHours(d.getHours() + config.hours);\r\n\t            data += \"; expires=\" + d.toUTCString();\r\n\t        }\r\n\t        data += (config && config.path) ? (\"; path=\" + config.path) : \"\";\r\n\t        data += (config && config.domain) ? (\"; domain=\" + config.domain) : \"\";\r\n\t        data += (config && config.secure) ? (\"; secure=\" + config.secure) : \"\";\r\n\t        document.cookie = data;\r\n\t    },\r\n\t    // 查询 cookie\r\n\t    get: function (name) {\r\n\t        var len = arguments.length;\r\n\t        if (len == 0) {\r\n\t            var cs = document.cookie, arr = [], arr2 = [], obj = {};\r\n\t            arr = cs.split(';');\r\n\t            // console.log(arr);\r\n\t            for (var i = 0; i < arr.length; i++) {\r\n\t                var a = arr[i].split('=');\r\n\t                var a1 = [a[0].trim(), decodeURIComponent(a[1])];\r\n\t                arr2.push(a1);\r\n\t            }\r\n\t            return JSON.stringify(arr2);\r\n\t        }\r\n\t        else if (len == 1) {\r\n\t            var reg = eval(\"/(?:^|;\\\\s*)\" + name + \"=([^=]+)(?:;|$)/\");\r\n\t            return reg.test(document.cookie) ? decodeURIComponent(RegExp.$1) : \"\";\r\n\t        }\r\n\t    },\r\n\t    // 删除 cookie\r\n\t    remove: function (name, path) {\r\n\t        if (arguments.length == 0) {\r\n\t            var all = this.get();\r\n\t            for (var i = 0; i < all.length; i++) {\r\n\t                this.set(all[i][0], \"\", -1);\r\n\t            }\r\n\t        }\r\n\t        this.set(name, path || '', { \"hours\": -1 });\r\n\t    }\r\n\t};\r\n\texports.default = Cookie;\r\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar HandelEventer_1 = __webpack_require__(5);\r\n\tvar util_1 = __webpack_require__(1);\r\n\tvar HandelData = /** @class */ (function () {\r\n\t    function HandelData() {\r\n\t        this.data = {};\r\n\t        this.name = '';\r\n\t        this.token = undefined;\r\n\t        this.props = {};\r\n\t        this.componentStatus = '';\r\n\t    }\r\n\t    HandelData.prototype.$data = function (key, val) {\r\n\t        var n = arguments.length;\r\n\t        switch (n) {\r\n\t            case 0:\r\n\t                return this.data;\r\n\t            case 1:\r\n\t                return this.data[key];\r\n\t            case 2:\r\n\t                var oldData = util_1.default.deepClone(this.data);\r\n\t                this.data[key] = val;\r\n\t                var newData = this.data;\r\n\t                HandelEventer_1.default.trigger(key, util_1.default.clone({\r\n\t                    target: this.token,\r\n\t                    which: this.name,\r\n\t                    old: oldData,\r\n\t                    new: newData,\r\n\t                    oldVal: oldData[key],\r\n\t                    newVal: newData[key],\r\n\t                    props: this.props == undefined ? {} : this.props,\r\n\t                    componentStatus: this.componentStatus\r\n\t                }));\r\n\t                break;\r\n\t        }\r\n\t    };\r\n\t    return HandelData;\r\n\t}());\r\n\tvar Data = new HandelData();\r\n\texports.default = Data;\r\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar HandelEventer_1 = __webpack_require__(5);\r\n\t/**\r\n\t * 组件事件监听函数\r\n\t */\r\n\tvar HandelEvent = /** @class */ (function () {\r\n\t    function HandelEvent() {\r\n\t    }\r\n\t    /**\r\n\t     * 触发事件\r\n\t     * @param name 事件名称\r\n\t     * @param msg 信息\r\n\t     */\r\n\t    HandelEvent.prototype.trigger = function (name, msg) {\r\n\t        HandelEventer_1.default.trigger(name, msg);\r\n\t    };\r\n\t    /**\r\n\t     * 监听事件\r\n\t     * @param name 事件名称\r\n\t     * @param fn 回调函数，返回触发的信息\r\n\t     */\r\n\t    HandelEvent.prototype.listen = function (name, fn) {\r\n\t        HandelEventer_1.default.listen(name, fn);\r\n\t    };\r\n\t    return HandelEvent;\r\n\t}());\r\n\tvar handelEvent = new HandelEvent();\r\n\texports.default = handelEvent;\r\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar $log = __webpack_require__(2);\r\n\tvar util_1 = __webpack_require__(1);\r\n\t/**\r\n\t * 验证组件的状态\r\n\t * @param component 组件\r\n\t */\r\n\tfunction componentGuard(component) {\r\n\t    // 验证组件名称\r\n\t    if (!component.name) {\r\n\t        return;\r\n\t    }\r\n\t    if (component.name) {\r\n\t        if (util_1.default.type(component.name) != 'string')\r\n\t            $log.error('组件' + component.name + '的名称必须为字符串');\r\n\t    }\r\n\t    // 验证组件components属性\r\n\t    if (component.components) {\r\n\t        if (util_1.default.type(component.components) != 'array') {\r\n\t            $log.error('组件' + component.name + '的components属性应为数组！');\r\n\t        }\r\n\t    }\r\n\t    // 验证组件style属性\r\n\t    if (component.style) {\r\n\t        if (util_1.default.type(component.style) != 'string') {\r\n\t            $log.error('组件' + component.name + '的style属性应为字符！');\r\n\t        }\r\n\t    }\r\n\t    // 验证组件styleeId属性\r\n\t    if (component.styleId) {\r\n\t        if (util_1.default.type(component.styleId) != 'string') {\r\n\t            $log.error('组件' + component.name + '的styleId属性应为字符！');\r\n\t        }\r\n\t        if (document.querySelector(component.styleId) == undefined) {\r\n\t            $log.error('节点' + component.styleId + '不存在');\r\n\t        }\r\n\t    }\r\n\t    // 验证组件template属性\r\n\t    if (component.template) {\r\n\t        if (util_1.default.type(component.template) != 'string') {\r\n\t            $log.error('组件' + component.name + '的template属性应为字符！');\r\n\t        }\r\n\t    }\r\n\t    // 验证组件templateId属性\r\n\t    if (component.templateId) {\r\n\t        if (util_1.default.type(component.templateId) != 'string') {\r\n\t            $log.error('组件' + component.name + '的templateId属性应为字符！');\r\n\t        }\r\n\t        if (document.querySelector(component.templateId) == undefined) {\r\n\t            $log.error('节点' + component.templateId + '不存在');\r\n\t        }\r\n\t    }\r\n\t    // 验证组件data属性\r\n\t    if (component.data) {\r\n\t        if (util_1.default.type(component.data) != 'object') {\r\n\t            $log.error('组件' + component.name + '的data属性应为对象！');\r\n\t        }\r\n\t    }\r\n\t    // 验证组件props属性\r\n\t    if (component.props) {\r\n\t        if (util_1.default.type(component.props) != 'object') {\r\n\t            $log.error('组件' + component.name + '的props属性应为对象！');\r\n\t        }\r\n\t    }\r\n\t    // 验证组件props方法\r\n\t    if (component.beforeRender) {\r\n\t        if (util_1.default.type(component.beforeRender) != 'function') {\r\n\t            $log.error('组件' + component.name + '的beforeRender属性应为函数！');\r\n\t        }\r\n\t    }\r\n\t    // 验证组件render方法\r\n\t    if (component.render) {\r\n\t        if (util_1.default.type(component.render) != 'function') {\r\n\t            $log.error('组件' + component.name + '的render属性应为函数！');\r\n\t        }\r\n\t    }\r\n\t    else {\r\n\t        return;\r\n\t    }\r\n\t}\r\n\texports.default = componentGuard;\r\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar $log = __webpack_require__(2);\r\n\tvar util_1 = __webpack_require__(1);\r\n\tvar render_1 = __webpack_require__(22);\r\n\tvar componentGuard_1 = __webpack_require__(19);\r\n\tvar store_1 = __webpack_require__(4);\r\n\tvar store = new store_1.default();\r\n\tstore.data('componentList', []);\r\n\tstore.service('component', function () {\r\n\t    this.ensureOneInvokeComponent = function (name, arr) {\r\n\t        var res = {\r\n\t            type: 'yes'\r\n\t        }, rootName = [], names = [];\r\n\t        for (var i = 0; i < arr.length; i++) {\r\n\t            if (arr[i].name == name)\r\n\t                rootName.push(name);\r\n\t            names.push(arr[i].name);\r\n\t        }\r\n\t        if (rootName.length >= 2)\r\n\t            res = {\r\n\t                type: 'no',\r\n\t                info: '只能有一个根组件，却发现' + rootName.length + '个' + name + '根组件'\r\n\t            };\r\n\t        return res;\r\n\t    };\r\n\t});\r\n\tvar CPage = /** @class */ (function () {\r\n\t    function CPage() {\r\n\t        this.CList = [];\r\n\t        this.id = 0;\r\n\t        this.id = 0;\r\n\t    }\r\n\t    /**\r\n\t     * es6模式，渲染组件\r\n\t     * @param selector id选择符，如果是class，则取第一个节点\r\n\t     * @param fn 根组件函数\r\n\t     */\r\n\t    CPage.bootstrap = function (selector, fn) {\r\n\t        var rootComponent = {};\r\n\t        function componetList(fn, isRoot) {\r\n\t            if (isRoot === void 0) { isRoot = false; }\r\n\t            var classToJson = util_1.default.classToJson(fn, isRoot);\r\n\t            var componentJson = classToJson.componentJson;\r\n\t            if (isRoot) {\r\n\t                rootComponent = classToJson.rootComponent;\r\n\t            }\r\n\t            componentGuard_1.default(componentJson);\r\n\t            store.data('componentList', store.get('componentList').push(componentJson));\r\n\t            if (componentJson.components && util_1.default.type(componentJson.components) == 'array' && componentJson.components.length) {\r\n\t                componentJson.components.forEach(function (v) {\r\n\t                    componetList(v);\r\n\t                });\r\n\t            }\r\n\t        }\r\n\t        componetList(fn, true);\r\n\t        var r = new render_1.default(selector, rootComponent, store.get('componentList'));\r\n\t        r.componentToDom();\r\n\t    };\r\n\t    /**\r\n\t     * 路由\r\n\t     * @param config 路由配置\r\n\t     */\r\n\t    CPage.router = function (config) {\r\n\t        function check(str) {\r\n\t            if (util_1.default.type(str) != 'array') {\r\n\t                $log.error('路由配置项需为数组形式');\r\n\t            }\r\n\t        }\r\n\t        check(config);\r\n\t        config.forEach(function (v) {\r\n\t            var classToJson = util_1.default.classToJson(v.component, false);\r\n\t            v.component = classToJson.componentJson;\r\n\t        });\r\n\t        store.data('routerConfig', config);\r\n\t    };\r\n\t    CPage.prototype.directive = function (name, fn) {\r\n\t        var conf = fn();\r\n\t        conf.id = this.id;\r\n\t        this.CList.push(conf);\r\n\t        this.id++;\r\n\t        var guard = store.get('component').ensureOneInvokeComponent(name, this.CList);\r\n\t        if (guard.type == 'no') {\r\n\t            $log.error(guard.info);\r\n\t        }\r\n\t        return conf;\r\n\t    };\r\n\t    /**\r\n\t     * es5模式获取组建信息\r\n\t     * @param obj\r\n\t     */\r\n\t    CPage.prototype.component = function (obj) {\r\n\t        componentGuard_1.default(obj);\r\n\t        var componentInfo = util_1.default.deepClone(obj);\r\n\t        Object.defineProperties(componentInfo, {\r\n\t            isRoot: {\r\n\t                value: false,\r\n\t                writable: true\r\n\t            },\r\n\t            $el: {\r\n\t                value: undefined,\r\n\t                writable: true\r\n\t            },\r\n\t            $props: {\r\n\t                value: {},\r\n\t                writable: true\r\n\t            }\r\n\t        });\r\n\t        return this.directive(obj.name, function () {\r\n\t            return componentInfo;\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * es5模式，将组件渲染到dom\r\n\t     * @param selector id选择符，如果是class，则取第一个节点\r\n\t     * @param root 根组件信息\r\n\t     */\r\n\t    CPage.prototype.bootstrap = function (selector, root) {\r\n\t        if (util_1.default.type(selector) != 'string') {\r\n\t            $log.error(selector + '应为字符串');\r\n\t        }\r\n\t        if (!document.querySelector(selector)) {\r\n\t            $log.error('节点“' + selector + '”不存在');\r\n\t        }\r\n\t        if (util_1.default.type(root) != 'object') {\r\n\t            $log.error(root + '应为json对象');\r\n\t        }\r\n\t        if (arguments.length == 2) {\r\n\t            componentGuard_1.default(root);\r\n\t            if (!root.name) {\r\n\t                $log.error('找不到根组件的name属性');\r\n\t            }\r\n\t            store.data('rootComponent', root.name);\r\n\t            var r = new render_1.default(selector, root, this.CList);\r\n\t            r.componentToDom();\r\n\t        }\r\n\t    };\r\n\t    CPage.version = '1.0.4';\r\n\t    return CPage;\r\n\t}());\r\n\texports.default = CPage;\r\n\t/**\r\n\t * es6模式构建组件\r\n\t */\r\n\tvar Component = /** @class */ (function () {\r\n\t    function Component() {\r\n\t        this.components = [];\r\n\t        this.name = '';\r\n\t        this.template = '';\r\n\t        this.data = {};\r\n\t        this.props = {};\r\n\t    }\r\n\t    Component.prototype.render = function () {\r\n\t        $log.error('render方法必须被继承');\r\n\t    };\r\n\t    return Component;\r\n\t}());\r\n\texports.Component = Component;\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar $log = __webpack_require__(2);\r\n\tvar util_1 = __webpack_require__(1);\r\n\tvar parse_1 = __webpack_require__(9);\r\n\tvar ParseTpl = /** @class */ (function () {\r\n\t    function ParseTpl(text, data, props) {\r\n\t        this.text = text;\r\n\t        this.data = data;\r\n\t        this.props = props;\r\n\t    }\r\n\t    /**\r\n\t     * 组合data和props属性\r\n\t     * @param data\r\n\t     * @param props\r\n\t     */\r\n\t    ParseTpl.prototype.combineData = function (data, props) {\r\n\t        if (data === void 0) { data = {}; }\r\n\t        if (props === void 0) { props = {}; }\r\n\t        if (util_1.default.type(data) != 'object')\r\n\t            $log.error('组件是属性data必须为对象');\r\n\t        if (util_1.default.type(props) != 'object')\r\n\t            $log.error('组件是属性props必须为对象');\r\n\t        if (util_1.default.isEmpty(props))\r\n\t            return data;\r\n\t        for (var i in props) {\r\n\t            data[i] = props[i].default;\r\n\t        }\r\n\t        return data;\r\n\t    };\r\n\t    // 渲染模板\r\n\t    ParseTpl.prototype.tpl = function () {\r\n\t        var self = this;\r\n\t        var index = 0, parts = [], startIndex, endIndex, exp, expFn;\r\n\t        if (this.text == undefined) {\r\n\t            return;\r\n\t        }\r\n\t        while (index < this.text.length) {\r\n\t            startIndex = this.text.indexOf('{{', index);\r\n\t            if (startIndex != -1) {\r\n\t                endIndex = this.text.indexOf('}}', startIndex + 2);\r\n\t            }\r\n\t            if (startIndex != -1 && endIndex != -1) {\r\n\t                if (startIndex != index) {\r\n\t                    parts.push(this.text.substring(index, startIndex));\r\n\t                }\r\n\t                exp = this.text.substring(startIndex + 2, endIndex);\r\n\t                expFn = parse_1.default.parse(exp);\r\n\t                parts.push(expFn);\r\n\t                index = endIndex + 2;\r\n\t            }\r\n\t            else {\r\n\t                parts.push(this.text.substring(index));\r\n\t                break;\r\n\t            }\r\n\t        }\r\n\t        // console.log(parts)\r\n\t        return parts.reduce(function (prev, cur) {\r\n\t            if (util_1.default.type(cur) == 'function') {\r\n\t                return prev + self.expectNullUndefined(cur(self.combineData(self.data, self.props)));\r\n\t            }\r\n\t            else {\r\n\t                return prev + cur;\r\n\t            }\r\n\t        }, '');\r\n\t    };\r\n\t    /**\r\n\t     * 判断表达式是否为null或者undefined，是则返回''\r\n\t     * @param str\r\n\t     */\r\n\t    ParseTpl.prototype.expectNullUndefined = function (str) {\r\n\t        if (util_1.default.type(str) == 'null' || util_1.default.type(str) == 'undefined') {\r\n\t            return '';\r\n\t        }\r\n\t        else if (typeof str == 'object') {\r\n\t            return JSON.stringify(str);\r\n\t        }\r\n\t        else {\r\n\t            return '' + str;\r\n\t        }\r\n\t    };\r\n\t    return ParseTpl;\r\n\t}());\r\n\tfunction tpl(text, data, props) {\r\n\t    var parseTpl = new ParseTpl(text, data, props);\r\n\t    return parseTpl.tpl();\r\n\t}\r\n\texports.default = tpl;\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n\t    return new (P || (P = Promise))(function (resolve, reject) {\r\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n\t        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n\t    });\r\n\t};\r\n\tvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\r\n\t    function step(op) {\r\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\r\n\t        while (_) try {\r\n\t            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n\t            if (y = 0, t) op = [0, t.value];\r\n\t            switch (op[0]) {\r\n\t                case 0: case 1: t = op; break;\r\n\t                case 4: _.label++; return { value: op[1], done: false };\r\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n\t                default:\r\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n\t                    if (t[2]) _.ops.pop();\r\n\t                    _.trys.pop(); continue;\r\n\t            }\r\n\t            op = body.call(thisArg, _);\r\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n\t    }\r\n\t};\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar $log = __webpack_require__(2);\r\n\tvar util_1 = __webpack_require__(1);\r\n\tvar dom_1 = __webpack_require__(24);\r\n\tvar parseTpl_1 = __webpack_require__(21);\r\n\tvar HandelData_1 = __webpack_require__(17);\r\n\tvar HandelEventer_1 = __webpack_require__(5);\r\n\tvar HandelEvent_1 = __webpack_require__(18);\r\n\tvar index_1 = __webpack_require__(9);\r\n\tvar http_1 = __webpack_require__(25);\r\n\tvar router_1 = __webpack_require__(32);\r\n\tvar store_1 = __webpack_require__(4);\r\n\tvar store = new store_1.default();\r\n\tvar PREFIX_DIRECTIVE = /(x[\\:\\-_]|data[\\:\\-_])/i;\r\n\tvar ID = 'c-data-id';\r\n\tvar ID_FOR = 'c-for-id';\r\n\tvar ID_REPEAT = 'c-repeat-id';\r\n\tvar renderComponents = /** @class */ (function () {\r\n\t    function renderComponents(selector, root, CList) {\r\n\t        this.selector = selector;\r\n\t        this.root = root;\r\n\t        this.CList = CList;\r\n\t        this.CObj = this.listToObj(CList);\r\n\t        this.eventList = [];\r\n\t        this.cRefList = [];\r\n\t        this.showList = [];\r\n\t        this.ifList = [];\r\n\t        this.ifTpl = {};\r\n\t        this.cHtmlList = [];\r\n\t        this.cForList = [];\r\n\t        this.cRepeatList = [];\r\n\t        this.cViewList = [];\r\n\t        this.dataId = parseInt(util_1.default.now());\r\n\t        this.componentToken = [];\r\n\t        this.componentNames = this.getComponentNameList();\r\n\t        this.componentAttrs = {};\r\n\t        this.templateId = {};\r\n\t        this.oneRootComponent = 1;\r\n\t        this.$router = undefined;\r\n\t        this.$routerCache = {};\r\n\t    }\r\n\t    /**\r\n\t     * 组件渲染到dom节点\r\n\t     */\r\n\t    renderComponents.prototype.componentToDom = function () {\r\n\t        var self = this, node, components = [], rootTpl = dom_1.default.wrapDom(this.theTpl(this.root), util_1.default._cameCase(this.root.name).toLowerCase());\r\n\t        function handelComponent() {\r\n\t            return __awaiter(this, void 0, void 0, function () {\r\n\t                return __generator(this, function (_a) {\r\n\t                    switch (_a.label) {\r\n\t                        case 0: return [4 /*yield*/, invokeLooopNodes()];\r\n\t                        case 1:\r\n\t                            _a.sent();\r\n\t                            return [4 /*yield*/, invokeLoopComponents()];\r\n\t                        case 2:\r\n\t                            _a.sent();\r\n\t                            return [4 /*yield*/, invokeRouter()];\r\n\t                        case 3:\r\n\t                            _a.sent();\r\n\t                            return [2 /*return*/];\r\n\t                    }\r\n\t                });\r\n\t            });\r\n\t        }\r\n\t        handelComponent();\r\n\t        // 遍历节点\r\n\t        function invokeLooopNodes() {\r\n\t            node = self.loopNodes(self.root.name, dom_1.default.create(rootTpl), components);\r\n\t        }\r\n\t        // 遍历组件\r\n\t        function invokeLoopComponents() {\r\n\t            self.root.template = node[0].outerHTML;\r\n\t            self.root.isRoot = true;\r\n\t            self.templateId[node[0].getAttribute(ID)] = node[0].outerHTML;\r\n\t            self.loopComponents(components, self.root.data, self.root.components, self.root.name);\r\n\t        }\r\n\t        // 处理路由\r\n\t        function invokeRouter() {\r\n\t            if (store.has('routerConfig')) {\r\n\t                handelRouter();\r\n\t            }\r\n\t            function handelRouter() {\r\n\t                setTimeout(function () {\r\n\t                    if (window.document.readyState == \"complete\") {\r\n\t                        var hash = window.location.hash;\r\n\t                        if (hash == '') {\r\n\t                            var index = pathIndex();\r\n\t                            if (util_1.default.type(index) == 'object') {\r\n\t                                handelView(index);\r\n\t                            }\r\n\t                        }\r\n\t                        else {\r\n\t                            var r = getNowRouter(hash.substr(1));\r\n\t                            if (r != undefined) {\r\n\t                                handelView(r);\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                    window.addEventListener('hashchange', function (data) {\r\n\t                        var nowPath = '';\r\n\t                        if (data.newURL.includes('/#')) {\r\n\t                            nowPath = data.newURL.split('/#')[1];\r\n\t                        }\r\n\t                        var r = getNowRouter(nowPath);\r\n\t                        if (r != undefined) {\r\n\t                            handelView(r);\r\n\t                        }\r\n\t                    }, false);\r\n\t                    function handelView(obj) {\r\n\t                        var name = obj.component.name;\r\n\t                        var delay = obj.delay || 0;\r\n\t                        setTimeout(function () {\r\n\t                            self.cViewList.forEach(function (v) {\r\n\t                                if (!dom_1.default.q(v.ele))\r\n\t                                    return;\r\n\t                                if (obj.cache && self.$routerCache.hasOwnProperty(name)) {\r\n\t                                    dom_1.default.q(v.ele).innerHTML = self.$routerCache[name];\r\n\t                                    self.handelEventListener(self.CObj[name], dom_1.default.q(v.ele).firstChild);\r\n\t                                }\r\n\t                                else {\r\n\t                                    dom_1.default.q(v.ele).innerHTML = '';\r\n\t                                    dom_1.default.q(v.ele).insertAdjacentHTML('afterbegin', '<' + util_1.default._cameCase(name) + '></' + util_1.default._cameCase(name) + '>');\r\n\t                                    self.loopNodes(name, dom_1.default.q(v.ele).childNodes, []);\r\n\t                                    self.loopComponents([self.CObj[name]], self.CObj[v.which].data || {}, [], v.which);\r\n\t                                    setTimeout(function () {\r\n\t                                        self.$routerCache[name] = dom_1.default.q(util_1.default._cameCase(name)).outerHTML;\r\n\t                                    }, 0);\r\n\t                                }\r\n\t                            });\r\n\t                        }, delay);\r\n\t                    }\r\n\t                }, 0);\r\n\t            }\r\n\t        }\r\n\t        // 获取当前路由\r\n\t        function getNowRouter(path) {\r\n\t            var router = new router_1.default(path, store.get('routerConfig'));\r\n\t            self.$router = router;\r\n\t            return router.nowRouter;\r\n\t        }\r\n\t        // 默认路径\r\n\t        function pathIndex() {\r\n\t            var obj = undefined;\r\n\t            store.get('routerConfig').forEach(function (v) {\r\n\t                if (v.path == '/') {\r\n\t                    obj = v;\r\n\t                }\r\n\t            });\r\n\t            return obj;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 组件的template, templateId, templateUrl\r\n\t     * @param component 组件\r\n\t     */\r\n\t    renderComponents.prototype.theTpl = function (component) {\r\n\t        // hasHtmlUrl, webpack打包需要引入html-loader\r\n\t        return (component.template ? component.template.trim() : undefined) || dom_1.default.hasHtml(component.templateId) || dom_1.default.hasHtmlUrl(component.templateUrl);\r\n\t    };\r\n\t    /**\r\n\t     * 组件的style, styleId, styleUrl\r\n\t     * @param component 组件\r\n\t     */\r\n\t    renderComponents.prototype.theStyle = function (component) {\r\n\t        // component.style\r\n\t        function handelString(str) {\r\n\t            if (str != undefined) {\r\n\t                return {\r\n\t                    type: 'string',\r\n\t                    result: str\r\n\t                };\r\n\t            }\r\n\t            return false;\r\n\t        }\r\n\t        // component.styleId\r\n\t        function handelId(id) {\r\n\t            if (dom_1.default.q(id) != undefined) {\r\n\t                return {\r\n\t                    type: 'id',\r\n\t                    result: id\r\n\t                };\r\n\t            }\r\n\t            return false;\r\n\t        }\r\n\t        // component.styleUrl, webpack打包需要引入css-loader\r\n\t        function handelUrl(url) {\r\n\t            if (url != undefined) {\r\n\t                // 针对import * as css from '';\r\n\t                if (util_1.default.type(url) == 'object') {\r\n\t                    url = url[0][1];\r\n\t                }\r\n\t                // 针对require('../xx.css')\r\n\t                if (util_1.default.type(url) == 'array') {\r\n\t                    url = url[1];\r\n\t                }\r\n\t                return {\r\n\t                    type: 'url',\r\n\t                    result: url\r\n\t                };\r\n\t            }\r\n\t            return false;\r\n\t        }\r\n\t        return handelString(component.style) || handelId(component.styleId) || handelUrl(component.styleUrl);\r\n\t    };\r\n\t    /**\r\n\t     * 遍历dom节点\r\n\t     * @param name 组件名称\r\n\t     * @param node dom节点\r\n\t     * @param components 组件列表\r\n\t     */\r\n\t    renderComponents.prototype.loopNodes = function (name, node, components) {\r\n\t        var _this = this;\r\n\t        for (var i = 0; i < node.length; i++) {\r\n\t            if (node[i].nodeType == 1) {\r\n\t                node[i].setAttribute(\"c-data-id\", this.dataId);\r\n\t                var cs = this.getComponent(node[i], name);\r\n\t                cs.forEach(function (v) {\r\n\t                    if (components) {\r\n\t                        components.push(util_1.default.deepClone(util_1.default.extend(_this.CObj[v], { token: _this.dataId })));\r\n\t                        // components.push(Util.extend(this.CObj[v], {token: this.dataId}));\r\n\t                    }\r\n\t                });\r\n\t                this.dataId++;\r\n\t                // 添加eventList, showList...等集合\r\n\t                this.addDirectiveList(name, node[i]);\r\n\t                if (node[i].childNodes && node[i].childNodes.length) {\r\n\t                    this.loopNodes(name, node[i].childNodes, components);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return node;\r\n\t    };\r\n\t    /**\r\n\t     * 添加eventList, showList...等集合\r\n\t     * @param name 组件名称\r\n\t     * @param node 节点\r\n\t     */\r\n\t    renderComponents.prototype.addDirectiveList = function (name, node) {\r\n\t        for (var j = 0, len = node.attributes; j < len.length; j++) {\r\n\t            var attrName = this.normalizeDirective(len[j].name);\r\n\t            if (attrName.match(/^cClick|cDbclick|cMouseover|cMousedown|cMouseup|cMousemove|cMouseout|cMouseleave|cBlur|cFocus|cChange|cInput|cDrag|cDragend|cDragenter|cDragleave|cDragover|cDragstart|cDrop|cFocus|cKeydown|cKeypress|cKeyup|cScroll|cSelect|cSubmit|cTtoggle|cResize|cWaiting|cProgress|cLoadstart|cDurationchange|cLoadedmetadata|cLoadeddata|cCanplay|cCanplaythrough|cPlay|cPause|cRef|cShow|cIf|cHtml|cFor|cRepeat|cView$/g)) {\r\n\t                switch (attrName) {\r\n\t                    case 'cRef':\r\n\t                        this.cRefList.push({\r\n\t                            which: name,\r\n\t                            type: len[j].name.split('-')[1],\r\n\t                            fn: len[j].value,\r\n\t                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n\t                            id: node.getAttribute(ID)\r\n\t                        });\r\n\t                        break;\r\n\t                    case 'cShow':\r\n\t                        this.showList.push({\r\n\t                            which: name,\r\n\t                            type: len[j].name.split('-')[1],\r\n\t                            fn: len[j].value,\r\n\t                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n\t                            id: node.getAttribute(ID),\r\n\t                            directive: attrName\r\n\t                        });\r\n\t                        // 在组件渲染前面处理display\r\n\t                        var displayStatus = dom_1.default.boolToDisplay(parseTpl_1.default(len[j].value, this.CObj[name].data, this.CObj[name].props));\r\n\t                        node.style.display = displayStatus;\r\n\t                        break;\r\n\t                    case 'cIf':\r\n\t                        this.ifList.push({\r\n\t                            which: name,\r\n\t                            type: len[j].name.split('-')[1],\r\n\t                            fn: len[j].value,\r\n\t                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n\t                            id: node.getAttribute(ID),\r\n\t                            directive: attrName,\r\n\t                            html: node.outerHTML\r\n\t                        });\r\n\t                        var ifInfo = parseTpl_1.default(len[j].value, this.CObj[name].data, this.CObj[name].props);\r\n\t                        if (ifInfo == 'true') {\r\n\t                            node.style.display = 'none';\r\n\t                        }\r\n\t                        break;\r\n\t                    case 'cHtml':\r\n\t                        this.cHtmlList.push({\r\n\t                            which: name,\r\n\t                            type: len[j].name.split('-')[1],\r\n\t                            fn: len[j].value,\r\n\t                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n\t                            id: node.getAttribute(ID),\r\n\t                            directive: attrName,\r\n\t                            html: node.outerHTML\r\n\t                        });\r\n\t                        break;\r\n\t                    case 'cFor':\r\n\t                        this.cForList.push({\r\n\t                            which: name,\r\n\t                            type: len[j].name.split('-')[1],\r\n\t                            fn: len[j].value,\r\n\t                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n\t                            id: node.getAttribute(ID),\r\n\t                            html: node.innerHTML\r\n\t                        });\r\n\t                        break;\r\n\t                    case 'cRepeat':\r\n\t                        this.cRepeatList.push({\r\n\t                            which: name,\r\n\t                            type: len[j].name.split('-')[1],\r\n\t                            fn: len[j].value,\r\n\t                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n\t                            id: node.getAttribute(ID)\r\n\t                        });\r\n\t                        break;\r\n\t                    case 'cView':\r\n\t                        this.cViewList.push({\r\n\t                            which: name,\r\n\t                            type: len[j].name.split('-')[1],\r\n\t                            fn: len[j].value,\r\n\t                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n\t                            id: node.getAttribute(ID)\r\n\t                        });\r\n\t                        break;\r\n\t                    default:\r\n\t                        this.eventList.push({\r\n\t                            which: name,\r\n\t                            type: len[j].name.split('-')[1],\r\n\t                            fn: len[j].value,\r\n\t                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n\t                            id: node.getAttribute(ID)\r\n\t                        });\r\n\t                        break;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 遍历组件\r\n\t     * @param components 模板中的组件集合\r\n\t     * @param fatherData 父组件data数据\r\n\t     * @param componentArr 注入的组件集合\r\n\t     * @param componentName 父组件名称\r\n\t     */\r\n\t    renderComponents.prototype.loopComponents = function (components, fatherData, componentArr, componentName) {\r\n\t        if (components.length && componentArr == undefined) {\r\n\t            $log.error('找不到组件为' + componentName + '的components属性');\r\n\t        }\r\n\t        var self = this;\r\n\t        components.forEach(function (v) {\r\n\t            if (v == undefined)\r\n\t                return;\r\n\t            // “模板中的组件” 与 “注入的组件” 对比\r\n\t            self.compareChildComponentAndInjectComponents(v.name, componentArr);\r\n\t            // 给组件赋能\r\n\t            v.$data = HandelData_1.default.$data;\r\n\t            v.$http = http_1.default;\r\n\t            v.$event = HandelEvent_1.default;\r\n\t            v.$router = self.$router;\r\n\t            function handelCC() {\r\n\t                return __awaiter(this, void 0, void 0, function () {\r\n\t                    var before;\r\n\t                    return __generator(this, function (_a) {\r\n\t                        switch (_a.label) {\r\n\t                            case 0: return [4 /*yield*/, self.handelDataChange(v)];\r\n\t                            case 1:\r\n\t                                _a.sent(); // 监听data数据改变\r\n\t                                return [4 /*yield*/, self.handelBeforeRender(v)];\r\n\t                            case 2:\r\n\t                                before = _a.sent();\r\n\t                                return [4 /*yield*/, self.handelAfterRender(before, v)];\r\n\t                            case 3:\r\n\t                                _a.sent(); //在组件渲染之后执行\r\n\t                                return [2 /*return*/];\r\n\t                        }\r\n\t                    });\r\n\t                });\r\n\t            }\r\n\t            handelCC();\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 在组建渲染之前执行\r\n\t     * @param v 组件\r\n\t     */\r\n\t    renderComponents.prototype.handelBeforeRender = function (v) {\r\n\t        if (v.beforeRender) {\r\n\t            v.$el = undefined;\r\n\t            v.$refs = undefined;\r\n\t            v.componentStatus = 'beforeRender';\r\n\t            v.beforeRender();\r\n\t        }\r\n\t        return 'beforeRenderIsDone';\r\n\t    };\r\n\t    /**\r\n\t     * 在组件渲染之后执行\r\n\t     * @param status handelBeforeRender()的返回值\r\n\t     * @param v 组件\r\n\t     */\r\n\t    renderComponents.prototype.handelAfterRender = function (status, v) {\r\n\t        if (status != 'beforeRenderIsDone') {\r\n\t            return;\r\n\t        }\r\n\t        var self = this;\r\n\t        function invokeAfterRender() {\r\n\t            return __awaiter(this, void 0, void 0, function () {\r\n\t                var step1, step2, step3, step4, step5, step6, step7;\r\n\t                return __generator(this, function (_a) {\r\n\t                    switch (_a.label) {\r\n\t                        case 0: return [4 /*yield*/, addStyle()];\r\n\t                        case 1:\r\n\t                            step1 = _a.sent();\r\n\t                            return [4 /*yield*/, renderOnce(step1)];\r\n\t                        case 2:\r\n\t                            step2 = _a.sent();\r\n\t                            return [4 /*yield*/, handelCforDirective(step2)];\r\n\t                        case 3:\r\n\t                            step3 = _a.sent();\r\n\t                            return [4 /*yield*/, handelOtherDirective(step3)];\r\n\t                        case 4:\r\n\t                            step4 = _a.sent();\r\n\t                            return [4 /*yield*/, handelRenderFn(step4)];\r\n\t                        case 5:\r\n\t                            step5 = _a.sent();\r\n\t                            return [4 /*yield*/, loopChildComponent(step5)];\r\n\t                        case 6:\r\n\t                            step6 = _a.sent();\r\n\t                            return [4 /*yield*/, handelClickDirective(step6)];\r\n\t                        case 7:\r\n\t                            step7 = _a.sent();\r\n\t                            return [2 /*return*/];\r\n\t                    }\r\n\t                });\r\n\t            });\r\n\t        }\r\n\t        if (v.render) {\r\n\t            invokeAfterRender();\r\n\t        }\r\n\t        function addStyle() {\r\n\t            // head添加style\r\n\t            dom_1.default.addStyle(self.theStyle(v), v);\r\n\t            return 'done';\r\n\t        }\r\n\t        function renderOnce(status) {\r\n\t            if (status != 'done') {\r\n\t                return;\r\n\t            }\r\n\t            var node;\r\n\t            // 根组件单独渲染\r\n\t            if (v.name == self.root.name) {\r\n\t                if (self.oneRootComponent == 2) {\r\n\t                    $log.error('根组件' + self.root.name + '只能有一个');\r\n\t                }\r\n\t                var dom = dom_1.default.q(self.selector);\r\n\t                if (dom == undefined) {\r\n\t                    $log.error('节点' + self.selector + '不存在');\r\n\t                }\r\n\t                dom.innerHTML = parseTpl_1.default(self.theTpl(self.root), self.root.data, {});\r\n\t                node = dom_1.default.q('[' + ID + '=\"' + v.token + '\"]');\r\n\t                self.oneRootComponent++;\r\n\t            }\r\n\t            else {\r\n\t                var newNode = self.loopNodes(v.name, dom_1.default.create(self.theTpl(self.CObj[v.name])));\r\n\t                node = dom_1.default.q('[' + ID + '=\"' + v.token + '\"]');\r\n\t                self.templateId[v.token] = newNode[0].outerHTML;\r\n\t                // 编译组件属性，父组件的data值覆盖子组件的props值（组件的attr值与props对比，有则覆盖）\r\n\t                var newProps = dom_1.default.combineAttrAndProps(self.componentAttrs[v.token], self.CObj[v.name].props);\r\n\t                node.innerHTML = self.getChangedData(newNode[0].outerHTML, self.CObj[v.name].data, newProps);\r\n\t            }\r\n\t            return node;\r\n\t        }\r\n\t        function handelCforDirective(node) {\r\n\t            // 处理c-for\r\n\t            self.loopCforToDom(self.cForList, v);\r\n\t            return node;\r\n\t        }\r\n\t        function handelOtherDirective(node) {\r\n\t            // 处理c-if\r\n\t            self.loopIfToDom(self.ifList, v);\r\n\t            // 处理c-html\r\n\t            self.loopHtmlToDom(self.cHtmlList, v);\r\n\t            return node;\r\n\t        }\r\n\t        function handelRenderFn(node) {\r\n\t            v.$el = node;\r\n\t            // 处理c-ref\r\n\t            v.$refs = {};\r\n\t            var currentRefs = self.cRefList.filter(function (rfs) {\r\n\t                return rfs.which == v.name;\r\n\t            });\r\n\t            currentRefs.forEach(function (r) {\r\n\t                v.$refs[r.fn] = dom_1.default.q(r.ele);\r\n\t            });\r\n\t            v.componentStatus = 'afterRender';\r\n\t            v.render();\r\n\t            return node;\r\n\t        }\r\n\t        function loopChildComponent(node) {\r\n\t            // 遍历组件子节点\r\n\t            if (v.name != self.root.name) {\r\n\t                var arr = self.findComponent(node.firstChild);\r\n\t                if (arr.length) {\r\n\t                    if (v.name) {\r\n\t                        // self.loopComponents(arr, v.data, Util.deepClone(v.components), v.name)\r\n\t                        self.loopComponents(arr, v.data, v.components, v.name);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            return node;\r\n\t        }\r\n\t        function handelClickDirective(node) {\r\n\t            //绑定事件\r\n\t            self.handelEventListener(v, node);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * “模板中的组件” 与 “注入的组件” 对比\r\n\t     * @param child 模板中的单个组件\r\n\t     * @param arr 注入的组件集合\r\n\t     */\r\n\t    renderComponents.prototype.compareChildComponentAndInjectComponents = function (child, arr) {\r\n\t        var self = this, flag = false;\r\n\t        if (child = this.root.name) {\r\n\t            flag = true;\r\n\t        }\r\n\t        else if (!arr.length && child != this.root.name) {\r\n\t            flag = false;\r\n\t        }\r\n\t        else {\r\n\t            flag = arr.some(function (v) {\r\n\t                if (v.name) {\r\n\t                    return child != self.root.name && child == v.name;\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t        if (!flag)\r\n\t            $log.error('名称为' + child + '的组件未找到');\r\n\t    };\r\n\t    /**\r\n\t     * 组件渲染后的事件绑定\r\n\t     * @param v 组件对象\r\n\t     * @param node 节点\r\n\t     */\r\n\t    renderComponents.prototype.handelEventListener = function (v, node) {\r\n\t        // 获取当前组件的事件集合\r\n\t        var attrArr = dom_1.default.getAttr(ID, node);\r\n\t        var newAttrArr = this.array_intersection(attrArr, this.eventList);\r\n\t        // 事件绑定处理\r\n\t        if (newAttrArr.length) {\r\n\t            var arr = newAttrArr.filter(function (ev) {\r\n\t                return ev.which == v.name;\r\n\t            });\r\n\t            arr.forEach(function (val) {\r\n\t                if (document.querySelectorAll(val.ele)) {\r\n\t                    try {\r\n\t                        for (var _i = 0, _a = document.querySelectorAll(val.ele); _i < _a.length; _i++) {\r\n\t                            var dq = _a[_i];\r\n\t                            dq.addEventListener(val.type, function (event) {\r\n\t                                try {\r\n\t                                    if (val.fn.toString().match(/\\(\\)$/)) {\r\n\t                                        if (v.hasOwnProperty(val.fn.toString().split('()')[0])) {\r\n\t                                            index_1.default.parse(val.fn)(v, { $event: event });\r\n\t                                        }\r\n\t                                        else {\r\n\t                                            $log.error('组件' + v.name + '中不存在方法' + val.fn);\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        $log.error('组件' + v.name + '中方法' + val.fn + '语法错误');\r\n\t                                    }\r\n\t                                }\r\n\t                                catch (e) {\r\n\t                                    console.log(e);\r\n\t                                }\r\n\t                            }, false);\r\n\t                        }\r\n\t                    }\r\n\t                    catch (e) {\r\n\t                        $log.error(e);\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    $log.error('属性为' + val.ele + '的节点不存在！');\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 监听data数据改变\r\n\t     * @param v 组件对象\r\n\t     */\r\n\t    renderComponents.prototype.handelDataChange = function (v, type) {\r\n\t        var _this = this;\r\n\t        var _loop_1 = function (i) {\r\n\t            HandelEventer_1.default.listen(i, function (info) {\r\n\t                if (info.target == v.token && JSON.stringify(info.oldVal) != JSON.stringify(info.newVal)) {\r\n\t                    // 获取组件原始的tpl，将其转为dom\r\n\t                    var parseNode = dom_1.default.create(_this.templateId[v.token]);\r\n\t                    var dataPos = _this.dataPosition(i, parseNode, v.name);\r\n\t                    // 在dom渲染之前执行，更新data数据\r\n\t                    _this.updateData(i, info);\r\n\t                    if (dom_1.default.q(util_1.default._cameCase(v.name))) {\r\n\t                        // data数据改变重新渲染对象的节点\r\n\t                        _this.dataChangeToDom(parseNode, dataPos, info, v.name);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\t        };\r\n\t        for (var i in v.data) {\r\n\t            _loop_1(i);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 在dom渲染之前执行，更新data数据\r\n\t     * @param key data的key\r\n\t     * @param info 更改的信息\r\n\t     */\r\n\t    renderComponents.prototype.updateData = function (key, info) {\r\n\t        // 所属组件\r\n\t        var component = info.which;\r\n\t        this.CObj[component].data[key] = info.newVal;\r\n\t    };\r\n\t    /**\r\n\t     * data数据改变重新渲染对象的节点\r\n\t     * @param parseNode 原始的dom节点\r\n\t     * @param dataPos 改变的数据集合\r\n\t     * @param info data的变化信息\r\n\t     * @param component 所属组件\r\n\t     */\r\n\t    renderComponents.prototype.dataChangeToDom = function (parseNode, dataPos, info, component) {\r\n\t        // 文本类型\r\n\t        this.loopTextToDom(parseNode, dataPos, info, component);\r\n\t        // 属性类型\r\n\t        this.loopAttrToDom(dataPos, info, component);\r\n\t    };\r\n\t    /**\r\n\t     * 文本改变渲染对应的dom节点\r\n\t     * @param parseNode 编译的节点\r\n\t     * @param dataPos 改变的数据集合\r\n\t     * @param info data的变化信息\r\n\t     * @param component 所属组件\r\n\t     */\r\n\t    renderComponents.prototype.loopTextToDom = function (parseNode, dataPos, info, component) {\r\n\t        var textData = dataPos.filter(function (df) {\r\n\t            return df.type == 'text';\r\n\t        });\r\n\t        if (textData.length) {\r\n\t            textData.forEach(function (dp) {\r\n\t                var originNode = parseNode[0].parentNode.querySelector(dp.position).childNodes[dp.item].textContent;\r\n\t                document.querySelector(dp.position).childNodes[dp.item].textContent = parseTpl_1.default(originNode, info.new, info.props);\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 属性改变渲染对应的dom节点\r\n\t     * @param dataPos 改变的数据集合\r\n\t     * @param info data的变化信息\r\n\t     * @param component 所属组件\r\n\t     */\r\n\t    renderComponents.prototype.loopAttrToDom = function (dataPos, info, component) {\r\n\t        var _this = this;\r\n\t        var self = this;\r\n\t        var attrData = dataPos.filter(function (df) {\r\n\t            return df.type == 'attr';\r\n\t        });\r\n\t        if (attrData.length) {\r\n\t            attrData.forEach(function (dp) {\r\n\t                // 处理指令\r\n\t                switch (dp.attr) {\r\n\t                    case 'c-show':\r\n\t                        var newAttr = dom_1.default.boolToDisplay(index_1.default.parse(dp.value)(info.new));\r\n\t                        dom_1.default.q(dp.position).style.display = newAttr;\r\n\t                        break;\r\n\t                    case 'c-if':\r\n\t                        var dom = dom_1.default.q(dp.position);\r\n\t                        if (dom != undefined) {\r\n\t                            dom_1.default.q(dp.position).setAttribute(dp.attr, info.newVal);\r\n\t                        }\r\n\t                        _this.handelIf(dp, component);\r\n\t                        break;\r\n\t                    case 'c-for':\r\n\t                        _this.loopCforToDom(dataPos, _this.CObj[component], 'dataChange');\r\n\t                        break;\r\n\t                    default:\r\n\t                        changeAttr(dp);\r\n\t                }\r\n\t                function changeAttr(dp) {\r\n\t                    dom_1.default.q(dp.position).setAttribute(dp.attr, info.newVal);\r\n\t                    // 更新componentAttrs\r\n\t                    self.componentAttrs[dp.componentToken][dp.attr] = info.newVal;\r\n\t                }\r\n\t                //父组件的属性改变\r\n\t                function handelComponent(dp) {\r\n\t                    var childChangePos = self.dataPosition(dp.attr, dom_1.default.create(self.templateId[dp.componentToken]), component);\r\n\t                    // 文本类型\r\n\t                    var childChangePosText = childChangePos.filter(function (df) {\r\n\t                        return df.type == 'text';\r\n\t                    });\r\n\t                    childChangePosText.forEach(function (chItem) {\r\n\t                        var changedComponent = self.CObj[dp.componentName], changedOriginComponentProps = changedComponent.props, changedComponentData = changedComponent.data, changedPropKey = dp.attr, changedPropVal = self.componentAttrs[dp.componentToken][dp.attr], changedComponentProps = self.combineChangedProps(changedPropKey, changedPropVal, changedOriginComponentProps);\r\n\t                        var changedOrginNode = dom_1.default.create(self.templateId[dp.componentToken]);\r\n\t                        var changedOrginText = changedOrginNode[0].parentNode.querySelector(chItem.position).childNodes[chItem.item].textContent;\r\n\t                        dom_1.default.q(chItem.position).childNodes[chItem.item].textContent = parseTpl_1.default(changedOrginText, changedComponentData, changedComponentProps);\r\n\t                    });\r\n\t                    // 属性类型\r\n\t                    var childChangePosAttr = childChangePos.filter(function (df) {\r\n\t                        return df.type == 'attr';\r\n\t                    });\r\n\t                    childChangePosAttr.forEach(function (chItem) {\r\n\t                        // 父组件的attr值与子组件的props值进行联动\r\n\t                        if (dp.attr == chItem.value) {\r\n\t                            chItem.value = dp.value;\r\n\t                        }\r\n\t                        dom_1.default.q(chItem.position).setAttribute(chItem.attr, chItem.value);\r\n\t                        // 更新componentAttrs\r\n\t                        self.componentAttrs[chItem.componentToken][chItem.attr] = chItem.value;\r\n\t                        self.componentAttrs[chItem.componentToken][chItem.attr] = chItem.value;\r\n\t                        if (chItem.isComponent) {\r\n\t                            handelComponent(chItem);\r\n\t                        }\r\n\t                    });\r\n\t                }\r\n\t                if (dp.isComponent) {\r\n\t                    handelComponent(dp);\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 处理c-for指令\r\n\t     * @param arr c-for 集合\r\n\t     * @param component 指令所在组件\r\n\t     */\r\n\t    renderComponents.prototype.loopCforToDom = function (arr, component, reRender) {\r\n\t        var _this = this;\r\n\t        var currentRepeat = arr.filter(function (rVal) {\r\n\t            return rVal.which == component.name;\r\n\t        });\r\n\t        var self = this;\r\n\t        currentRepeat.forEach(function (re) {\r\n\t            // 解析指令，获取重复次数\r\n\t            var match2 = re.fn.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)\\s*$/);\r\n\t            if (!match2) {\r\n\t                $log.error('c-for格式有误');\r\n\t            }\r\n\t            var itemExp = match2[1];\r\n\t            var itemsExp = match2[2];\r\n\t            var items = _this.inComponent(itemsExp, component);\r\n\t            if (items && util_1.default.type(items) == 'array' && items.length) {\r\n\t                if (reRender == 'dataChange') {\r\n\t                    dom_1.default.removeDomExpectWhich(0, '[c-for-id=\"' + dom_1.default.q(re.ele).getAttribute('c-for-id') + '\"]');\r\n\t                }\r\n\t                // 渲染单个有c-for指令的模板\r\n\t                items.forEach(function (item, i) {\r\n\t                    // 克隆节点，重复次数\r\n\t                    var newn = dom_1.default.q(re.ele).cloneNode(true);\r\n\t                    var data = {};\r\n\t                    data[match2[1]] = item;\r\n\t                    newn.innerHTML = parseTpl_1.default(re.html, data, self.CObj[component.name]['props'] || {});\r\n\t                    var newNode = self.loopNodes(component.name, dom_1.default.create(newn.outerHTML));\r\n\t                    var innerComponents = self.findComponent(newNode[0]);\r\n\t                    newNode[0].setAttribute('c-for-id', re.id);\r\n\t                    // 重新编译节点\r\n\t                    if (i == 0) {\r\n\t                        dom_1.default.q(re.ele).innerHTML = newNode[0].innerHTML;\r\n\t                        dom_1.default.q(re.ele).setAttribute('c-for-id', re.id);\r\n\t                    }\r\n\t                    else {\r\n\t                        var el = document.querySelectorAll('[c-for-id=\"' + re.id + '\"][c-for=\"' + re.fn + '\"]');\r\n\t                        el[el.length - 1].insertAdjacentElement('afterEnd', newNode[0]);\r\n\t                    }\r\n\t                    if (innerComponents.length) {\r\n\t                        self.loopComponents(util_1.default.deepClone(innerComponents), data, [], component.name);\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t            else {\r\n\t                $log.error('组件' + component.name + '内c-for指令的格式不正确');\r\n\t            }\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 处理c-if指令\r\n\t     * @param arr c-if 集合\r\n\t     * @param component 指令所在组件\r\n\t     */\r\n\t    renderComponents.prototype.loopIfToDom = function (arr, component) {\r\n\t        var _this = this;\r\n\t        var currentIf = arr.filter(function (ifVal) {\r\n\t            return ifVal.which == component.name;\r\n\t        });\r\n\t        currentIf.forEach(function (cIf) {\r\n\t            _this.handelIf(cIf, component.name);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 移除c-if指令所在的节点\r\n\t     * @param cIf c-if指令所绑定的节点信息\r\n\t     */\r\n\t    renderComponents.prototype.handelIf = function (cIf, componentName) {\r\n\t        var ifDom = dom_1.default.q(cIf.ele || cIf.position);\r\n\t        // 节点存在，移除节点\r\n\t        if (ifDom != undefined) {\r\n\t            var ifInfo = ifDom.getAttribute('c-if');\r\n\t            if (ifInfo == 'true') {\r\n\t                ifDom.parentNode.replaceChild(dom_1.default.addComment('c-if:' + cIf.id + ''), ifDom);\r\n\t                this.ifTpl[cIf.id] = ifDom.outerHTML;\r\n\t            }\r\n\t        }\r\n\t        // 已经被移除，还原节点\r\n\t        if (ifDom == undefined) {\r\n\t            dom_1.default.replaceComment(dom_1.default.q(util_1.default._cameCase(componentName)), cIf.attr + ':' + cIf.id, dom_1.default.create(this.ifTpl[cIf.id])[0]);\r\n\t            // 更改属性\r\n\t            dom_1.default.attr((cIf.ele || cIf.position), 'c-if', false);\r\n\t            dom_1.default.q(cIf.ele || cIf.position).style.display = 'block';\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 处理c-html指令\r\n\t     * @param arr c-html指令集合\r\n\t     * @param component 所属组件\r\n\t     */\r\n\t    renderComponents.prototype.loopHtmlToDom = function (arr, component) {\r\n\t        var currentHtml = arr.filter(function (h) {\r\n\t            return h.which == component.name;\r\n\t        });\r\n\t        currentHtml.forEach(function (h) {\r\n\t            dom_1.default.q(h.ele).innerHTML = dom_1.default.attr(h.ele, 'c-html');\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 组合经过改变的组件的props值\r\n\t     * @param key\r\n\t     * @param val\r\n\t     * @param props\r\n\t     */\r\n\t    renderComponents.prototype.combineChangedProps = function (key, val, props) {\r\n\t        if (props[key]) {\r\n\t            props[key]['default'] = val;\r\n\t        }\r\n\t        return props;\r\n\t    };\r\n\t    /**\r\n\t     * 数组去重\r\n\t     * @param a\r\n\t     * @param b\r\n\t     */\r\n\t    renderComponents.prototype.array_intersection = function (a, b) {\r\n\t        var result = [];\r\n\t        for (var i = 0; i < b.length; i++) {\r\n\t            var temp = b[i].id;\r\n\t            for (var j = 0; j < a.length; j++) {\r\n\t                if (temp === a[j]) {\r\n\t                    result.push(b[i]);\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    /**\r\n\t     * 判断dom节点是组件\r\n\t     * @param node dom节点\r\n\t     */\r\n\t    renderComponents.prototype.isComponent = function (node) {\r\n\t        var name = dom_1.default.parseName(node);\r\n\t        return this.CObj[name] != undefined;\r\n\t    };\r\n\t    /**\r\n\t     * 判断表达式内的字符是否在组件的data中\r\n\t     * @param name data属性名称\r\n\t     * @param expression '{{xxx}}'\r\n\t     * @returns 存在返回{{ }}内的表达式，否在返回null\r\n\t     */\r\n\t    renderComponents.prototype.isComponentData = function (name, expression) {\r\n\t        var regExp = new RegExp(\"{{\\\\s*([\\\\s\\\\S]*\" + name + \"[\\\\s\\\\S]*)\\\\s*}}\", \"gm\");\r\n\t        var res = regExp.exec(expression);\r\n\t        if (res == null) {\r\n\t            return null;\r\n\t        }\r\n\t        var exp = {\r\n\t            '': true,\r\n\t            '+': true,\r\n\t            '-': true,\r\n\t            '*': true,\r\n\t            '/': true,\r\n\t            '(': true,\r\n\t            ')': true,\r\n\t            '.': true,\r\n\t            '[': true,\r\n\t            ']': true,\r\n\t            '!': true,\r\n\t            '!=': true,\r\n\t            '!==': true,\r\n\t            '>': true,\r\n\t            '>=': true,\r\n\t            '>==': true,\r\n\t            '<': true,\r\n\t            '<=': true,\r\n\t            '<==': true,\r\n\t            '?': true,\r\n\t            ':': true\r\n\t        };\r\n\t        var nameIndex = res[1].indexOf(name), prev1 = res[1].charAt(nameIndex - 1), prev2 = res[1].charAt(nameIndex - 2), prev3 = res[1].charAt(nameIndex - 3), next1 = res[1].charAt(nameIndex + 1), next2 = res[1].charAt(nameIndex + 2), next3 = res[1].charAt(nameIndex + 3);\r\n\t        if (exp[prev1] || exp[prev2] || exp[prev3] || exp[next1] || exp[next2] || exp[next3]) {\r\n\t            return res[1];\r\n\t        }\r\n\t        return null;\r\n\t    };\r\n\t    /**\r\n\t     * 获取某个data属性名在节点中的位置\r\n\t     * @param name data属性名称\r\n\t     * @param node dom节点\r\n\t     * @param component 所属组件\r\n\t     */\r\n\t    renderComponents.prototype.dataPosition = function (name, node, component) {\r\n\t        var res = [], self = this;\r\n\t        // 属性\r\n\t        function loopAttr(node) {\r\n\t            if (typeof node == 'object' && node.length) {\r\n\t                for (var i = 0; i < node.length; i++) {\r\n\t                    if (node[i].nodeType == 1 && node[i].hasAttributes()) {\r\n\t                        for (var j = 0, len = node[i].attributes; j < len.length; j++) {\r\n\t                            if (len[j].name == 'c-for') {\r\n\t                                var match2 = len[j].value.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)\\s*$/);\r\n\t                                if (!match2) {\r\n\t                                    $log.error('组件' + component + '内的c-for指令表达式' + len[j] + '有误');\r\n\t                                }\r\n\t                                if (match2[2] == name && !self.isComponent(node[i])) {\r\n\t                                    res = res.concat({\r\n\t                                        attr: len[j].name,\r\n\t                                        fn: len[j].value,\r\n\t                                        type: 'attr',\r\n\t                                        id: node[i].getAttribute(ID),\r\n\t                                        ele: '[' + ID + '=\"' + node[i].getAttribute(ID) + '\"]',\r\n\t                                        item: i,\r\n\t                                        isComponent: false,\r\n\t                                        html: node[i].innerHTML,\r\n\t                                        which: component //所属组件\r\n\t                                    });\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                var attrVal = self.isComponentData(name, len[j].value);\r\n\t                                if (attrVal) {\r\n\t                                    var isCs = self.isComponent(node[i]);\r\n\t                                    if (isCs) {\r\n\t                                        res = res.concat({\r\n\t                                            attr: len[j].name,\r\n\t                                            value: name,\r\n\t                                            type: 'attr',\r\n\t                                            id: node[i].getAttribute(ID),\r\n\t                                            position: '[' + ID + '=\"' + node[i].getAttribute(ID) + '\"]',\r\n\t                                            item: i,\r\n\t                                            isComponent: true,\r\n\t                                            componentName: dom_1.default.parseName(node[i]),\r\n\t                                            componentToken: node[i].getAttribute(ID),\r\n\t                                            which: component //所属组件\r\n\t                                        });\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        res = res.concat({\r\n\t                                            attr: len[j].name,\r\n\t                                            value: attrVal,\r\n\t                                            type: 'attr',\r\n\t                                            id: node[i].getAttribute(ID),\r\n\t                                            position: '[' + ID + '=\"' + node[i].getAttribute(ID) + '\"]',\r\n\t                                            item: i,\r\n\t                                            isComponent: false,\r\n\t                                            which: component //所属组件\r\n\t                                        });\r\n\t                                    }\r\n\t                                }\r\n\t                            }\r\n\t                        }\r\n\t                        if (node[i].childNodes && node[i].childNodes.length) {\r\n\t                            loopAttr(node[i].childNodes);\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        loopAttr(node);\r\n\t        // textContent\r\n\t        function loopText(node) {\r\n\t            if (typeof node == 'object' && node.length) {\r\n\t                for (var i = 0; i < node.length; i++) {\r\n\t                    if (node[i].nodeType == 3) {\r\n\t                        var text = node[i].textContent;\r\n\t                        if (self.isComponentData(name, text)) {\r\n\t                            res = res.concat({\r\n\t                                value: name,\r\n\t                                type: 'text',\r\n\t                                position: '[' + ID + '=\"' + node[i].parentNode.getAttribute(ID) + '\"]',\r\n\t                                item: i,\r\n\t                                isComponent: false\r\n\t                            });\r\n\t                        }\r\n\t                    }\r\n\t                    if (node[i].childNodes && node[i].childNodes.length) {\r\n\t                        loopText(node[i].childNodes);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        loopText(node);\r\n\t        return res;\r\n\t    };\r\n\t    /**\r\n\t     * 组件集合转json对象\r\n\t     * @param arr\r\n\t     */\r\n\t    renderComponents.prototype.listToObj = function (arr) {\r\n\t        var obj = {};\r\n\t        arr.forEach(function (v) {\r\n\t            obj[v.name] = v;\r\n\t        });\r\n\t        return obj;\r\n\t    };\r\n\t    /**\r\n\t     * 获取组件的名称集合\r\n\t     */\r\n\t    renderComponents.prototype.getComponentNameList = function () {\r\n\t        var arr = [];\r\n\t        this.CList.forEach(function (v) {\r\n\t            arr.push(v.name);\r\n\t        });\r\n\t        return arr;\r\n\t    };\r\n\t    /**\r\n\t     * 根据dom节点获取component， 遍历子节点\r\n\t     * @param node dom节点\r\n\t     */\r\n\t    renderComponents.prototype.findComponent = function (node) {\r\n\t        if (node.nodeType == 3) {\r\n\t            return;\r\n\t        }\r\n\t        var arr = [];\r\n\t        var self = this;\r\n\t        // tag标签\r\n\t        function loopTagNode(node) {\r\n\t            var normalizedNodeName = self.normalizeDirective(dom_1.default.getNodeName(node).toLowerCase());\r\n\t            if (self.componentNames.includes(normalizedNodeName)) {\r\n\t                // arr.push(Util.deepClone(Util.extend(self.CObj[normalizedNodeName], {token: node.getAttribute(ID)})));\r\n\t                arr.push(util_1.default.extend(self.CObj[normalizedNodeName], { token: node.getAttribute(ID) }));\r\n\t            }\r\n\t            if (node.childNodes && node.childNodes.length) {\r\n\t                node.childNodes.forEach(function (v) {\r\n\t                    if (v.nodeType != 3) {\r\n\t                        loopTagNode(v);\r\n\t                    }\r\n\t                });\r\n\t            }\r\n\t        }\r\n\t        loopTagNode(node);\r\n\t        return arr;\r\n\t    };\r\n\t    /**\r\n\t     * 根据dom节点获取component， 不遍历子节点\r\n\t     * @param node dom节点\r\n\t     * @param name 组件名称\r\n\t     */\r\n\t    renderComponents.prototype.getComponent = function (node, name) {\r\n\t        var arr = [];\r\n\t        var self = this;\r\n\t        // tag标签\r\n\t        function loopTagNode(node) {\r\n\t            var normalizedNodeName = util_1.default.cameCase(dom_1.default.getNodeName(node).toLowerCase());\r\n\t            if (self.componentNames.includes(normalizedNodeName)) {\r\n\t                arr.push(normalizedNodeName);\r\n\t                var obj = {};\r\n\t                for (var i = 0, len = node.attributes; i < len.length; i++) {\r\n\t                    if (len[i].name != ID) {\r\n\t                        obj[len[i].name] = parseTpl_1.default(len[i].value, self.CObj[name].data, self.CObj[name].props);\r\n\t                    }\r\n\t                }\r\n\t                if (!dom_1.default.noOtherAttr(ID, node)) {\r\n\t                    obj['component'] = normalizedNodeName;\r\n\t                    self.componentAttrs[node.getAttribute(ID)] = obj;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        loopTagNode(node);\r\n\t        return arr;\r\n\t    };\r\n\t    /**\r\n\t     * 判断指令是否含有mulit属性\r\n\t     * @param name\r\n\t     */\r\n\t    renderComponents.prototype.directiveIsMulit = function (name) {\r\n\t        for (var i = 0, len = this.CList; i < len.length; i++) {\r\n\t            if (len[i]['name'] == name && len[i].mulit == true) {\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    /**\r\n\t     * 组件指令的层级关系\r\n\t     * @param a\r\n\t     * @param b\r\n\t     */\r\n\t    renderComponents.prototype.componentLayer = function (a, b) {\r\n\t        var sort = b.layer - a.layer;\r\n\t        if (sort == 0) {\r\n\t            if (a.name != b.name) {\r\n\t                return a.name < b.name ? -1 : 1;\r\n\t            }\r\n\t            else {\r\n\t                return a.cid - b.cid;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            return sort;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 获取data数据改变后的模板\r\n\t     * @param html\r\n\t     * @param data\r\n\t     */\r\n\t    renderComponents.prototype.getChangedData = function (html, data, props) {\r\n\t        return parseTpl_1.default(html, data, props);\r\n\t    };\r\n\t    /**\r\n\t     * 序列化指令\r\n\t     * @param name\r\n\t     */\r\n\t    renderComponents.prototype.normalizeDirective = function (name) {\r\n\t        return util_1.default.cameCase(name.replace(PREFIX_DIRECTIVE, ''));\r\n\t    };\r\n\t    /**\r\n\t     * 判断变量是否在组件的data,props之中, 并返回结果\r\n\t     * @param exp 变量\r\n\t     * @param component 组件\r\n\t     */\r\n\t    renderComponents.prototype.inComponent = function (exp, component) {\r\n\t        return component.data[exp] || component.props.default[exp];\r\n\t    };\r\n\t    return renderComponents;\r\n\t}());\r\n\texports.default = renderComponents;\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t//对象属性\r\n\tvar PROPERTY = ['constructor', '__proto__', '__defineGetter__', '__defineSetter__', '__lookupGetter__', '__loopupSetter__'];\r\n\texports.PROPERTY = PROPERTY;\r\n\t//window对象\r\n\tvar WINDOW = ['document', 'alert', 'location', 'setInterval'];\r\n\texports.WINDOW = WINDOW;\r\n\t//dom节点\r\n\tvar NODE = ['nodeName', 'children'];\r\n\texports.NODE = NODE;\r\n\t//函数\r\n\tvar FUN = [Function.prototype.call, Function.prototype.apply, Function.prototype.bind];\r\n\texports.FUN = FUN;\r\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar util_1 = __webpack_require__(1);\r\n\tvar $log = __webpack_require__(2);\r\n\tvar HandelDom = /** @class */ (function () {\r\n\t    function HandelDom() {\r\n\t        this.BOOLEAN_ATTRS = {\r\n\t            selected: true\r\n\t        };\r\n\t        this.BOOLEAN_ELEMENT = {};\r\n\t    }\r\n\t    /**\r\n\t     * 获取dom节点\r\n\t     * @param str 节点标识,class,id...\r\n\t     */\r\n\t    HandelDom.prototype.q = function (str) {\r\n\t        return document.querySelector(str);\r\n\t    };\r\n\t    /**\r\n\t     * 根据字符串创建dom节点，返回dom节点\r\n\t     * @param str\r\n\t     */\r\n\t    HandelDom.prototype.createDom = function (str) {\r\n\t        if (util_1.default.type(str) != 'string') {\r\n\t            $log.error('组件模板' + str + '必须为字符串，请检查组件的template,templateId,templateUrl属性');\r\n\t        }\r\n\t        var html = \"\" + str;\r\n\t        html = html.trim();\r\n\t        html = html.replace(/<!--[\\s\\S]*?-->/gm, ''); //去除html注释\r\n\t        html = html.replace(/>\\s+([^\\s<]*)\\s+</gm, '>$1<').trim(); //去除html标签间的多余空白\r\n\t        var pattern = /([^>]*)(<([a-z/][-a-z0-9_:.]*)[^>/]*(\\/*)>)([^<]*)/gm, matchArr, start = Date.now();\r\n\t        var arr = [];\r\n\t        while ((matchArr = pattern.exec(html))) {\r\n\t            var textBefore = matchArr[1], //获取排在标签前的文本\r\n\t            elem = matchArr[2], //获取整个开标签或闭标签\r\n\t            elemName = matchArr[3], //获取标签名\r\n\t            closeSign = matchArr[4], //判断是否为自闭合标签标记\r\n\t            textAfter = matchArr[5]; //获取排在标签后的文本\r\n\t            arr.push(elemName);\r\n\t        }\r\n\t        var dom = document.createElement(arr[0]);\r\n\t        dom.innerHTML = str;\r\n\t        return dom;\r\n\t    };\r\n\t    /**\r\n\t     * 根据字符串创建dom节点，返回dom的子节点\r\n\t     * @param str\r\n\t     */\r\n\t    HandelDom.prototype.create = function (str) {\r\n\t        var div = this.createDom(str);\r\n\t        return div.childNodes;\r\n\t    };\r\n\t    /**\r\n\t    * 获取节点名称\r\n\t    * @param node\r\n\t    */\r\n\t    HandelDom.prototype.getNodeName = function (node) {\r\n\t        return node.nodeName ? node.nodeName : node[0].nodeName;\r\n\t    };\r\n\t    /**\r\n\t     * 获取节点的驼峰名称\r\n\t     * @param node\r\n\t     */\r\n\t    HandelDom.prototype.parseName = function (node) {\r\n\t        return util_1.default.cameCase(node.tagName.toLowerCase());\r\n\t    };\r\n\t    /**\r\n\t     * 包括dom节点\r\n\t     * @param str 节点字符串\r\n\t     * @param wrap 包括的tag标签\r\n\t     */\r\n\t    HandelDom.prototype.wrapDom = function (str, wrap) {\r\n\t        return \"<\" + wrap + \">\" + str + \"</\" + wrap + \">\";\r\n\t    };\r\n\t    /**\r\n\t     * 获取某个属性的集合\r\n\t     * @param attr 属性名\r\n\t     * @param node 节点\r\n\t     */\r\n\t    HandelDom.prototype.getAttr = function (attr, node) {\r\n\t        var arr = [];\r\n\t        if (node.nodeType == 1 && node.getAttribute(attr)) {\r\n\t            arr.push(node.getAttribute(attr));\r\n\t        }\r\n\t        if (node.childNodes && node.childNodes.length) {\r\n\t            getA(node.childNodes);\r\n\t        }\r\n\t        function getA(node) {\r\n\t            for (var i = 0; i < node.length; i++) {\r\n\t                if (node[i].nodeType == 1 && node[i].getAttribute(attr)) {\r\n\t                    arr.push(node[i].getAttribute(attr));\r\n\t                }\r\n\t                if (node[i].childNodes && node[i].childNodes.length) {\r\n\t                    getA(node[i].childNodes);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return arr;\r\n\t    };\r\n\t    /**\r\n\t     * 父组件的data值覆盖子组件的props值（组件的attr值与props对比，有则覆盖）\r\n\t     * @param attr {component:'hello', 'width': 100}\r\n\t     * @param props { 'width': { default:50, type:Number } }\r\n\t     */\r\n\t    HandelDom.prototype.combineAttrAndProps = function (attr, props) {\r\n\t        if (util_1.default.isEmpty(attr))\r\n\t            return props;\r\n\t        if (attr) {\r\n\t            var newAttr = util_1.default.expectSome(attr, 'component');\r\n\t            for (var i in newAttr) {\r\n\t                if (props && props[i]) {\r\n\t                    props[i].default = newAttr[i];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return props;\r\n\t    };\r\n\t    /**\r\n\t     * 节点没有除了attr以外的其他属性\r\n\t     * @param attr 属性\r\n\t     * @param node 节点\r\n\t     */\r\n\t    HandelDom.prototype.noOtherAttr = function (attr, node) {\r\n\t        if (node.nodeType == 1) {\r\n\t            if (node.attributes) {\r\n\t                if (node.attributes.length >= 2)\r\n\t                    return false;\r\n\t                if (node.attributes.length == 1) {\r\n\t                    if (node.attributes[0].name == attr)\r\n\t                        return true;\r\n\t                    else\r\n\t                        return false;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 根据bool值转化成display\r\n\t     * @param bool true, false\r\n\t     */\r\n\t    HandelDom.prototype.boolToDisplay = function (bool) {\r\n\t        if (bool == 'true' || bool == true)\r\n\t            return 'block';\r\n\t        if (bool == 'false' || bool == false)\r\n\t            return 'none';\r\n\t    };\r\n\t    /**\r\n\t     * 获取节点除了某些属性外的其他属性\r\n\t     * @param node 节点\r\n\t     * @param attr 属性\r\n\t     */\r\n\t    HandelDom.prototype.expectSomeAttr = function (node, attr) {\r\n\t        var obj = {};\r\n\t        if (node.attributes && node.attributes.length) {\r\n\t            for (var i = 0, len = node.attributes; i < len.length; i++) {\r\n\t                if (len[i].name != attr) {\r\n\t                    obj[len[i].name] = len[i].value;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return obj;\r\n\t    };\r\n\t    /**\r\n\t     * 添加注释节点\r\n\t     * @param str 注释内容\r\n\t     */\r\n\t    HandelDom.prototype.addComment = function (str) {\r\n\t        var dom = document.createComment(str);\r\n\t        return dom;\r\n\t    };\r\n\t    /**\r\n\t     * 替换注释节点\r\n\t     * @param node 父节点\r\n\t     * @param text 注释内容\r\n\t     * @param newNode 新的节点\r\n\t     */\r\n\t    HandelDom.prototype.replaceComment = function (node, text, newNode) {\r\n\t        var iterator = document.createNodeIterator(node, NodeFilter.SHOW_COMMENT, null, false);\r\n\t        var n = iterator.nextNode();\r\n\t        while (n) {\r\n\t            if (n.nodeValue == text) {\r\n\t                n.parentNode.replaceChild(newNode, n);\r\n\t            }\r\n\t            n = iterator.nextNode();\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 更改节点属性\r\n\t     * @param str 节点\r\n\t     * @param key 属性名\r\n\t     * @param val 属性值\r\n\t     */\r\n\t    HandelDom.prototype.attr = function (str, key, val) {\r\n\t        var dom = this.q(str);\r\n\t        if (dom != undefined) {\r\n\t            if (arguments.length == 3) {\r\n\t                dom.setAttribute(key, val);\r\n\t            }\r\n\t            if (arguments.length == 2) {\r\n\t                return dom.getAttribute(key);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 返回节点的html\r\n\t     * @param str 节点标识\r\n\t     */\r\n\t    HandelDom.prototype.hasHtml = function (str) {\r\n\t        if (DOM.q(str)) {\r\n\t            return DOM.q(str).innerHTML;\r\n\t        }\r\n\t        return undefined;\r\n\t    };\r\n\t    /**\r\n\t     * 返回require,import 的html\r\n\t     * @param str 节点标识\r\n\t     */\r\n\t    HandelDom.prototype.hasHtmlUrl = function (str) {\r\n\t        return str;\r\n\t    };\r\n\t    /**\r\n\t     * head添加style\r\n\t     * @param res style所属类型\r\n\t     * @param component style所属组件\r\n\t     */\r\n\t    HandelDom.prototype.addStyle = function (res, component) {\r\n\t        if (component.name == undefined) {\r\n\t            $log.error('找不到组件的name属性，无法添加style样式');\r\n\t        }\r\n\t        if (res == undefined) {\r\n\t            return;\r\n\t        }\r\n\t        // 组件的标签名称\r\n\t        var tag = util_1.default._cameCase(component.name);\r\n\t        switch (res.type) {\r\n\t            case 'string':\r\n\t                this.appendStyle(res.result, tag);\r\n\t                break;\r\n\t            case 'id':\r\n\t                if (this.q(res.result) == undefined) {\r\n\t                    $log.error('名称为' + component.name + '组件中，节点' + res.result + '不存在');\r\n\t                }\r\n\t                var inner = this.q(res.result).innerHTML;\r\n\t                this.appendStyle(inner, tag);\r\n\t                break;\r\n\t            case 'url':\r\n\t                this.appendStyle(res.result, tag);\r\n\t                break;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 将样式表添加到head里面\r\n\t     * @param inner 样式表内容\r\n\t     * @param title style的title属性，也是组件tag标签\r\n\t     */\r\n\t    HandelDom.prototype.appendStyle = function (inner, title) {\r\n\t        var style = \"\" + inner;\r\n\t        style = util_1.default.trimStr(style);\r\n\t        var newStyle = document.createElement('style');\r\n\t        newStyle.type = 'text/css';\r\n\t        newStyle.title = title;\r\n\t        newStyle.innerHTML = style;\r\n\t        this.q('head').appendChild(newStyle);\r\n\t        // 给选择符设置前缀\r\n\t        this.addSelectorPrefix(title);\r\n\t    };\r\n\t    /**\r\n\t     * 给选择符设置前缀\r\n\t     * @param title style的title属性\r\n\t     */\r\n\t    HandelDom.prototype.addSelectorPrefix = function (title) {\r\n\t        var stylesheet = document.styleSheets;\r\n\t        for (var i = 0; i < stylesheet.length; i++) {\r\n\t            if (stylesheet[i].title == title) {\r\n\t                for (var j = 0, cr = stylesheet[i].cssRules; j < cr.length; j++) {\r\n\t                    cr[j].selectorText = title + ' ' + cr[j].selectorText;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 移除具有相同属性的节点，第item个除外\r\n\t     * @param item 索引\r\n\t     * @param selector 节点选择器\r\n\t     */\r\n\t    HandelDom.prototype.removeDomExpectWhich = function (item, selector) {\r\n\t        var nodes = document.querySelectorAll(selector);\r\n\t        for (var i = 0; i < nodes.length; i++) {\r\n\t            if (i != item) {\r\n\t                nodes[i].parentNode.removeChild(nodes[i]);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    HandelDom.prototype.watch = function (node) {\r\n\t        // 观察dom数据变化\r\n\t        var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\r\n\t        var target = document.querySelector(node);\r\n\t        var observer = new MutationObserver(function (mu) {\r\n\t            // console.log(mu)\r\n\t        });\r\n\t        var config = { childList: true, attributes: true, characterData: true, subtree: true, attributeOldValue: true, characterDataOldValue: true };\r\n\t        observer.observe(target, config);\r\n\t    };\r\n\t    HandelDom.prototype.booleanAttr = function (node, nodeName) {\r\n\t    };\r\n\t    return HandelDom;\r\n\t}());\r\n\tvar DOM = new HandelDom();\r\n\texports.default = DOM;\r\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar parseHttp_1 = __webpack_require__(26);\r\n\tvar Http = /** @class */ (function () {\r\n\t    function Http() {\r\n\t    }\r\n\t    /**\r\n\t     * ajax请求方式，全配置\r\n\t     * @param param0\r\n\t     */\r\n\t    Http.prototype.ajax = function (_a) {\r\n\t        var _b = _a.type, type = _b === void 0 ? 'get' : _b, _c = _a.url, url = _c === void 0 ? '' : _c, data = _a.data;\r\n\t        return parseHttp_1.parseHttp(type, url, data);\r\n\t    };\r\n\t    /**\r\n\t     * get请求方式\r\n\t     * @param url\r\n\t     */\r\n\t    Http.prototype.get = function (url) {\r\n\t        return parseHttp_1.parseHttp('get', url, null);\r\n\t    };\r\n\t    /**\r\n\t     * post请求\r\n\t     * @param url\r\n\t     * @param data\r\n\t     */\r\n\t    Http.prototype.post = function (url, data) {\r\n\t        return parseHttp_1.parseHttp('post', url, data);\r\n\t    };\r\n\t    /**\r\n\t     * put请求\r\n\t     * @param url\r\n\t     * @param data\r\n\t     */\r\n\t    Http.prototype.put = function (url, data) {\r\n\t        return parseHttp_1.parseHttp('put', url, data);\r\n\t    };\r\n\t    /**\r\n\t     * delete请求\r\n\t     * @param url\r\n\t     * @param data\r\n\t     */\r\n\t    Http.prototype.delete = function (url, data) {\r\n\t        return parseHttp_1.parseHttp('delete', url, data);\r\n\t    };\r\n\t    return Http;\r\n\t}());\r\n\tvar http = new Http();\r\n\texports.default = http;\r\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar util_1 = __webpack_require__(1);\r\n\tvar $log = __webpack_require__(2);\r\n\tvar httpType = ['get', 'post', 'put', 'delete', 'head', 'options'];\r\n\t/**\r\n\t * 解析http请求\r\n\t * @param type 请求类型\r\n\t * @param url\r\n\t * @param data\r\n\t */\r\n\tfunction parseHttp(type, url, data) {\r\n\t    if (util_1.default.type(type) != 'string' && !httpType.includes(type.toLowerCase())) {\r\n\t        $log.error('http请求类型必须为' + httpType + '中的一个');\r\n\t    }\r\n\t    if (util_1.default.type(url) != 'string') {\r\n\t        $log.error('http请求的url参数需为字符');\r\n\t    }\r\n\t    if (data && util_1.default.type(data) != 'object') {\r\n\t        $log.error('http请求的data参数需为对象');\r\n\t    }\r\n\t    var promise = new Promise(function (resolve, reject) {\r\n\t        var xhr = new XMLHttpRequest();\r\n\t        xhr.open(type, url);\r\n\t        xhr.onreadystatechange = handel;\r\n\t        xhr.responseType = 'json';\r\n\t        xhr.setRequestHeader('Accept', 'application/json');\r\n\t        xhr.send(data || null);\r\n\t        function handel() {\r\n\t            if (this.readyState != 4) {\r\n\t                return;\r\n\t            }\r\n\t            if (this.status == 200) {\r\n\t                resolve(this.response);\r\n\t            }\r\n\t            else {\r\n\t                reject(new Error(this.statusText));\r\n\t            }\r\n\t        }\r\n\t    });\r\n\t    return promise;\r\n\t}\r\n\texports.parseHttp = parseHttp;\r\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar AST = __webpack_require__(6);\r\n\tvar LEXER = __webpack_require__(7);\r\n\tvar util_1 = __webpack_require__(1);\r\n\t/**\r\n\t * 抽象语法结构树\r\n\t [{ type: 'ASTBuilder.Program',\r\n\t  body:\r\n\t   { type: 'ASTBuilder.Binary',\r\n\t     boolean_expression:\r\n\t      { type: 'ASTBuilder.Binary',\r\n\t        operator: '>',\r\n\t        left: { type: 'ASTBuilder.Identifier', value: 'a' },\r\n\t        right: { type: 'ASTBuilder.MetaData', value: 2 } },\r\n\t     true_value: { type: 'ASTBuilder.MetaData', value: 1 },\r\n\t     error_value: { type: 'ASTBuilder.MetaData', value: 0 } } }]\r\n\t */\r\n\tvar ASTBuilder = /** @class */ (function () {\r\n\t    function ASTBuilder(lexer) {\r\n\t        this.lexer = lexer;\r\n\t        this.tokens = [];\r\n\t    }\r\n\t    /**\r\n\t     * 生成抽象语法结构树\r\n\t     * @param text\r\n\t     * @returns {Object}\r\n\t     */\r\n\t    ASTBuilder.prototype.ast = function (text) {\r\n\t        this.tokens = this.lexer.lex(text);\r\n\t        return this.init();\r\n\t    };\r\n\t    /**\r\n\t     * 结构树形式, ';'看作是多个表达式的组合，故词法树的body有对象进化为对象数组Array<object>\r\n\t     * @returns {{type: string, body: {}}}\r\n\t     */\r\n\t    ASTBuilder.prototype.init = function () {\r\n\t        var body = [];\r\n\t        while (true) {\r\n\t            if (this.tokens.length) {\r\n\t                body.push(this.pipeBuilder());\r\n\t            }\r\n\t            if (!util_1.default.expect(this.tokens, ';')) {\r\n\t                AST.ast_init['body'] = {};\r\n\t                AST.ast_init['body'] = body;\r\n\t                return util_1.default.clone(AST.ast_init);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 中介函数\r\n\t     * @returns {any}\r\n\t     */\r\n\t    ASTBuilder.prototype.agency = function () {\r\n\t        var agency;\r\n\t        if (util_1.default.expect(this.tokens, '(')) {\r\n\t            agency = this.pipeBuilder();\r\n\t            util_1.default.consume(this.tokens, ')');\r\n\t        }\r\n\t        else if (util_1.default.expect(this.tokens, '[')) {\r\n\t            agency = this.arrayBuilder();\r\n\t        }\r\n\t        else if (util_1.default.expect(this.tokens, '{')) {\r\n\t            agency = this.objectBuilder();\r\n\t        }\r\n\t        else if (LEXER.LETTER.hasOwnProperty(this.tokens[0]['text'])) {\r\n\t            if (this.tokens[0]['text'] == \"this\") {\r\n\t                agency = util_1.default.clone(AST.ast_this);\r\n\t            }\r\n\t            else {\r\n\t                AST.ast_constant['value'] = LEXER.LETTER[util_1.default.consume(this.tokens)['text']];\r\n\t                agency = util_1.default.clone(AST.ast_constant);\r\n\t            }\r\n\t        }\r\n\t        else if (util_1.default.exitFirst(this.tokens).identifier) {\r\n\t            agency = this.identifierBuilder();\r\n\t        }\r\n\t        else {\r\n\t            agency = this.constantBuilder();\r\n\t        }\r\n\t        /**\r\n\t         * 处理带有 '.', '[' 的标识符\r\n\t         * 结构树：{\"type\":\"ASTBuilder.Member\",\"object\":{\"type\":\"ASTBuilder.Member\",\"object\":{\"type\":\"ASTBuilder.Identifier\",\"value\":\"a\"},\"property\":{\"type\":\"ASTBuilder.Identifier\",\"value\":\"b\"}},\"property\":{\"type\":\"ASTBuilder.Identifier\",\"value\":\"c\"}}\r\n\t         */\r\n\t        var type;\r\n\t        while (type = util_1.default.expect(this.tokens, '.', '[', '(')) {\r\n\t            agency = this.memberBuilder(type, agency);\r\n\t        }\r\n\t        // console.log(JSON.stringify(agency));\r\n\t        return agency;\r\n\t    };\r\n\t    /**\r\n\t     * 遍历'[]','{}','()'等对称标识符\r\n\t     */\r\n\t    ASTBuilder.prototype.closingTags = function (quote) {\r\n\t        var arr = [], that = this;\r\n\t        if (!util_1.default.exitFirst(this.tokens, quote)) {\r\n\t            do {\r\n\t                if (util_1.default.exitFirst(this.tokens, quote))\r\n\t                    break;\r\n\t                arr.push(that.agency());\r\n\t            } while (util_1.default.expect(this.tokens, ','));\r\n\t        }\r\n\t        util_1.default.consume(this.tokens, quote);\r\n\t        return arr;\r\n\t    };\r\n\t    /**\r\n\t     * 结构树的常量部分\r\n\t     * @returns {{type: string, value: {}}}\r\n\t     */\r\n\t    ASTBuilder.prototype.constantBuilder = function () {\r\n\t        AST.ast_constant['value'] = util_1.default.consume(this.tokens)['value'];\r\n\t        return util_1.default.clone(AST.ast_constant);\r\n\t    };\r\n\t    /**\r\n\t    * 结构树的标识符部分\r\n\t    * @returns {{type: string, value: {}}}\r\n\t    */\r\n\t    ASTBuilder.prototype.identifierBuilder = function () {\r\n\t        AST.ast_identifier['value'] = util_1.default.consume(this.tokens)['value'];\r\n\t        return util_1.default.clone(AST.ast_identifier);\r\n\t    };\r\n\t    /**\r\n\t     * 结构树的数组部分\r\n\t     * @returns {{type: string, value: {}}}\r\n\t     */\r\n\t    ASTBuilder.prototype.arrayBuilder = function () {\r\n\t        AST.ast_array['value'] = this.closingTags(']');\r\n\t        return util_1.default.clone(AST.ast_array);\r\n\t    };\r\n\t    /**\r\n\t     * 结构树的对象部分\r\n\t     * @returns {{type: string, value: {}}}\r\n\t     */\r\n\t    ASTBuilder.prototype.objectBuilder = function () {\r\n\t        var arr = [];\r\n\t        if (!util_1.default.exitFirst(this.tokens, '}')) {\r\n\t            do {\r\n\t                AST.ast_json['key'] = this.constantBuilder();\r\n\t                util_1.default.consume(this.tokens, ':');\r\n\t                AST.ast_json['value'] = this.assignmentBuilder();\r\n\t                arr.push(util_1.default.clone(AST.ast_json));\r\n\t            } while (util_1.default.expect(this.tokens, ','));\r\n\t        }\r\n\t        util_1.default.consume(this.tokens, '}');\r\n\t        AST.ast_object['value'] = arr;\r\n\t        return util_1.default.clone(AST.ast_object);\r\n\t    };\r\n\t    /**\r\n\t     * 结构树的对象取值部分，a.b  a[\"b\"]，a() 等\r\n\t     * @param type\r\n\t     * @param agency\r\n\t     * @returns {{type: string, value: {}}}\r\n\t     */\r\n\t    ASTBuilder.prototype.memberBuilder = function (type, agency) {\r\n\t        if (type.text === '[') {\r\n\t            agency = {\r\n\t                type: AST.dataType['7'],\r\n\t                object: agency,\r\n\t                property: this.agency(),\r\n\t                computed: true\r\n\t            };\r\n\t            util_1.default.consume(this.tokens, ']');\r\n\t        }\r\n\t        if (type.text === '.') {\r\n\t            agency = {\r\n\t                type: AST.dataType['7'],\r\n\t                object: agency,\r\n\t                property: this.identifierBuilder(),\r\n\t                computed: false\r\n\t            };\r\n\t        }\r\n\t        if (type.text === '(') {\r\n\t            agency = {\r\n\t                type: AST.ast_function['type'],\r\n\t                callee: agency,\r\n\t                arguments: this.closingTags(')'),\r\n\t                pipe: false\r\n\t            };\r\n\t        }\r\n\t        return agency;\r\n\t    };\r\n\t    /**\r\n\t     * 含有‘=’等符号\r\n\t     * @returns {any}\r\n\t     */\r\n\t    ASTBuilder.prototype.assignmentBuilder = function () {\r\n\t        var left = this.ternaryBuilder();\r\n\t        if (util_1.default.expect(this.tokens, '=')) {\r\n\t            var right = this.ternaryBuilder();\r\n\t            AST.ast_assignment['left'] = left;\r\n\t            AST.ast_assignment['right'] = right;\r\n\t            return util_1.default.clone(AST.ast_assignment);\r\n\t        }\r\n\t        return left;\r\n\t    };\r\n\t    /**\r\n\t     * 一元运算符\r\n\t     * @returns {any}\r\n\t     */\r\n\t    ASTBuilder.prototype.unaryBuilder = function () {\r\n\t        var ue = util_1.default.expect(this.tokens, '+', '!', '-');\r\n\t        if (ue) {\r\n\t            AST.ast_unary['operator'] = ue.text;\r\n\t            AST.ast_unary['value'] = this.unaryBuilder();\r\n\t            return util_1.default.clone(AST.ast_unary);\r\n\t        }\r\n\t        if (!ue)\r\n\t            return this.agency();\r\n\t    };\r\n\t    /**\r\n\t     *乘法运算\r\n\t     * @returns {Object}\r\n\t     */\r\n\t    ASTBuilder.prototype.multiplicativeBuilder = function () {\r\n\t        var left = this.unaryBuilder(), ue;\r\n\t        while (ue = util_1.default.expect(this.tokens, '*', '%', '/')) {\r\n\t            AST.ast_binary['operator'] = ue.text;\r\n\t            AST.ast_binary['left'] = left;\r\n\t            AST.ast_binary['right'] = this.unaryBuilder();\r\n\t            left = util_1.default.clone(AST.ast_binary);\r\n\t        }\r\n\t        return left;\r\n\t    };\r\n\t    /**\r\n\t     * 加法运算\r\n\t     * @returns {Object}\r\n\t     */\r\n\t    ASTBuilder.prototype.additiveBuilder = function () {\r\n\t        var left = this.multiplicativeBuilder(), ue;\r\n\t        while (ue = util_1.default.expect(this.tokens, '+', '-')) {\r\n\t            left = {\r\n\t                type: AST.ast_binary['type'],\r\n\t                operator: ue.text,\r\n\t                left: left,\r\n\t                right: this.multiplicativeBuilder()\r\n\t            };\r\n\t        }\r\n\t        return left;\r\n\t    };\r\n\t    /**\r\n\t     * 关系运算符，‘>’\r\n\t     * @returns {Object}\r\n\t     */\r\n\t    ASTBuilder.prototype.relationalBuilder = function () {\r\n\t        var left = this.additiveBuilder(), ue;\r\n\t        while (ue = util_1.default.expect(this.tokens, '>', '<', '>=', '<=')) {\r\n\t            left = {\r\n\t                type: AST.ast_binary['type'],\r\n\t                operator: ue.text,\r\n\t                left: left,\r\n\t                right: this.additiveBuilder()\r\n\t            };\r\n\t        }\r\n\t        return left;\r\n\t    };\r\n\t    /**\r\n\t     * 等法运算符，‘==’\r\n\t     * @returns {Object}\r\n\t     */\r\n\t    ASTBuilder.prototype.equalityBuilder = function () {\r\n\t        var left = this.relationalBuilder(), ue;\r\n\t        while (ue = util_1.default.expect(this.tokens, '==', '===', '!=', '!==')) {\r\n\t            left = {\r\n\t                type: AST.ast_binary['type'],\r\n\t                operator: ue.text,\r\n\t                left: left,\r\n\t                right: this.relationalBuilder()\r\n\t            };\r\n\t        }\r\n\t        return left;\r\n\t    };\r\n\t    /**\r\n\t     * && 运算符， &&高于||\r\n\t     * @returns {Object}\r\n\t     */\r\n\t    ASTBuilder.prototype.andBuilder = function () {\r\n\t        var left = this.equalityBuilder(), ue;\r\n\t        while (ue = util_1.default.expect(this.tokens, '&&')) {\r\n\t            left = {\r\n\t                type: AST.ast_logical['type'],\r\n\t                operator: ue.text,\r\n\t                left: left,\r\n\t                right: this.equalityBuilder()\r\n\t            };\r\n\t        }\r\n\t        return left;\r\n\t    };\r\n\t    /**\r\n\t     * || 运算符， &&高于||\r\n\t     * @returns {Object}\r\n\t     */\r\n\t    ASTBuilder.prototype.orBuilder = function () {\r\n\t        var left = this.andBuilder(), ue;\r\n\t        while (ue = util_1.default.expect(this.tokens, '||')) {\r\n\t            left = {\r\n\t                type: AST.ast_logical['type'],\r\n\t                operator: ue.text,\r\n\t                left: left,\r\n\t                right: this.andBuilder()\r\n\t            };\r\n\t        }\r\n\t        return left;\r\n\t    };\r\n\t    /**\r\n\t     * 三元运算符\r\n\t     * @returns {Object}\r\n\t     */\r\n\t    ASTBuilder.prototype.ternaryBuilder = function () {\r\n\t        var boolean_expression = this.orBuilder();\r\n\t        if (util_1.default.expect(this.tokens, '?')) {\r\n\t            var true_value = this.assignmentBuilder();\r\n\t            if (util_1.default.consume(this.tokens, ':')) {\r\n\t                var error_value = this.assignmentBuilder();\r\n\t                return {\r\n\t                    type: AST.ast_teranry['type'],\r\n\t                    boolean_expression: boolean_expression,\r\n\t                    true_value: true_value,\r\n\t                    error_value: error_value\r\n\t                };\r\n\t            }\r\n\t        }\r\n\t        return boolean_expression;\r\n\t    };\r\n\t    /**\r\n\t     * 管道处理\r\n\t     */\r\n\t    ASTBuilder.prototype.pipeBuilder = function () {\r\n\t        var pipes = this.assignmentBuilder();\r\n\t        while (util_1.default.expect(this.tokens, '|')) {\r\n\t            var args = [pipes];\r\n\t            pipes = {\r\n\t                type: AST.ast_function['type'],\r\n\t                callee: this.identifierBuilder(),\r\n\t                arguments: args,\r\n\t                pipe: true\r\n\t            };\r\n\t            while (util_1.default.expect(this.tokens, ':')) {\r\n\t                args.push(this.assignmentBuilder());\r\n\t            }\r\n\t        }\r\n\t        return pipes;\r\n\t    };\r\n\t    return ASTBuilder;\r\n\t}());\r\n\texports.default = ASTBuilder;\r\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar ast_config_1 = __webpack_require__(6);\r\n\tvar $log = __webpack_require__(2);\r\n\tvar K = __webpack_require__(23);\r\n\tvar util_1 = __webpack_require__(1);\r\n\tvar ps = {}; //管道集合\r\n\tvar ASTCompile = /** @class */ (function () {\r\n\t    function ASTCompile(astBuilder, pipes) {\r\n\t        this.astBuilder = astBuilder;\r\n\t        this.state = {\r\n\t            body: [],\r\n\t            compileId: 0,\r\n\t            echo: [],\r\n\t            pipes: {} //管道过滤器\r\n\t        };\r\n\t        this.ast = {};\r\n\t        ps = pipes;\r\n\t    }\r\n\t    /**\r\n\t     * 词法树的最终解析执行函数\r\n\t     * @param text\r\n\t     * @returns {Function}\r\n\t     */\r\n\t    ASTCompile.prototype.compile = function (text) {\r\n\t        this.ast = this.astBuilder.ast(text);\r\n\t        this.handelTree(this.ast);\r\n\t        this.constantExpr(this.ast);\r\n\t        var fn = this.pipePrefix() + 'var fn = function(scope, local){'\r\n\t            + (this.state.echo.length ? 'var ' + this.state.echo.join(',') + ';' : '')\r\n\t            + this.state.body.join('') + '}; return fn;';\r\n\t        var fns = new Function('safeProperty', 'safeObject', 'safeFunction', 'isUndefined', 'pipe', fn)(safeProperty, safeObject, safeFunction, isUndefined, pipe);\r\n\t        fns.literal = this.isLiteral(); // 定义字面量\r\n\t        fns.constant = this.ast.constant; // 定义常亮\r\n\t        return fns;\r\n\t    };\r\n\t    /**\r\n\t     * 递归解析词法树\r\n\t     * @param ast 词法结构树\r\n\t     * @param context 针对函数的上下文\r\n\t     * @param createNewElement 布尔值，如果属性不存在就动态创建一个\r\n\t     * @returns {any}\r\n\t     */\r\n\t    ASTCompile.prototype.handelTree = function (ast, context, createNewElement) {\r\n\t        if (context === void 0) { context = { context: undefined, name: undefined, computed: undefined }; }\r\n\t        switch (ast.type) {\r\n\t            case ast_config_1.dataType['1']://'ASTBuilder.Init'\r\n\t                this.initCompile(ast);\r\n\t                break;\r\n\t            case ast_config_1.dataType['2']://'ASTBuilder.MetaData'\r\n\t                return this.metaCompile(ast);\r\n\t            case ast_config_1.dataType['3']://'ASTBuilder.Array'\r\n\t                return this.arrayCompile(ast);\r\n\t            case ast_config_1.dataType['4']://'ASTBuilder.Object'\r\n\t                return this.objectCompile(ast);\r\n\t            case ast_config_1.dataType['5']://'ASTBuilder.Identifier'\r\n\t                return this.identifierCompile(ast, context, createNewElement);\r\n\t            case ast_config_1.dataType['6']://'ASTBuilder.This'\r\n\t                return this.thisCompile();\r\n\t            case ast_config_1.dataType['7']://'ASTBuilder.Member'\r\n\t                return this.memberCompile(ast, context, createNewElement);\r\n\t            case ast_config_1.dataType['8']://'ASTBuilder.Function'\r\n\t                return this.functionCompile(ast);\r\n\t            case ast_config_1.dataType['9']://'ASTBuilder.Assignment'\r\n\t                return this.assigmentCompile(ast);\r\n\t            case ast_config_1.dataType['10']://'ASTBuilder.Unary'\r\n\t                return this.unaryCompile(ast);\r\n\t            case ast_config_1.dataType['11']://'ASTBuilder.Binary'\r\n\t                return this.binaryCompile(ast);\r\n\t            case ast_config_1.dataType['12']://'ASTBuilder.Logical'\r\n\t                return this.logicalCompile(ast);\r\n\t            case ast_config_1.dataType['13']://'ASTBuilder.Ternary'\r\n\t                return this.ternaryCompile(ast);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 初始化词法编译器\r\n\t     * @param ast\r\n\t     */\r\n\t    ASTCompile.prototype.initCompile = function (ast) {\r\n\t        var _this = this;\r\n\t        var arr = util_1.default.clone(ast.body);\r\n\t        var last = arr.pop();\r\n\t        arr.forEach(function (val) {\r\n\t            _this.state.body.push(_this.handelTree(val));\r\n\t        });\r\n\t        this.state.body.push('return ', this.handelTree(last), ';');\r\n\t    };\r\n\t    /**\r\n\t     * 基础类数据编译\r\n\t     * @param ast\r\n\t     * @returns {any}\r\n\t     */\r\n\t    ASTCompile.prototype.metaCompile = function (ast) {\r\n\t        return util_1.default.wrapString(ast.value);\r\n\t    };\r\n\t    /**\r\n\t     * 数组类词法树编译\r\n\t     * @param ast\r\n\t     * @returns {string}\r\n\t     */\r\n\t    ASTCompile.prototype.arrayCompile = function (ast) {\r\n\t        var _this = this;\r\n\t        var arr = ast.value.map(function (val) {\r\n\t            return _this.handelTree(val);\r\n\t        });\r\n\t        return '[' + arr.join(',') + ']';\r\n\t    };\r\n\t    /**\r\n\t     * 对象类词法树编译\r\n\t     * @param ast\r\n\t     * @returns {string}\r\n\t     */\r\n\t    ASTCompile.prototype.objectCompile = function (ast) {\r\n\t        var _this = this;\r\n\t        var arrJson = ast.value.map(function (val) {\r\n\t            var key = val['key']['value'];\r\n\t            var value = _this.handelTree(val['value']);\r\n\t            return key + ':' + value;\r\n\t        });\r\n\t        return '{' + arrJson.join(',') + '}';\r\n\t    };\r\n\t    /**\r\n\t     * 标识符词法树编译\r\n\t     * @param ast\r\n\t     * @param context\r\n\t     * @param createNewElement\r\n\t     * @returns {string}\r\n\t     */\r\n\t    ASTCompile.prototype.identifierCompile = function (ast, context, createNewElement) {\r\n\t        //判断是否是安全的属性名\r\n\t        safeProperty(ast.value);\r\n\t        var id = this.incrementId();\r\n\t        // 存在本地属性local\r\n\t        util_1.default.conditionIsRight(this.state.body, util_1.default.hasProperty('local', ast.value), util_1.default.concatCode(id, util_1.default.nonComputedMember('local', ast.value)));\r\n\t        // 创建空对象\r\n\t        if (createNewElement) {\r\n\t            util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.hasProperty('local', ast.value)) + ' && scope && ' + util_1.default.notExist(util_1.default.hasProperty('scope', ast.value)), util_1.default.concatCode(util_1.default.nonComputedMember('scope', ast.value), '{}'));\r\n\t        }\r\n\t        //不存在本地属性，只有scope属性\r\n\t        util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.hasProperty('local', ast.value)) + ' && scope', util_1.default.concatCode(id, util_1.default.nonComputedMember('scope', ast.value)));\r\n\t        // 处理函数上下文\r\n\t        if (context) {\r\n\t            context.context = util_1.default.hasProperty('local', ast.value) + '?local:scope';\r\n\t            context.name = ast.value;\r\n\t            context.computed = false;\r\n\t        }\r\n\t        this.state.body.push('safeObject(' + id + ');');\r\n\t        return id;\r\n\t    };\r\n\t    /**\r\n\t     * 含有this的编译\r\n\t     * @returns {string}\r\n\t     */\r\n\t    ASTCompile.prototype.thisCompile = function () {\r\n\t        return 'scope';\r\n\t    };\r\n\t    /**\r\n\t     * 对象属性操作类词法树编译，如a.b, a[\"b\"]\r\n\t     * @param ast\r\n\t     * @param context\r\n\t     * @param createNewElement\r\n\t     * @returns {string}\r\n\t     */\r\n\t    ASTCompile.prototype.memberCompile = function (ast, context, createNewElement) {\r\n\t        var id = this.incrementId();\r\n\t        var noComp = this.handelTree(ast.object, undefined, true);\r\n\t        if (context) {\r\n\t            context.context = noComp;\r\n\t        }\r\n\t        if (ast.computed) {\r\n\t            var comp = this.handelTree(ast.property);\r\n\t            this.state.body.push('safeProperty(' + comp + ');');\r\n\t            //处理空对象\r\n\t            if (createNewElement) {\r\n\t                util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.computedMember(noComp, comp)), util_1.default.concatCode(util_1.default.computedMember(noComp, comp), '{}'));\r\n\t            }\r\n\t            util_1.default.conditionIsRight(this.state.body, noComp, util_1.default.concatCode(id, 'safeObject(' + util_1.default.computedMember(noComp, comp) + ')'));\r\n\t            if (context) {\r\n\t                context.name = comp;\r\n\t                context.computed = true;\r\n\t            }\r\n\t        }\r\n\t        if (!ast.computed) {\r\n\t            safeProperty(ast.property.value);\r\n\t            if (createNewElement) {\r\n\t                util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.nonComputedMember(noComp, ast.property.value)), util_1.default.concatCode(util_1.default.nonComputedMember(noComp, ast.property.value), '{}'));\r\n\t            }\r\n\t            util_1.default.conditionIsRight(this.state.body, noComp, util_1.default.concatCode(id, 'safeObject(' + util_1.default.nonComputedMember(noComp, ast.property.value) + ')'));\r\n\t            if (context) {\r\n\t                context.name = ast.property.value;\r\n\t                context.computed = false;\r\n\t            }\r\n\t        }\r\n\t        return id;\r\n\t    };\r\n\t    /**\r\n\t     * 函数类词法树编译\r\n\t     * @param ast\r\n\t     * @returns {string}\r\n\t     */\r\n\t    ASTCompile.prototype.functionCompile = function (ast) {\r\n\t        var _this = this;\r\n\t        var callContext, callee, args;\r\n\t        if (ast.pipe) {\r\n\t            callee = this.pipeCompile(ast.callee.value);\r\n\t            args = ast.arguments.map(function (val) {\r\n\t                return _this.handelTree(val);\r\n\t            });\r\n\t            return callee + '(' + args.join(',') + ')';\r\n\t        }\r\n\t        if (!ast.pipe) {\r\n\t            callContext = { context: undefined, name: undefined, computed: undefined };\r\n\t            callee = this.handelTree(ast.callee, callContext);\r\n\t            args = ast.arguments.map(function (val) {\r\n\t                return 'safeObject(' + _this.handelTree(val) + ')'; //检测函数参数是否安全\r\n\t            });\r\n\t            // console.log(callContext);\r\n\t            if (callContext.name) {\r\n\t                this.state.body.push('safeObject(' + callContext.context + ');');\r\n\t                if (callContext.computed) {\r\n\t                    callee = util_1.default.computedMember(callContext.context, callContext.name);\r\n\t                }\r\n\t                else {\r\n\t                    callee = util_1.default.nonComputedMember(callContext.context, callContext.name);\r\n\t                }\r\n\t            }\r\n\t            //检测函数是否安全\r\n\t            this.state.body.push('safeFunction(' + callee + ');');\r\n\t            //safeObject 检测函数返回值是否安全\r\n\t            return callee + ' && safeObject(' + callee + '(' + args.join(',') + '))';\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *含有等号等符号类词法树编译\r\n\t     * @param ast\r\n\t     * @returns {any}\r\n\t     */\r\n\t    ASTCompile.prototype.assigmentCompile = function (ast) {\r\n\t        var left, leftCon = { context: undefined, name: undefined, computed: undefined };\r\n\t        this.handelTree(ast.left, leftCon, true);\r\n\t        if (leftCon.computed) {\r\n\t            left = util_1.default.computedMember(leftCon.context, leftCon.name);\r\n\t        }\r\n\t        else {\r\n\t            left = util_1.default.nonComputedMember(leftCon.context, leftCon.name);\r\n\t        }\r\n\t        // console.log(leftCon, left);\r\n\t        //safeObject 用于检测表达式右侧是否安全\r\n\t        return util_1.default.concatCode(left, 'safeObject(' + this.handelTree(ast.right) + ')');\r\n\t    };\r\n\t    /**\r\n\t     * 含有一元运算符的编译\r\n\t     * @param ast\r\n\t     * @returns {string}\r\n\t     */\r\n\t    ASTCompile.prototype.unaryCompile = function (ast) {\r\n\t        return ast.operator + '(' + 'isUndefined(' + this.handelTree(ast.value) + '))';\r\n\t    };\r\n\t    /**\r\n\t     * 二元运算符编译\r\n\t     * @param ast\r\n\t     * @returns {string}\r\n\t     */\r\n\t    ASTCompile.prototype.binaryCompile = function (ast) {\r\n\t        if (util_1.default.inStr(ast.operator, '+-')) {\r\n\t            return '(isUndefined(' + this.handelTree(ast.left) + ')' + ast.operator + 'isUndefined(' + this.handelTree(ast.right) + '))';\r\n\t        }\r\n\t        return '(' + this.handelTree(ast.left) + ast.operator + this.handelTree(ast.right) + ')';\r\n\t    };\r\n\t    /**\r\n\t     * 逻辑运算符编译\r\n\t     * @param ast\r\n\t     * @returns {string}\r\n\t     */\r\n\t    ASTCompile.prototype.logicalCompile = function (ast) {\r\n\t        var id = this.incrementId();\r\n\t        this.state.body.push(util_1.default.concatCode(id, this.handelTree(ast.left)));\r\n\t        util_1.default.conditionIsRight(this.state.body, ast.operator == '&&' ? id : util_1.default.notExist(id), util_1.default.concatCode(id, this.handelTree(ast.right)));\r\n\t        return id;\r\n\t    };\r\n\t    /**\r\n\t     * 三元运算符编译\r\n\t     * @param ast\r\n\t     * @returns {string}\r\n\t     */\r\n\t    ASTCompile.prototype.ternaryCompile = function (ast) {\r\n\t        var id = this.incrementId();\r\n\t        var id2 = this.incrementId();\r\n\t        this.state.body.push(util_1.default.concatCode(id2, this.handelTree(ast.boolean_expression)));\r\n\t        util_1.default.conditionIsRight(this.state.body, id2, util_1.default.concatCode(id, this.handelTree(ast.true_value)));\r\n\t        util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(id2), util_1.default.concatCode(id, this.handelTree(ast.error_value)));\r\n\t        return id;\r\n\t    };\r\n\t    /**\r\n\t     * 管道编译\r\n\t     * @param name\r\n\t     */\r\n\t    ASTCompile.prototype.pipeCompile = function (name) {\r\n\t        var ps = this.state.pipes;\r\n\t        if (!ps.hasOwnProperty('name')) {\r\n\t            ps[name] = this.incrementId(true);\r\n\t        }\r\n\t        return ps[name];\r\n\t    };\r\n\t    /**\r\n\t     * 判断pipes是否存在\r\n\t     */\r\n\t    ASTCompile.prototype.pipePrefix = function () {\r\n\t        var ps = this.state.pipes;\r\n\t        if (JSON.stringify(ps) == '{}') {\r\n\t            return '';\r\n\t        }\r\n\t        var arr = [];\r\n\t        for (var k in ps) {\r\n\t            arr.push(ps[k] + '=' + 'pipe(' + util_1.default.wrapString(k) + ')');\r\n\t        }\r\n\t        // console.log(arr);\r\n\t        return 'var ' + arr.join(',') + ';';\r\n\t    };\r\n\t    /**\r\n\t     * compileId自增\r\n\t     */\r\n\t    ASTCompile.prototype.incrementId = function (flag) {\r\n\t        var id = util_1.default.compileId(this.state.compileId, this.state.echo, flag);\r\n\t        this.state.compileId++;\r\n\t        return id;\r\n\t    };\r\n\t    /**\r\n\t     * 字面量\r\n\t     */\r\n\t    ASTCompile.prototype.isLiteral = function () {\r\n\t        var arr = this.ast.body;\r\n\t        return !arr.length || ((arr.length === 1) &&\r\n\t            (arr[0].type === ast_config_1.dataType['2'] ||\r\n\t                arr[0].type === ast_config_1.dataType['3'] ||\r\n\t                arr[0].type === ast_config_1.dataType['4'] ||\r\n\t                arr[0].type === ast_config_1.dataType['5']));\r\n\t    };\r\n\t    /**\r\n\t     * 常量\r\n\t     * @param ast\r\n\t     */\r\n\t    ASTCompile.prototype.constantExpr = function (ast) {\r\n\t        var _this = this;\r\n\t        var cons, that = this;\r\n\t        switch (ast.type) {\r\n\t            case ast_config_1.dataType['1']://ASTBuilder.Init\r\n\t                cons = true;\r\n\t                arrayLike(ast.body);\r\n\t                break;\r\n\t            case ast_config_1.dataType['2']://ASTBuilder.MetaData\r\n\t                ast.constant = true;\r\n\t                break;\r\n\t            case ast_config_1.dataType['3']://ASTBuilder.Array\r\n\t                cons = true;\r\n\t                arrayLike(ast.value);\r\n\t                ast.constant = cons;\r\n\t                break;\r\n\t            case ast_config_1.dataType['4']://ASTBuilder.Object\r\n\t                cons = true;\r\n\t                ast.value.forEach(function (val) {\r\n\t                    _this.constantExpr(val.value);\r\n\t                    cons = cons && val.value.constant;\r\n\t                });\r\n\t                ast.constant = cons;\r\n\t                break;\r\n\t            case ast_config_1.dataType['5']: //ASTBuilder.Identifier\r\n\t            case ast_config_1.dataType['6']://ASTBuilder.This\r\n\t                ast.constant = false;\r\n\t                break;\r\n\t            case ast_config_1.dataType['7']://ASTBuilder.Member\r\n\t                this.constantExpr(ast.object);\r\n\t                if (ast.computed) {\r\n\t                    this.constantExpr(ast.property);\r\n\t                }\r\n\t                ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);\r\n\t                break;\r\n\t            case ast_config_1.dataType['8']://ASTBuilder.Function\r\n\t                cons = ast.pipe;\r\n\t                arrayLike(ast.arguments);\r\n\t                ast.constant = cons;\r\n\t                break;\r\n\t            case ast_config_1.dataType['9']://ASTBuilder.Assignment\r\n\t                leftRight();\r\n\t                break;\r\n\t            case ast_config_1.dataType['10']://ASTBuilder.Unary\r\n\t                this.constantExpr(ast.value);\r\n\t                ast.constant = ast.value.constant;\r\n\t                break;\r\n\t            case ast_config_1.dataType['11']: //ASTBuilder.Binary\r\n\t            case ast_config_1.dataType['12']://ASTBuilder.Logical\r\n\t                leftRight();\r\n\t                break;\r\n\t            case ast_config_1.dataType['13']://ASTBuilder.Teranry\r\n\t                this.constantExpr(ast.boolean_expression);\r\n\t                this.constantExpr(ast.true_value);\r\n\t                this.constantExpr(ast.error_value);\r\n\t                ast.constant = ast.boolean_expression.constant && ast.true_value.constant && ast.error_value.constant;\r\n\t                break;\r\n\t        }\r\n\t        function arrayLike(array) {\r\n\t            array.forEach(function (val) {\r\n\t                that.constantExpr(val);\r\n\t                cons = cons && val.constant;\r\n\t            });\r\n\t            ast.constant = cons;\r\n\t        }\r\n\t        function leftRight() {\r\n\t            that.constantExpr(ast.left);\r\n\t            that.constantExpr(ast.right);\r\n\t            ast.constant = ast.left.constant && ast.right.constant;\r\n\t        }\r\n\t    };\r\n\t    return ASTCompile;\r\n\t}());\r\n\texports.default = ASTCompile;\r\n\t/**\r\n\t * 检测是否是安全的属性名，例如constructor, __defineGetter__等\r\n\t * @param str\r\n\t */\r\n\tfunction safeProperty(str) {\r\n\t    var f = K.PROPERTY.some(function (val) {\r\n\t        return val === str;\r\n\t    });\r\n\t    if (f)\r\n\t        $log.error(str + '存在编译风险');\r\n\t}\r\n\t/**\r\n\t * 检测是否是安全的对象\r\n\t * @param obj\r\n\t */\r\n\tfunction safeObject(obj) {\r\n\t    if (obj == undefined)\r\n\t        return;\r\n\t    var f = K.WINDOW.every(function (val) {\r\n\t        return obj[val];\r\n\t    });\r\n\t    var f2 = K.NODE.every(function (val) {\r\n\t        return obj[val];\r\n\t    });\r\n\t    if (f || f2 || obj.constructor == obj || obj.getOwnPropertyDescriptor || obj.getOwnPropertyNames)\r\n\t        $log.error(obj + '存在编译风险');\r\n\t    return obj;\r\n\t}\r\n\t/**\r\n\t * 检查函数是否安全\r\n\t * @param fun\r\n\t */\r\n\tfunction safeFunction(fun) {\r\n\t    var f = K.FUN.some(function (val) {\r\n\t        return val == fun;\r\n\t    });\r\n\t    if (f || fun.constructor == fun)\r\n\t        $log.error(fun + '存在编译风险');\r\n\t}\r\n\t/**\r\n\t * 判断目标是否为undefined\r\n\t * @param target\r\n\t * @param value\r\n\t * @returns {any}\r\n\t */\r\n\tfunction isUndefined(target, value) {\r\n\t    if (value === void 0) { value = 0; }\r\n\t    return typeof target === 'undefined' ? value : target;\r\n\t}\r\n\t/**\r\n\t * 根据管道名称返回管道处理函数\r\n\t * @param name 管道名称\r\n\t */\r\n\tfunction pipe(name) {\r\n\t    // console.log(ps);\r\n\t    return ps[name];\r\n\t}\r\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar $log = __webpack_require__(2);\r\n\tvar util_1 = __webpack_require__(1);\r\n\tvar lexer_config_1 = __webpack_require__(7);\r\n\t/**\r\n\t * 此法解析器，用于解析{{a + b}} 之类的插值运算\r\n\t */\r\n\tvar Lexer = /** @class */ (function () {\r\n\t    function Lexer() {\r\n\t        this.index = 0;\r\n\t        this.now = undefined;\r\n\t        this.tokens = [];\r\n\t        this.text = '';\r\n\t    }\r\n\t    /**\r\n\t     * 词法解析函数\r\n\t     * @param text\r\n\t     * @returns {Array<any>}\r\n\t     */\r\n\t    Lexer.prototype.lex = function (text) {\r\n\t        this.text = text;\r\n\t        while (this.index < this.text.length) {\r\n\t            this.now = this.text.charAt(this.index);\r\n\t            if (util_1.default.whichType(this.now) == 'number' ||\r\n\t                (this.now === '.' && util_1.default.whichType(util_1.default.nextLeter(this.index, this.text)))) {\r\n\t                this.loopNumber();\r\n\t            }\r\n\t            else if (util_1.default.whichType(this.now) == 'string') {\r\n\t                this.loopString(this.now);\r\n\t            }\r\n\t            else if (util_1.default.whichType(this.now) == 'letter') {\r\n\t                this.loopLetter();\r\n\t            }\r\n\t            else if (util_1.default.isWhiteSpace(this.now)) {\r\n\t                this.index++;\r\n\t            }\r\n\t            else if (util_1.default.inStr(this.now, '[],{}.:()?;')) {\r\n\t                this.pushObj();\r\n\t            }\r\n\t            else {\r\n\t                this.loopOperator();\r\n\t            }\r\n\t        }\r\n\t        return this.tokens;\r\n\t    };\r\n\t    /**\r\n\t     * 添加词法解析对象\r\n\t     */\r\n\t    Lexer.prototype.pushObj = function () {\r\n\t        this.tokens.push({\r\n\t            text: this.now,\r\n\t            value: this.now\r\n\t        });\r\n\t        this.index++;\r\n\t    };\r\n\t    /**\r\n\t     * 获取下一个字符\r\n\t     * @param n\r\n\t     * @returns {string|boolean}\r\n\t     */\r\n\t    Lexer.prototype.nextStr = function (n) {\r\n\t        if (n === void 0) { n = 1; }\r\n\t        return (this.index + n < this.text.length) ?\r\n\t            this.text.charAt(this.index + n) :\r\n\t            false;\r\n\t    };\r\n\t    /**\r\n\t     * 遍历数字类\r\n\t     */\r\n\t    Lexer.prototype.loopNumber = function () {\r\n\t        var number = '';\r\n\t        while (this.index < this.text.length) {\r\n\t            var now = this.text.charAt(this.index).toLowerCase();\r\n\t            if (util_1.default.whichType(now) == 'number' || now === '.') {\r\n\t                number += now;\r\n\t            }\r\n\t            else {\r\n\t                var next = util_1.default.nextLeter(this.index, this.text);\r\n\t                var prev = number.charAt(number.length - 1);\r\n\t                if (now == 'e' && util_1.default.isExponent(next)) {\r\n\t                    number += now;\r\n\t                }\r\n\t                else if (util_1.default.isExponent(now) && prev === 'e' && next && util_1.default.isNumber(next)) {\r\n\t                    number += now;\r\n\t                }\r\n\t                else if (util_1.default.isExponent(now) && prev === 'e' && (!next || !util_1.default.isNumber(next))) {\r\n\t                    $log.error(\"指数格式错误！\");\r\n\t                }\r\n\t                else {\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            this.index++;\r\n\t        }\r\n\t        this.tokens.push({\r\n\t            text: number,\r\n\t            value: Number(number)\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 遍历字符串类，'\"abc\"'\r\n\t     */\r\n\t    Lexer.prototype.loopString = function (quote) {\r\n\t        this.index++;\r\n\t        var string = '', \r\n\t        //避免单独的操作符匹配错误，例如'\"!\"'\r\n\t        raw = quote;\r\n\t        while (this.index < this.text.length) {\r\n\t            var now = this.text.charAt(this.index);\r\n\t            raw += now;\r\n\t            if (now == quote) {\r\n\t                this.index++;\r\n\t                this.tokens.push({\r\n\t                    text: raw,\r\n\t                    value: string\r\n\t                });\r\n\t                return;\r\n\t            }\r\n\t            else if (now == lexer_config_1.SPECIALS[now]) {\r\n\t                string += lexer_config_1.SPECIALS[now];\r\n\t            }\r\n\t            else {\r\n\t                string += now;\r\n\t            }\r\n\t            this.index++;\r\n\t        }\r\n\t        $log.error('无法匹配的符号');\r\n\t    };\r\n\t    /**\r\n\t     * 字符类, 'abc_$'\r\n\t     */\r\n\t    Lexer.prototype.loopLetter = function () {\r\n\t        var letter = '';\r\n\t        while (this.index < this.text.length) {\r\n\t            var now = this.text.charAt(this.index);\r\n\t            if (util_1.default.isLetter(now) || util_1.default.isNumber(now)) {\r\n\t                letter += now;\r\n\t            }\r\n\t            else {\r\n\t                break;\r\n\t            }\r\n\t            this.index++;\r\n\t        }\r\n\t        // 针对boolean,null,undefined\r\n\t        var v = lexer_config_1.LETTER.hasOwnProperty(letter) ? lexer_config_1.LETTER[letter] : letter;\r\n\t        this.tokens.push({\r\n\t            text: letter,\r\n\t            identifier: true,\r\n\t            value: v\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 操作符，+- ！==\r\n\t     */\r\n\t    Lexer.prototype.loopOperator = function () {\r\n\t        var str = this.now, str2 = this.now + this.nextStr(1), str3 = this.now + this.nextStr(1) + this.nextStr(2), op = lexer_config_1.OPERATORS[str], op2 = lexer_config_1.OPERATORS[str2], op3 = lexer_config_1.OPERATORS[str3];\r\n\t        if (op || op2 || op3) {\r\n\t            var ct = op3 ? str3 : (op2 ? str2 : str);\r\n\t            this.tokens.push({\r\n\t                text: ct,\r\n\t                value: ct\r\n\t            });\r\n\t            this.index += ct.length;\r\n\t        }\r\n\t        else {\r\n\t            $log.error('未识别的字符' + this.now);\r\n\t        }\r\n\t    };\r\n\t    return Lexer;\r\n\t}());\r\n\texports.default = Lexer;\r\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar astBuilder_1 = __webpack_require__(27);\r\n\tvar astCompile_1 = __webpack_require__(28);\r\n\tvar Parser = /** @class */ (function () {\r\n\t    function Parser(lexer, pipes) {\r\n\t        this.lexer = lexer;\r\n\t        this.astBuilder = new astBuilder_1.default(this.lexer);\r\n\t        this.astCompile = new astCompile_1.default(this.astBuilder, pipes);\r\n\t    }\r\n\t    Parser.prototype.parse = function (text) {\r\n\t        return this.astCompile.compile(text);\r\n\t    };\r\n\t    return Parser;\r\n\t}());\r\n\texports.default = Parser;\r\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar $log = __webpack_require__(2);\r\n\tvar util_1 = __webpack_require__(1);\r\n\t/**\r\n\t * 执行管道过滤操作\r\n\t */\r\n\tvar Pipe = /** @class */ (function () {\r\n\t    function Pipe() {\r\n\t        this.pipes = {};\r\n\t    }\r\n\t    /**\r\n\t     * 注册管道函数\r\n\t     * @param name 字符串或者对象\r\n\t     * @param factory\r\n\t     */\r\n\t    Pipe.prototype.register = function (name, factory) {\r\n\t        // this.pipes = {};\r\n\t        //允许对象方式注册多个pipe\r\n\t        if (util_1.default.type(name) == 'object') {\r\n\t            for (var i in name) {\r\n\t                return this.register(i, name[i]);\r\n\t            }\r\n\t        }\r\n\t        if (util_1.default.type(name) == 'string') {\r\n\t            if (util_1.default.type(factory) != 'function')\r\n\t                $log.error('注册的管道函数类型为function');\r\n\t            var pipe = factory();\r\n\t            this.pipes[name] = pipe;\r\n\t            return pipe;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 管道执行函数\r\n\t     * @param name\r\n\t     */\r\n\t    Pipe.prototype.pipe = function (name) {\r\n\t        return this.pipes[name];\r\n\t    };\r\n\t    Pipe.prototype.returnPipes = function () {\r\n\t        return this.pipes;\r\n\t    };\r\n\t    return Pipe;\r\n\t}());\r\n\texports.default = Pipe;\r\n\t// const pipe = new Pipe();\r\n\tfunction $pipeProvider($provider) {\r\n\t    var pipes = {};\r\n\t    this.register = function (name, factory) {\r\n\t        //允许对象方式注册多个pipe\r\n\t        if (util_1.default.type(name) == 'object') {\r\n\t            for (var i in name) {\r\n\t                return this.register(i, name[i]);\r\n\t            }\r\n\t        }\r\n\t        if (util_1.default.type(name) == 'string') {\r\n\t            if (util_1.default.type(factory) != 'function')\r\n\t                $log.error('注册的管道函数类型为function');\r\n\t            return $provider.factory(name + 'Pipe', factory);\r\n\t        }\r\n\t    };\r\n\t    this.$get = ['$injector', function ($injector) {\r\n\t            return function (name) {\r\n\t                return $injector.get(name + 'Pipe');\r\n\t            };\r\n\t        }];\r\n\t}\r\n\texports.$pipeProvider = $pipeProvider;\r\n\t$pipeProvider.$inject = ['$provider'];\r\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar store_1 = __webpack_require__(4);\r\n\tvar store = new store_1.default();\r\n\tvar Router = /** @class */ (function () {\r\n\t    function Router(url, routers) {\r\n\t        this.url = url;\r\n\t        this.routers = this._parseRouters(routers);\r\n\t        this.nowRouter = this._getNowRouter(url, this.routers);\r\n\t        this.params = this.nowRouter ? (this.nowRouter.params ? this.nowRouter.params : {}) : {};\r\n\t    }\r\n\t    /**\r\n\t     * 获取当前路由\r\n\t     * @param url 浏览器pathname\r\n\t     * @param routers 路由集合\r\n\t     */\r\n\t    Router.prototype._getNowRouter = function (url, routers) {\r\n\t        if (url.includes('?')) {\r\n\t            url = url.substr(0, url.lastIndexOf('?'));\r\n\t        }\r\n\t        return routers.filter(function (v) {\r\n\t            return url.match(v.info.regexp);\r\n\t        })[0];\r\n\t    };\r\n\t    Router.prototype._parseRouters = function (routers) {\r\n\t        var _this = this;\r\n\t        routers.forEach(function (v) {\r\n\t            var r = _this._pathToReg(v.path);\r\n\t            if (r != null) {\r\n\t                v.info = r;\r\n\t                _this.params = v.params || {};\r\n\t            }\r\n\t        });\r\n\t        return routers;\r\n\t    };\r\n\t    /**\r\n\t     * 转换路径为正则\r\n\t     * @param path 路径\r\n\t     */\r\n\t    Router.prototype._pathToReg = function (path) {\r\n\t        var ret = {\r\n\t            originalPath: path,\r\n\t            regexp: path\r\n\t        }, keys = ret.keys = [];\r\n\t        path = path\r\n\t            .replace(/([().])/g, '\\\\$1')\r\n\t            .replace(/(\\/)?:(\\w+)(\\*\\?|[?*])?/g, function (_, slash, key, option) {\r\n\t            var optional = (option === '?' || option === '*?') ? '?' : null;\r\n\t            var star = (option === '*' || option === '*?') ? '*' : null;\r\n\t            keys.push({ name: key, optional: !!optional });\r\n\t            slash = slash || '';\r\n\t            return ''\r\n\t                + (optional ? '' : slash)\r\n\t                + '(?:'\r\n\t                + (optional ? slash : '')\r\n\t                + (star && '(.+?)' || '([^/]+)')\r\n\t                + (optional || '')\r\n\t                + ')'\r\n\t                + (optional || '');\r\n\t        })\r\n\t            .replace(/([/$*])/g, '\\\\$1');\r\n\t        ret.regexp = new RegExp('^' + path + '$', '');\r\n\t        return ret;\r\n\t    };\r\n\t    /**\r\n\t     * 跳转到已存在的路由页面\r\n\t     * @param path 需要跳转的路径\r\n\t     */\r\n\t    Router.prototype.go = function (_a) {\r\n\t        var _b = _a.path, path = _b === void 0 ? '' : _b, _c = _a.params, params = _c === void 0 ? {} : _c;\r\n\t        updateRouterConfig(path, params);\r\n\t        this.hash(path);\r\n\t    };\r\n\t    /**\r\n\t     * url的hash\r\n\t     * @param path\r\n\t     */\r\n\t    Router.prototype.hash = function (path) {\r\n\t        if (!path) {\r\n\t            return window.location.hash;\r\n\t        }\r\n\t        window.location.hash = '#' + path;\r\n\t    };\r\n\t    /**\r\n\t     * 刷新当前路由\r\n\t     */\r\n\t    Router.prototype.reflesh = function () {\r\n\t        var hash = window.location.hash;\r\n\t        window.location.hash = '#';\r\n\t        window.location.hash = hash;\r\n\t    };\r\n\t    /**\r\n\t     * 返回\r\n\t     */\r\n\t    Router.prototype.back = function () {\r\n\t        window.history.back();\r\n\t    };\r\n\t    return Router;\r\n\t}());\r\n\texports.default = Router;\r\n\t// 更新路由配置\r\n\tfunction updateRouterConfig(path, params) {\r\n\t    store.get('routerConfig').forEach(function (v) {\r\n\t        if (v.path == path) {\r\n\t            v.params = params;\r\n\t        }\r\n\t    });\r\n\t    store.data('routerConfig', store.get('routerConfig'));\r\n\t}\r\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar $log = __webpack_require__(2);\r\n\tvar util_1 = __webpack_require__(1);\r\n\tvar loader_1 = __webpack_require__(10);\r\n\tvar loader = new loader_1.default();\r\n\t// 处理函数\r\n\tvar FN_REG = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\r\n\t// 处理空格\r\n\tvar SPACE_REG = /^\\s*(\\S+)\\s*$/;\r\n\t// 处理注释\r\n\tvar COMMENTS_REG = /(\\/\\*.*?\\*\\/)|(\\/\\/$)/mg;\r\n\tvar Injector = /** @class */ (function () {\r\n\t    function Injector() {\r\n\t    }\r\n\t    /**\r\n\t     * 模块注入函数\r\n\t     * @param moduleNames 模块名称\r\n\t     * @param strict 严格模式的判断，默认false\r\n\t     */\r\n\t    Injector.prototype.inject = function (moduleNames, strict) {\r\n\t        if (util_1.default.type(moduleNames) != 'array')\r\n\t            $log.error('模块的名称的参数为数组');\r\n\t        // 缓存data数据\r\n\t        var providerCache = { $injector: undefined, $provider: { data: undefined, provider: undefined } };\r\n\t        var providerInjecter = providerCache.$injector = injectAgency(providerCache, function () {\r\n\t            // $log.error('未知的provider'+JSON.stringify(depPath));\r\n\t        });\r\n\t        var dataCache = { $injector: undefined };\r\n\t        var dataInjecter = dataCache.$injector = injectAgency(dataCache, function (name) {\r\n\t            var provider = providerInjecter.get(name + 'Provider');\r\n\t            return dataInjecter.invoke(provider.$get, provider);\r\n\t        });\r\n\t        // 已经加载的模块\r\n\t        var loadedModules = new Map();\r\n\t        var cricle = false;\r\n\t        // provider依赖数组,[['数组名',['依赖项']]] [['a',['b']]]\r\n\t        var depPath = [];\r\n\t        // run 函数队列\r\n\t        var runQueue = [];\r\n\t        /**\r\n\t         * 处理函数的返回值\r\n\t         * @param fn\r\n\t         */\r\n\t        function handelReturn(fn) {\r\n\t            return function () {\r\n\t                var val = dataInjecter.invoke(fn);\r\n\t                if (util_1.default.type(val) == 'undefined') {\r\n\t                    $log.error('factory函数必须有返回值');\r\n\t                }\r\n\t                return val;\r\n\t            };\r\n\t        }\r\n\t        providerCache.$provider = {\r\n\t            data: function (key, val) {\r\n\t                if (key == 'hasOwnProperty' || key == '$injector' || key == '$provider')\r\n\t                    $log.error(key + '不能用于标识符');\r\n\t                dataCache[key] = val;\r\n\t                providerCache[key] = val;\r\n\t            },\r\n\t            provider: function (key, val) {\r\n\t                if (key == 'hasOwnProperty' || key == '$injector' || key == '$provider')\r\n\t                    $log.error(key + '不能用于标识符');\r\n\t                if (util_1.default.type(val) == 'function') {\r\n\t                    // val = instantiate(val);\r\n\t                    val = providerInjecter.instantiate(val);\r\n\t                }\r\n\t                providerCache[key + 'Provider'] = val;\r\n\t            },\r\n\t            factory: function (key, fn) {\r\n\t                this.provider(key, { $get: handelReturn(fn) });\r\n\t            },\r\n\t            value: function (key, val) {\r\n\t                this.factory(key, function () { return val; });\r\n\t            },\r\n\t            service: function (key, fn) {\r\n\t                this.factory(key, function () {\r\n\t                    return dataInjecter.instantiate(fn);\r\n\t                });\r\n\t            }\r\n\t        };\r\n\t        var listQueue = function (queues) {\r\n\t            queues.forEach(function (inq) {\r\n\t                var service = providerInjecter.get(inq[0]);\r\n\t                var method = inq[1];\r\n\t                var args = inq[2];\r\n\t                // const arr = [args[0], args[1]];\r\n\t                // providerCache.$provider[method].apply(providerCache.$provider, args);\r\n\t                service[method].apply(service, args);\r\n\t            });\r\n\t        };\r\n\t        moduleNames.forEach(function loadMobule(val) {\r\n\t            if (!loadedModules.get(val)) {\r\n\t                loadedModules.set(val, true);\r\n\t                if (util_1.default.type(val) == 'string') {\r\n\t                    var module_1 = loader.module(val);\r\n\t                    module_1.requires.forEach(loadMobule); // 递归其他的依赖模块\r\n\t                    listQueue(module_1._invokeQueue);\r\n\t                    listQueue(module_1._configQueue);\r\n\t                    runQueue = runQueue.concat(module_1._runQueue);\r\n\t                }\r\n\t                if (util_1.default.type(val) == 'function' || util_1.default.type(val) == 'array') {\r\n\t                    runQueue.push(providerInjecter.invoke(val));\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t        //执行run函数队列\r\n\t        util_1.default.arrayCompact(runQueue).forEach(function (run) {\r\n\t            dataInjecter.invoke(run);\r\n\t        });\r\n\t        function injectAgency(cache, fn) {\r\n\t            /**\r\n\t             * 处理缓存\r\n\t             * @param name data或者provideer名称\r\n\t             */\r\n\t            function handelCache(name) {\r\n\t                handeldepPath(depPath);\r\n\t                if (cache.hasOwnProperty(name)) {\r\n\t                    return cache[name];\r\n\t                }\r\n\t                else {\r\n\t                    try {\r\n\t                        return (cache[name] = fn(name));\r\n\t                    }\r\n\t                    finally {\r\n\t                        if (cricle)\r\n\t                            delete cache[name];\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            /**\r\n\t             * $inject内部的调用函数\r\n\t             * @param fn 注入的函数或数组\r\n\t             * @param obj 对象，fn为其属性\r\n\t             * @param local 用于覆盖$inject数组的item项\r\n\t             * @param name data或provider名称\r\n\t             */\r\n\t            function invoke(fn, obj, local, name) {\r\n\t                if (arguments.length == 1) {\r\n\t                    obj = null;\r\n\t                }\r\n\t                var args = annotate(fn, name).map(function (v) {\r\n\t                    if (util_1.default.type(v) == 'string')\r\n\t                        return (local && local.hasOwnProperty(v)) ? local[v] : handelCache(v);\r\n\t                    else\r\n\t                        $log.error('无效的标识符' + v + '，标识符应为字符串');\r\n\t                });\r\n\t                if (util_1.default.type(fn) == 'array') {\r\n\t                    fn = fn.slice(-1)[0];\r\n\t                }\r\n\t                return fn.apply(obj, args);\r\n\t            }\r\n\t            /**\r\n\t             * 实例化\r\n\t             * @param fn\r\n\t             * @param local\r\n\t             */\r\n\t            function instantiate(fn, local) {\r\n\t                var fn2 = util_1.default.type(fn) == 'array' ? fn.slice(-1)[0] : fn;\r\n\t                var instance = Object.create(fn2.prototype);\r\n\t                invoke(fn, instance, local);\r\n\t                return instance;\r\n\t            }\r\n\t            function hasKey(key) {\r\n\t                return dataCache.hasOwnProperty(key) || providerCache.hasOwnProperty(key + 'Provider');\r\n\t            }\r\n\t            return {\r\n\t                has: hasKey,\r\n\t                get: handelCache,\r\n\t                invoke: invoke,\r\n\t                annotate: annotate,\r\n\t                instantiate: instantiate\r\n\t            };\r\n\t        }\r\n\t        function handeldepPath(arr) {\r\n\t            if (arr.length) {\r\n\t                if (arr[arr.length - 1][1].includes(arr[0][0])) {\r\n\t                    var path = arr.map(function (v) {\r\n\t                        return v[0];\r\n\t                    });\r\n\t                    path.push(arr[0][0]);\r\n\t                    cricle = true;\r\n\t                    $log.error('发现循环依赖' + path.join('->'));\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        /**\r\n\t         * 装饰器函数\r\n\t         * @param fn 注入的函数\r\n\t         */\r\n\t        function annotate(fn, name) {\r\n\t            var arr = [];\r\n\t            if (util_1.default.type(fn) == 'array') {\r\n\t                if (fn.length)\r\n\t                    arr = fn.slice(0, fn.length - 1);\r\n\t                else\r\n\t                    arr = [];\r\n\t            }\r\n\t            if (util_1.default.type(fn) == 'function') {\r\n\t                if (strict) {\r\n\t                    $log.error('函数没有$inject属性，不能再严格模式下使用');\r\n\t                }\r\n\t                else if (fn.$inject) {\r\n\t                    arr = fn.$inject;\r\n\t                }\r\n\t                else {\r\n\t                    var fns = (fn.toString().replace(COMMENTS_REG, '')).match(FN_REG);\r\n\t                    arr = util_1.default.arrayCompact(fns[1].split(',')).map(function (a) {\r\n\t                        return a.match(SPACE_REG)[1];\r\n\t                    });\r\n\t                    if (name != null) {\r\n\t                        depPath.push([name, arr]);\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            // console.log(arr)\r\n\t            return arr;\r\n\t        }\r\n\t        return dataInjecter;\r\n\t    };\r\n\t    return Injector;\r\n\t}());\r\n\texports.default = Injector;\r\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar HandelCoding = /** @class */ (function () {\r\n\t    function HandelCoding() {\r\n\t    }\r\n\t    /**\r\n\t     * 组合对象属性语句，类似于a.b\r\n\t     * @param left\r\n\t     * @param right\r\n\t     * @returns {any}\r\n\t     */\r\n\t    HandelCoding.prototype.nonComputedMember = function (left, right) {\r\n\t        return '(' + left + ').' + right;\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * @param left\r\n\t     * @param right\r\n\t     * @returns {any}\r\n\t     */\r\n\t    HandelCoding.prototype.computedMember = function (left, right) {\r\n\t        return '(' + left + ')[' + right + ']';\r\n\t    };\r\n\t    /**\r\n\t     * 组合成条件不存在的语句 例如!(str)\r\n\t     * @param expression any\r\n\t     * @returns {any}\r\n\t     */\r\n\t    HandelCoding.prototype.notExist = function (expression) {\r\n\t        return '!(' + expression + ')';\r\n\t    };\r\n\t    /**\r\n\t     * 组合js表达式,例如组合成 var a = 123;\r\n\t     * @param token\r\n\t     * @param value\r\n\t     * @returns {any}\r\n\t     */\r\n\t    HandelCoding.prototype.concatCode = function (token, value) {\r\n\t        return token + '=' + value + ';';\r\n\t    };\r\n\t    /**\r\n\t    * 此方法用于模拟if语句，判断参数是否成立，并组装成if语句\r\n\t    * @param condition\r\n\t    * @param statement\r\n\t    */\r\n\t    HandelCoding.prototype.conditionIsRight = function (array, condition, statement) {\r\n\t        array.push('if(', condition, '){', statement, '}');\r\n\t    };\r\n\t    /**\r\n\t     * 该函数每次被调用，参数id递增\r\n\t     * @param id\r\n\t     * @return {string}\r\n\t     */\r\n\t    HandelCoding.prototype.compileId = function (id, arr, flag) {\r\n\t        var uid = 'compileId' + id;\r\n\t        if (!flag) {\r\n\t            arr.unshift(uid);\r\n\t        }\r\n\t        return uid;\r\n\t    };\r\n\t    return HandelCoding;\r\n\t}());\r\n\texports.default = HandelCoding;\r\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar $log = __webpack_require__(2);\r\n\tvar HandelType = /** @class */ (function () {\r\n\t    function HandelType() {\r\n\t    }\r\n\t    /**\r\n\t     * 判断数据类型\r\n\t     * @param str\r\n\t     * @returns {any}\r\n\t     */\r\n\t    HandelType.prototype.type = function (str) {\r\n\t        var toString = Object.prototype.toString, map = {\r\n\t            '[object Boolean]': 'boolean',\r\n\t            '[object Number]': 'number',\r\n\t            '[object String]': 'string',\r\n\t            '[object Function]': 'function',\r\n\t            '[object Array]': 'array',\r\n\t            '[object Date]': 'date',\r\n\t            '[object RegExp]': 'regExp',\r\n\t            '[object Undefined]': 'undefined',\r\n\t            '[object Null]': 'null',\r\n\t            '[object Object]': 'object',\r\n\t            '[object Map]': 'map',\r\n\t            '[object Set]': 'set',\r\n\t            '[object Symbol]': 'symbol'\r\n\t        };\r\n\t        return map[toString.call(str)];\r\n\t    };\r\n\t    /**\r\n\t     * 判断输入的内容是否在0~9之间\r\n\t     * @param str\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    HandelType.prototype.isNumber = function (str) {\r\n\t        // if(Number(str).toString() != 'NaN') return true;\r\n\t        // else return false;\r\n\t        if (this.type(str) != 'string')\r\n\t            return false;\r\n\t        else\r\n\t            return str >= '0' && str <= '9';\r\n\t    };\r\n\t    /**\r\n\t     * 判断是否符合指数特征\r\n\t     * @param ch\r\n\t     * @returns {boolean|Boolean}\r\n\t     */\r\n\t    HandelType.prototype.isExponent = function (ch) {\r\n\t        return ch === '+' || ch === '-' || this.isNumber(ch);\r\n\t    };\r\n\t    /**\r\n\t     * 判断是否属于特定字符：字母，_, $\r\n\t     * @param str\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    HandelType.prototype.isLetter = function (str) {\r\n\t        var arr = str.split('');\r\n\t        return arr.every(function (i) {\r\n\t            return (i >= 'a' && i <= 'z') || (i >= 'A' && i <= 'Z') || (i === '_') || (i === '$');\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * 判断字符是否属于空格\r\n\t     * @param str\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    HandelType.prototype.isWhiteSpace = function (str) {\r\n\t        return str === ' ' || str === '\\r' || str === '\\t' || str === '\\n' || str === '\\v' || str === '\\u00A0';\r\n\t    };\r\n\t    /**\r\n\t     * 判断被解析的字符串属于那种数据类型\r\n\t     * @param str\r\n\t     * @returns {any}\r\n\t     */\r\n\t    HandelType.prototype.whichType = function (str) {\r\n\t        if (this.type(str) != 'string')\r\n\t            $log.error('数据类型错误' + str);\r\n\t        // '12', '12.12', '0.12e2'\r\n\t        if (this.isNumber(str) || str === '.')\r\n\t            return 'number';\r\n\t        else if (str.charAt(0) === \"'\" || str.charAt(0) === '\"')\r\n\t            return 'string';\r\n\t        else if (this.isLetter(str))\r\n\t            return 'letter';\r\n\t        else if ((str === '[' || str === ']' || str === ','))\r\n\t            return 'array';\r\n\t        else if ((str === '{' || str === '}' || str === ':'))\r\n\t            return 'object';\r\n\t        else if (str === '(' || str === ')')\r\n\t            return 'function';\r\n\t        else\r\n\t            return 'other';\r\n\t    };\r\n\t    return HandelType;\r\n\t}());\r\n\texports.default = HandelType;\r\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar mixins_1 = __webpack_require__(8);\r\n\tvar handelType_1 = __webpack_require__(35);\r\n\tvar handelCoding_1 = __webpack_require__(34);\r\n\tvar $log = __webpack_require__(2);\r\n\tvar util = /** @class */ (function () {\r\n\t    function util() {\r\n\t    }\r\n\t    /**\r\n\t     * 判断两个变量是否相等，只能匹配简单的数据类型\r\n\t     * @param str1\r\n\t     * @param str2\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    util.prototype.isEqual = function (str1, str2) {\r\n\t        return JSON.stringify(str1) === JSON.stringify(str2);\r\n\t    };\r\n\t    /**\r\n\t     * 判断两个变量是否相等\r\n\t     * @param newVal\r\n\t     * @param oldVal\r\n\t     * @param equalStatus 为TRUE,则深层次比较\r\n\t     */\r\n\t    util.prototype.areEqual = function (newVal, oldVal, equalStatus) {\r\n\t        if (equalStatus) {\r\n\t            return this.compare(newVal, oldVal);\r\n\t        }\r\n\t        else {\r\n\t            // return (newVal === oldVal) && (typeof newVal == 'number' && typeof oldVal == 'number' && !isNaN(newVal) && !isNaN(oldVal)) && (newVal != NaN && oldVal != NaN);\r\n\t            if (newVal.toString() == 'NaN') {\r\n\t                return true;\r\n\t            }\r\n\t            else {\r\n\t                return newVal === oldVal;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 判断两个变量是否相等, 此方法用于相同数据类型的变量比较\r\n\t     * @param a\r\n\t     * @param b\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    util.prototype.compare = function (a, b) {\r\n\t        var pt = /undefined|number|string|boolean/, fn = /^(function\\s*)(\\w*\\b)/, cr = \"constructor\", cn = \"childNodes\", pn = \"parentNode\";\r\n\t        if (pt.test(typeof a) || pt.test(typeof b) || a === null || b === null) {\r\n\t            return a === b || (isNaN(a) && isNaN(b)); //为了方便，此处假定NaN == NaN\r\n\t        }\r\n\t        if (a[cr] !== b[cr]) {\r\n\t            return false;\r\n\t        }\r\n\t        switch (a[cr]) {\r\n\t            case Date:\r\n\t                return a.valueOf() === b.valueOf();\r\n\t            case Function:\r\n\t                return a.toString().replace(fn, '$1') === b.toString().replace(fn, '$1'); //硬编码中声明函数的方式会影响到toString的结果，因此用正则进行格式化\r\n\t            case Array:\r\n\t                if (a.length !== b.length) {\r\n\t                    return false;\r\n\t                }\r\n\t                for (var i = 0; i < a.length; i++) {\r\n\t                    // if(!ce(a[i],b[i])){\r\n\t                    // \treturn false;\r\n\t                    // }\r\n\t                    if (a[i].toString() == b[i].toString()) { }\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                var alen = 0, blen = 0, d = void 0;\r\n\t                if (a === b) {\r\n\t                    return true;\r\n\t                }\r\n\t                if (a[cn] || a[pn] || b[cn] || b[pn]) {\r\n\t                    return a === b;\r\n\t                }\r\n\t                for (d in a) {\r\n\t                    alen++;\r\n\t                }\r\n\t                for (d in b) {\r\n\t                    blen++;\r\n\t                }\r\n\t                if (alen !== blen) {\r\n\t                    return false;\r\n\t                }\r\n\t                for (d in a) {\r\n\t                    if (a[d].toString() != b[d].toString()) {\r\n\t                        return false;\r\n\t                    }\r\n\t                }\r\n\t                break;\r\n\t        }\r\n\t        return true;\r\n\t    };\r\n\t    /**\r\n\t     * 浅拷贝，才方法只针对普通对象{}和数组[]\r\n\t     * @param str\r\n\t     * @returns {any}\r\n\t     */\r\n\t    util.prototype.clone = function (str) {\r\n\t        return JSON.parse(JSON.stringify(str));\r\n\t    };\r\n\t    util.prototype.deepClone = function (data) {\r\n\t        var t = this.type(data), o, i, ni;\r\n\t        if (t === 'array') {\r\n\t            o = [];\r\n\t        }\r\n\t        else if (t === 'object') {\r\n\t            o = {};\r\n\t        }\r\n\t        else {\r\n\t            return data;\r\n\t        }\r\n\t        if (t === 'array') {\r\n\t            for (i = 0, ni = data.length; i < ni; i++) {\r\n\t                o.push(this.deepClone(data[i]));\r\n\t            }\r\n\t            return o;\r\n\t        }\r\n\t        else if (t === 'object') {\r\n\t            for (i in data) {\r\n\t                o[i] = this.deepClone(data[i]);\r\n\t            }\r\n\t            return o;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 字符串或函数的执行次数\r\n\t     * @param obj:类型为Function, String\r\n\t     */\r\n\t    util.prototype.repeatObj = function (obj, manyTime) {\r\n\t        if (this.type(manyTime) != 'number') {\r\n\t            $log.error('函数repeat的参数manyTime类型为number');\r\n\t        }\r\n\t        switch (this.type(obj)) {\r\n\t            case 'string':\r\n\t                return obj.repeat(manyTime);\r\n\t            case 'function':\r\n\t                var arr = new Array(manyTime);\r\n\t                for (var i = 0; i < arr.length; i++) {\r\n\t                    obj();\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                return null;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 对每个scope的children进行遍历\r\n\t     * @param cb\r\n\t     * @param scope\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    util.prototype.everyScope = function (cb, scope) {\r\n\t        if (cb(scope)) {\r\n\t            return scope.$children.every(function (child) {\r\n\t                return child.everyScope(cb, scope);\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            return false;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 处理scope的event事件\r\n\t     * @param eventName\r\n\t     * @param arr\r\n\t     * @param scope\r\n\t     */\r\n\t    util.prototype.handelEvent = function (eventName, arr, scope) {\r\n\t        // if(arr[eventName] == undefined){\r\n\t        // \t$log.error('事件'+eventName+'不存在');\r\n\t        // }\r\n\t        // const event = {name: eventName};\r\n\t        var listener = arr[eventName] || function () { };\r\n\t        try {\r\n\t            listener(scope);\r\n\t        }\r\n\t        catch (e) {\r\n\t            $log.error(e);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 对象转map对象\r\n\t     * @param obj\r\n\t     * @returns {Map}\r\n\t     */\r\n\t    util.prototype.objToMap = function (obj) {\r\n\t        if (this.type(obj) != 'object')\r\n\t            return;\r\n\t        var map = new Map();\r\n\t        for (var i in obj) {\r\n\t            map.set(i, obj[i]);\r\n\t        }\r\n\t        return map;\r\n\t    };\r\n\t    /**\r\n\t     * map对象转普通对象\r\n\t     * @param map\r\n\t     * @returns {{}}\r\n\t     */\r\n\t    util.prototype.mapToObj = function (map) {\r\n\t        if (this.type(map) != 'map')\r\n\t            return;\r\n\t        var obj = {};\r\n\t        map.forEach(function (val, key) {\r\n\t            obj[key] = val;\r\n\t        });\r\n\t        return obj;\r\n\t    };\r\n\t    /**\r\n\t     * 此方法用于获取首位不写0浮点数的下一位字符\r\n\t     * @param index\r\n\t     * @param str\r\n\t     * @returns {string|boolean}\r\n\t     */\r\n\t    util.prototype.nextLeter = function (index, str) {\r\n\t        return (index < str.length - 1) ? str.charAt(index + 1) : false;\r\n\t    };\r\n\t    /**\r\n\t     * 将string类型的数据外层包装\\\r\n\t     * @param str\r\n\t     * @returns {any}\r\n\t     */\r\n\t    util.prototype.wrapString = function (str) {\r\n\t        if (this.type(str) == 'string') {\r\n\t            return '\\'' + str + '\\'';\r\n\t        }\r\n\t        else if (this.type(str) == 'null') {\r\n\t            return 'null';\r\n\t        }\r\n\t        else {\r\n\t            return str;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 判断数组第一个元素是否与有某个元素相等，如果是则将其移除\r\n\t     * @param str\r\n\t     * @param arr\r\n\t     * @returns {any[]}\r\n\t     */\r\n\t    util.prototype.expect = function (arr) {\r\n\t        var str = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            str[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        var that = this;\r\n\t        function es(val) {\r\n\t            return that.exitFirst(arr, val);\r\n\t        }\r\n\t        // console.log(str);\r\n\t        if (str.some(es)) {\r\n\t            return arr.shift();\r\n\t        }\r\n\t        // if(this.exitFirst(arr, str)) return arr.shift();\r\n\t    };\r\n\t    /**\r\n\t     * 在expect函数基础上，如果目标元素不匹配报错\r\n\t     * @param str\r\n\t     * @param arr\r\n\t     * @returns {any}\r\n\t     */\r\n\t    util.prototype.consume = function (arr, str) {\r\n\t        var t = this.expect(arr, str);\r\n\t        if (!t)\r\n\t            $log.error('词法解析错误' + str);\r\n\t        return t;\r\n\t    };\r\n\t    /**\r\n\t     * 判断数组第一个元素是否与有某个元素相等，相等则返回首个数组首个元素\r\n\t     * @param str\r\n\t     * @param arr\r\n\t     * @returns {number}\r\n\t     */\r\n\t    util.prototype.exit = function (str, arr) {\r\n\t        if (this.type(arr) != 'array')\r\n\t            return;\r\n\t        if (!arr.length)\r\n\t            return;\r\n\t        for (var i = 0; i < arr.length; i++) {\r\n\t            if (str == arr[i]['text']) {\r\n\t                return i;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 只针对对象的第一个元素\r\n\t     * @param arr\r\n\t     * @param str\r\n\t     * @returns {any}\r\n\t     */\r\n\t    util.prototype.exitFirst = function (arr, str) {\r\n\t        if (this.type(arr) != 'array')\r\n\t            return;\r\n\t        if (!arr.length)\r\n\t            return;\r\n\t        if (!str || (str == arr[0]['text'])) {\r\n\t            return arr[0];\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * 数组去重，针对普通类型的数组\r\n\t     * @param arr\r\n\t     * @returns {Array}\r\n\t     */\r\n\t    util.prototype.uArray = function (arr) {\r\n\t        var newArr = [];\r\n\t        var set = new Set(arr);\r\n\t        set.forEach(function (val) {\r\n\t            newArr.push(val);\r\n\t        });\r\n\t        return newArr;\r\n\t    };\r\n\t    /**\r\n\t     * 获取数组中某个元素的下标\r\n\t     * @param data\r\n\t     * @param array\r\n\t     * @returns {any}\r\n\t     */\r\n\t    util.prototype.arrayItem = function (data, array) {\r\n\t        if (this.type(array) != 'array')\r\n\t            return;\r\n\t        var item = [];\r\n\t        for (var i = 0; i < array.length; i++) {\r\n\t            if (array[i].toString() === data.toString())\r\n\t                item.push(i);\r\n\t        }\r\n\t        // console.log(item,array);\r\n\t        return item;\r\n\t    };\r\n\t    /**\r\n\t     * 获取数组中某个对象元素的下标\r\n\t     */\r\n\t    util.prototype.arrayItem2 = function (data, array) {\r\n\t        if (this.type(array) != 'array')\r\n\t            return;\r\n\t        var item;\r\n\t        for (var i = 0; i < array.length; i++) {\r\n\t            if (array[i]['name'] === data)\r\n\t                item = i;\r\n\t        }\r\n\t        return item;\r\n\t    };\r\n\t    /**\r\n\t     * 获取数组中某个重复元素的最后下标\r\n\t     */\r\n\t    util.prototype.arrayLastItem = function (data, array) {\r\n\t        if (this.type(array) != 'array')\r\n\t            return;\r\n\t        var item;\r\n\t        array = array.reverse();\r\n\t        for (var i = 0; i < array.length; i++) {\r\n\t            if (array[i] === data)\r\n\t                item = i;\r\n\t        }\r\n\t        return item;\r\n\t    };\r\n\t    /**\r\n\t     * 去除数组中的重复元素\r\n\t     * @param data\r\n\t     * @param array\r\n\t     * @returns {Array}\r\n\t     */\r\n\t    util.prototype.arraySplice = function (data, array) {\r\n\t        if (this.type(array) != 'array')\r\n\t            return;\r\n\t        var arr = this.arrayItem(data, array);\r\n\t        for (var i = 0; i < arr.length; i++) {\r\n\t            array.splice(arr[i], 1);\r\n\t        }\r\n\t        return array;\r\n\t    };\r\n\t    /**\r\n\t     * 去除数组中的'',null,undefined\r\n\t     */\r\n\t    util.prototype.arrayCompact = function (arr) {\r\n\t        var newArr = [];\r\n\t        arr.forEach(function (v) {\r\n\t            if (v != '' && v != null && v != undefined)\r\n\t                newArr.push(v);\r\n\t        });\r\n\t        return newArr;\r\n\t    };\r\n\t    /**\r\n\t     * 获取两个数组的交集\r\n\t     * @param a\r\n\t     * @param b\r\n\t     */\r\n\t    util.prototype.intersection = function (a, b) {\r\n\t        return a.filter(function (v) { return b.includes(v); });\r\n\t    };\r\n\t    /**\r\n\t     * 对字符串进行解析\r\n\t     * @param str\r\n\t     * @returns {Function}\r\n\t     */\r\n\t    util.prototype.parseString = function (str) {\r\n\t        if (this.type(str) != 'string')\r\n\t            return;\r\n\t        return new Function(\"return \" + str);\r\n\t    };\r\n\t    /**\r\n\t     * 用于判断对象是否含有某个属性,并返回与表达式 ‘scope’ && （\\‘a\\’ in 'scope'）\r\n\t     * @param obj\r\n\t     * @param ele\r\n\t     * @returns {any}\r\n\t     */\r\n\t    util.prototype.hasProperty = function (obj, ele) {\r\n\t        return obj + ' && (' + this.wrapString(ele) + ' in ' + obj + ')';\r\n\t    };\r\n\t    /**\r\n\t     * 判断所传字符串与目标字符串是否相等\r\n\t     * @param target\r\n\t     * @param str\r\n\t     * @returns {any}\r\n\t     */\r\n\t    util.prototype.inStr = function (target, str) {\r\n\t        return str.includes(target);\r\n\t    };\r\n\t    /**\r\n\t     * 获取对象的键\r\n\t     * @param obj\r\n\t     */\r\n\t    util.prototype.objKey = function (obj) {\r\n\t        var arr = [];\r\n\t        for (var i in obj) {\r\n\t            arr.push(i);\r\n\t        }\r\n\t        return arr;\r\n\t    };\r\n\t    /**\r\n\t     * 获取对象的值\r\n\t     * @param obj\r\n\t     */\r\n\t    util.prototype.objVal = function (obj) {\r\n\t        var arr = [];\r\n\t        for (var i in obj) {\r\n\t            arr.push(obj[i]);\r\n\t        }\r\n\t        return arr;\r\n\t    };\r\n\t    /**\r\n\t     * 判断对象是否为空\r\n\t     * @param obj 对象\r\n\t     */\r\n\t    util.prototype.isEmpty = function (obj) {\r\n\t        if (this.type(obj) != 'object')\r\n\t            return;\r\n\t        if (JSON.stringify(obj) == '{}')\r\n\t            return true;\r\n\t        return false;\r\n\t    };\r\n\t    /**\r\n\t     * 移除对象中某些元素\r\n\t     * @param obj 对象\r\n\t     * @param ...str  需要移除的元素\r\n\t     */\r\n\t    util.prototype.expectSome = function (obj) {\r\n\t        var str = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            str[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        var newObj = this.clone(obj);\r\n\t        str.forEach(function (v) {\r\n\t            delete newObj[v];\r\n\t        });\r\n\t        return newObj;\r\n\t    };\r\n\t    /**\r\n\t     * x-a转驼峰xA\r\n\t     * @param str\r\n\t     */\r\n\t    util.prototype.cameCase = function (str) {\r\n\t        return str.replace(/\\-(\\w)/g, function (x) { return x.slice(1).toUpperCase(); });\r\n\t    };\r\n\t    /**\r\n\t     * 驼峰xA转x-a\r\n\t     * @param str\r\n\t     */\r\n\t    util.prototype._cameCase = function (str) {\r\n\t        return str.replace(/([A-Z])/g, \"-$1\");\r\n\t    };\r\n\t    /**\r\n\t     * 合并对象\r\n\t     * @param target\r\n\t     * @param source\r\n\t     */\r\n\t    util.prototype.extend = function (target, source) {\r\n\t        for (var i in source) {\r\n\t            target[i] = source[i];\r\n\t        }\r\n\t        return target;\r\n\t    };\r\n\t    /**\r\n\t     * 去除空格 回车 换行\r\n\t     * @param str\r\n\t     */\r\n\t    util.prototype.trimStr = function (str) {\r\n\t        var res = str.trim();\r\n\t        res = res.replace(/\\s+/g, '');\r\n\t        res = res.replace(/[\\r\\n]/g, '');\r\n\t        return res;\r\n\t    };\r\n\t    /**\r\n\t     * 获取当前时间 20170516\r\n\t     */\r\n\t    util.prototype.now = function () {\r\n\t        var date = new Date(), year = date.getFullYear().toString(), month = (date.getMonth() + 1).toString(), day = date.getDate().toString();\r\n\t        month = parseInt(month) < 10 ? '0' + month : month;\r\n\t        return year + month + day + '0';\r\n\t    };\r\n\t    util.prototype.page = function () {\r\n\t        return {\r\n\t            width: window.innerWidth,\r\n\t            height: window.innerHeight\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * 将class转换为json\r\n\t     * @param fn class函数\r\n\t     * @param isRoot 是否为根组件\r\n\t     */\r\n\t    util.prototype.classToJson = function (fn, isRoot) {\r\n\t        if (isRoot === void 0) { isRoot = false; }\r\n\t        var app;\r\n\t        var rootComponent = {};\r\n\t        if (fn) {\r\n\t            app = new fn();\r\n\t        }\r\n\t        else {\r\n\t            $log.error('函数' + fn + '未找到');\r\n\t        }\r\n\t        var obj = Object.create(app);\r\n\t        var propertyObj = obj.__proto__;\r\n\t        var prototypeObj = obj.__proto__.__proto__;\r\n\t        var arr = Object.entries(propertyObj).concat(Object.entries(prototypeObj).slice(1));\r\n\t        var protoNames = Object.getOwnPropertyNames(prototypeObj);\r\n\t        var componentJson = {};\r\n\t        for (var i = 1; i < protoNames.length; i++) {\r\n\t            componentJson[protoNames[i]] = prototypeObj[protoNames[i]];\r\n\t        }\r\n\t        arr.forEach(function (v, i) {\r\n\t            componentJson[v[0]] = v[1];\r\n\t            if (isRoot) {\r\n\t                rootComponent[v[0]] = v[1];\r\n\t            }\r\n\t        });\r\n\t        return {\r\n\t            componentJson: componentJson, rootComponent: rootComponent\r\n\t        };\r\n\t    };\r\n\t    return util;\r\n\t}());\r\n\texports.util = util;\r\n\tmixins_1.applyMixins(util, [handelType_1.default, handelCoding_1.default]);\r\n\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// dist/bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f27ae950ade394ee3c04","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar compile_1 = require(\"./compile\");\r\nexports.Component = compile_1.Component;\r\nvar Dom_1 = require(\"./Dom\");\r\nexports.Dom = Dom_1.default;\r\nvar store_1 = require(\"./store\");\r\nvar Store = new store_1.default('user');\r\nexports.Store = Store;\r\nvar cookie_1 = require(\"./cache/cookie\");\r\nexports.Cookie = cookie_1.default;\r\nexports.default = compile_1.default;\r\nwindow.Cpage = new compile_1.default();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.ts\n// module id = 0\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar util_1 = require(\"./util\");\r\nvar Util = new util_1.util();\r\nexports.default = Util;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/index.ts\n// module id = 1\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction log(str) {\r\n    console.log(str);\r\n}\r\nexports.log = log;\r\nfunction info(str) {\r\n    console.log(str);\r\n}\r\nexports.info = info;\r\nfunction warn(str) {\r\n    console.log(str);\r\n}\r\nexports.warn = warn;\r\nfunction error(str) {\r\n    throw new Error(str);\r\n}\r\nexports.error = error;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/log.ts\n// module id = 2\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * 公共方法\r\n */\r\nvar targetDom = /** @class */ (function () {\r\n    function targetDom(selector) {\r\n        this.elements = document.querySelectorAll(selector);\r\n        this.els = this._getEles(this.elements);\r\n    }\r\n    targetDom.prototype._getEles = function (nodes) {\r\n        if (nodes && nodes.length) {\r\n            return nodes;\r\n        }\r\n    };\r\n    /**\r\n     * 遍历dom节点\r\n     * @param nodes 节点\r\n     * @param fn 回调函数 val, index\r\n     */\r\n    targetDom.prototype.each = function (nodes, fn) {\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            fn(nodes[i], i);\r\n        }\r\n    };\r\n    return targetDom;\r\n}());\r\nexports.default = targetDom;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/targetDom.ts\n// module id = 3\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar loader_1 = require(\"./loader\");\r\nvar injector_1 = require(\"./injector\");\r\nvar loader = new loader_1.default();\r\nvar inject = new injector_1.default();\r\n/**\r\n * 数据存储解析服务\r\n */\r\nvar Store = /** @class */ (function () {\r\n    function Store(moduleName) {\r\n        if (moduleName === void 0) { moduleName = 'Cpage'; }\r\n        this.app = loader.module(moduleName, []);\r\n        this.ins = function () {\r\n            return inject.inject([moduleName]);\r\n        };\r\n    }\r\n    /**\r\n     * 存储数据\r\n     * @param key\r\n     * @param val\r\n     */\r\n    Store.prototype.data = function (key, val) {\r\n        this.app.data(key, val);\r\n    };\r\n    /**\r\n     * 是否有key这个变量\r\n     * @param key\r\n     */\r\n    Store.prototype.has = function (key) {\r\n        return this.ins().has(key);\r\n    };\r\n    /**\r\n     * 获取数据\r\n     * @param key\r\n     */\r\n    Store.prototype.get = function (key) {\r\n        return this.ins().get(key);\r\n    };\r\n    /**\r\n     * provider函数\r\n     * @param key\r\n     * @param obj { $get: function(){} }\r\n     */\r\n    Store.prototype.provider = function (key, obj) {\r\n        this.app.provider(key, obj);\r\n    };\r\n    /**\r\n     * factory函数\r\n     * @param key\r\n     * @param fn 需要返回值\r\n     */\r\n    Store.prototype.factory = function (key, fn) {\r\n        this.app.factory(key, fn);\r\n    };\r\n    /**\r\n     * service 函数\r\n     * @param key\r\n     * @param fn\r\n     */\r\n    Store.prototype.service = function (key, fn) {\r\n        this.app.service(key, fn);\r\n    };\r\n    return Store;\r\n}());\r\nexports.default = Store;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/store/index.ts\n// module id = 4\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HandelEventer = /** @class */ (function () {\r\n    function HandelEventer() {\r\n        this.eventList = {};\r\n    }\r\n    /**\r\n     * 触发事件\r\n     * @param name\r\n     * @param msg\r\n     */\r\n    HandelEventer.prototype.trigger = function (name, msg) {\r\n        var key = Array.prototype.shift.call(arguments);\r\n        var fns = this.eventList[key];\r\n        if (!fns || fns.length === 0) {\r\n            return false;\r\n        }\r\n        ;\r\n        for (var i = 0, fn; fn = fns[i++];) {\r\n            fn.apply(this, arguments);\r\n        }\r\n    };\r\n    /**\r\n     * 监听事件\r\n     * @param name\r\n     * @param fn\r\n     */\r\n    HandelEventer.prototype.listen = function (name, fn) {\r\n        if (!this.eventList[name]) {\r\n            this.eventList[name] = [];\r\n        }\r\n        ;\r\n        this.eventList[name].push(fn);\r\n    };\r\n    HandelEventer.prototype.remove = function (key, fn) {\r\n        var fns = this.eventList[key];\r\n        // key对应的消息没有被人订阅\r\n        if (!fns) {\r\n            return false;\r\n        }\r\n        // 没有传入fn(具体的回调函数), 表示取消key对应的所有订阅\r\n        if (!fn) {\r\n            fns && (fns.length = 0);\r\n        }\r\n        else {\r\n            // 反向遍历\r\n            for (var i = fns.length - 1, _fn = fns[i]; i >= 0; i--) {\r\n                if (_fn === fn) {\r\n                    // 删除订阅回调函数\r\n                    fns.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return HandelEventer;\r\n}());\r\nvar Eventer = new HandelEventer();\r\nexports.default = Eventer;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/HandelEventer.ts\n// module id = 5\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//数据类型\r\nexports.dataType = {\r\n    '1': 'ASTBuilder.Init',\r\n    '2': 'ASTBuilder.MetaData',\r\n    '3': 'ASTBuilder.Array',\r\n    '4': 'ASTBuilder.Object',\r\n    '5': 'ASTBuilder.Identifier',\r\n    '6': 'ASTBuilder.This',\r\n    '7': 'ASTBuilder.Member',\r\n    '8': 'ASTBuilder.Function',\r\n    '9': 'ASTBuilder.Assignment',\r\n    '10': 'ASTBuilder.Unary',\r\n    '11': 'ASTBuilder.Binary',\r\n    '12': 'ASTBuilder.Logical',\r\n    '13': 'ASTBuilder.Teranry'\r\n};\r\n// astBuilder的词法解析匹配模式\r\nexports.ast_init = {\r\n    type: exports.dataType['1'],\r\n    body: {}\r\n};\r\n//常量\r\nexports.ast_constant = {\r\n    type: exports.dataType['2'],\r\n    value: undefined\r\n};\r\n//数组\r\nexports.ast_array = {\r\n    type: exports.dataType['3'],\r\n    value: undefined\r\n};\r\n/**\r\n * 对象\r\n * {\"type\":\"ASTBuilder.Object\",\"value\":[{\"type\":\"ASTBuilder.Identifier\",\"key\":{\"type\":\"ASTBuilder.MetaData\",\"value\":\"id\"},\"value\":{\"type\"\r\n:\"ASTBuilder.MetaData\",\"value\":1}}]}\r\n */\r\nexports.ast_object = {\r\n    type: exports.dataType['4'],\r\n    value: undefined //数组，指向ast_json\r\n};\r\nexports.ast_json = {\r\n    type: exports.dataType['5'],\r\n    key: undefined,\r\n    value: undefined\r\n};\r\n// 标识符\r\nexports.ast_identifier = {\r\n    type: exports.dataType['5'],\r\n    value: undefined\r\n};\r\n// this\r\nexports.ast_this = {\r\n    type: exports.dataType['6']\r\n};\r\n// 对象属性表达式，a.b a['b']\r\nexports.ast_member = {\r\n    type: exports.dataType['7'],\r\n    object: undefined,\r\n    property: undefined,\r\n    computed: undefined\r\n};\r\n// 函数表达式\r\nexports.ast_function = {\r\n    type: exports.dataType['8'],\r\n    callee: undefined,\r\n    arguments: undefined,\r\n    pipe: Boolean\r\n};\r\n// 赋值表达式\r\nexports.ast_assignment = {\r\n    type: exports.dataType['9'],\r\n    left: undefined,\r\n    right: undefined\r\n};\r\n// 一元运算符\r\nexports.ast_unary = {\r\n    type: exports.dataType['10'],\r\n    operator: '+',\r\n    value: undefined\r\n};\r\n// 二元运算符\r\nexports.ast_binary = {\r\n    type: exports.dataType['11'],\r\n    left: undefined,\r\n    operator: undefined,\r\n    right: undefined\r\n};\r\n// 逻辑运算符\r\nexports.ast_logical = {\r\n    type: exports.dataType['12'],\r\n    left: undefined,\r\n    operator: undefined,\r\n    right: undefined\r\n};\r\n// 三元运算符\r\nexports.ast_teranry = {\r\n    type: exports.dataType['13'],\r\n    boolean_expression: undefined,\r\n    true_value: undefined,\r\n    error_value: undefined\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/config/ast_config.ts\n// module id = 6\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// js特殊字符\r\nvar SPECIALS = {\r\n    '\\'': '\\'',\r\n    '\\\"': '\\\"',\r\n    '&': '\\&',\r\n    '\\\\': '\\\\',\r\n    'n': '\\n',\r\n    'r': '\\r',\r\n    't': '\\t',\r\n    'b': '\\b',\r\n    'f': '\\f',\r\n};\r\nexports.SPECIALS = SPECIALS;\r\n//词法解析中关于字符的配置对象\r\nvar LETTER = {\r\n    'null': null,\r\n    'true': true,\r\n    'false': false,\r\n    'undefined': undefined,\r\n    'this': undefined\r\n};\r\nexports.LETTER = LETTER;\r\n//运算符\r\nvar OPERATORS = {\r\n    '+': true,\r\n    '!': true,\r\n    '-': true,\r\n    '*': true,\r\n    '%': true,\r\n    '/': true,\r\n    '=': true,\r\n    '>': true,\r\n    '<': true,\r\n    '>=': true,\r\n    '<=': true,\r\n    '==': true,\r\n    '===': true,\r\n    '!=': true,\r\n    '!==': true,\r\n    '&&': true,\r\n    '||': true,\r\n    '|': true\r\n};\r\nexports.OPERATORS = OPERATORS;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/config/lexer_config.ts\n// module id = 7\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction mixins() {\r\n    var otherClass = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        otherClass[_i] = arguments[_i];\r\n    }\r\n    return function (targetClass) {\r\n        Object.assign.apply(Object, [targetClass.prototype].concat(otherClass));\r\n    };\r\n}\r\nexports.mixins = mixins;\r\n/**\r\n * 此方法用于实现class多继承\r\n * @param derivedCtor\r\n * @param baseCtors\r\n */\r\nfunction applyMixins(derivedCtor, baseCtors) {\r\n    baseCtors.forEach(function (baseCtor) {\r\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {\r\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\r\n        });\r\n    });\r\n}\r\nexports.applyMixins = applyMixins;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mixins.ts\n// module id = 8\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lexer_1 = require(\"./lexer\");\r\nvar parser_1 = require(\"./parser\");\r\nvar pipe_1 = require(\"../pipe/pipe\");\r\nvar ps = new pipe_1.default();\r\nvar util_1 = require(\"../util\");\r\nvar Parse = /** @class */ (function () {\r\n    function Parse() {\r\n        this.pipes = ps.pipes;\r\n    }\r\n    /**\r\n     * 注册管道\r\n     * @param name\r\n     * @param factory\r\n     */\r\n    Parse.prototype.register = function (name, factory) {\r\n        ps.register(name, factory);\r\n        return this;\r\n    };\r\n    Parse.prototype.pipe = function (name) {\r\n        return ps.pipe(name);\r\n    };\r\n    /**\r\n     * 词法解析\r\n     * @param str\r\n     */\r\n    Parse.prototype.parse = function (str) {\r\n        var that = this;\r\n        function parse(expression, pipes) {\r\n            switch (util_1.default.type(expression)) {\r\n                case 'string':\r\n                    var lexer = new lexer_1.default();\r\n                    var parser = new parser_1.default(lexer, pipes);\r\n                    var oneTime = false;\r\n                    //单次检测\r\n                    if (expression.charAt(0) == ':' && expression.charAt(1) == ':') {\r\n                        oneTime = true;\r\n                        expression = expression.substring(2);\r\n                    }\r\n                    var parseFn = parser.parse(expression);\r\n                    if (parseFn.constant) {\r\n                        parseFn.$$handelWatch = that.constantHandelWatch;\r\n                    }\r\n                    if (oneTime) {\r\n                        parseFn.$$handelWatch = parseFn.literal ? that.oneTimeLiteralHandelWatch : that.oneTimeHandelWatch;\r\n                    }\r\n                    if (parseFn.inputs) {\r\n                        parseFn.$$handelWatch = that.inputsHandelWatch;\r\n                    }\r\n                    return parseFn;\r\n                case 'function':\r\n                    return expression;\r\n            }\r\n        }\r\n        return parse(str, this.pipes);\r\n    };\r\n    /**\r\n     * 处理参数为常量的状况\r\n     * @param state\r\n     * @param listenerFn\r\n     * @param valueEq\r\n     * @param watchFn\r\n     */\r\n    Parse.prototype.constantHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n        var cancel = state.$watch(function () {\r\n            return watchFn(state);\r\n        }, function (newVal, oldVal, state) {\r\n            if (util_1.default.type(listenerFn) == 'function') {\r\n                listenerFn.apply(this, arguments);\r\n            }\r\n        }, valueEq);\r\n        return cancel;\r\n    };\r\n    /**\r\n     * 处理单次检测问题\r\n     * @param state\r\n     * @param listenerFn\r\n     * @param valueEq\r\n     * @param watchFn\r\n     */\r\n    Parse.prototype.oneTimeHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n        var lastVal;\r\n        var cancel = state.$watch(function () {\r\n            return watchFn(state);\r\n        }, function (newVal, oldVal, state) {\r\n            lastVal = newVal;\r\n            if (util_1.default.type(listenerFn) == 'function') {\r\n                listenerFn.apply(this, arguments);\r\n            }\r\n            if (util_1.default.type(newVal) != 'undefined') {\r\n                state.$afterDigest(function () {\r\n                    if (util_1.default.type(lastVal) != 'undefined') {\r\n                        cancel();\r\n                    }\r\n                });\r\n            }\r\n        }, valueEq);\r\n        return cancel;\r\n    };\r\n    /**\r\n     * 处理数组或对象的变量问题\r\n     * @param state\r\n     * @param listenerFn\r\n     * @param valueEq\r\n     * @param watchFn\r\n     */\r\n    Parse.prototype.oneTimeLiteralHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n        var lastVal;\r\n        var cancel = state.$watch(function () {\r\n            return watchFn(state);\r\n        }, function (newVal, oldVal, state) {\r\n            lastVal = newVal;\r\n            if (util_1.default.type(listenerFn) == 'function') {\r\n                listenerFn.apply(this, arguments);\r\n            }\r\n            if (util_1.default.type(newVal) != 'undefined') {\r\n                state.$afterDigest(function () {\r\n                    if (util_1.default.type(lastVal) != 'undefined') {\r\n                        cancel();\r\n                    }\r\n                });\r\n            }\r\n        }, valueEq);\r\n        return cancel;\r\n    };\r\n    Parse.prototype.inputsHandelWatch = function (state, listenerFn, valueEq, watchFn) {\r\n        var inputExpr = watchFn.inputs;\r\n        return state.$watch(function () {\r\n        }, listenerFn, valueEq);\r\n    };\r\n    return Parse;\r\n}());\r\nvar parse = new Parse();\r\nexports.default = parse;\r\n// 默认管道函数--开始\r\nvar newParse = new Parse();\r\nnewParse.register('filter', defaultFilter);\r\nfunction defaultFilter() {\r\n    return function (array, filterExp) {\r\n        var predicateFn;\r\n        switch (util_1.default.type(filterExp)) {\r\n            case 'function':\r\n                predicateFn = filterExp;\r\n                break;\r\n            case 'string':\r\n            case 'number':\r\n            case 'boolean':\r\n            case 'null':\r\n            case 'undefined':\r\n            case 'object':\r\n                predicateFn = createPredicateFn(filterExp);\r\n                break;\r\n            default:\r\n                return array;\r\n        }\r\n        return array.filter(predicateFn);\r\n    };\r\n}\r\n// 如果pipe后面非函数表达式就生成一个\r\nfunction createPredicateFn(exp) {\r\n    // item指数组元素\r\n    return function predicateFn(item) {\r\n        return deepCompareValues(item, exp, compareValues);\r\n    };\r\n}\r\n// source值数组的元素，target值pipe表达式冒号后面的字符，pipe:\"a\"\r\nfunction compareValues(source, target) {\r\n    if (util_1.default.type(source) == 'null' || util_1.default.type(target) == 'null') {\r\n        return source === target;\r\n    }\r\n    // 不对undefined处理\r\n    if (util_1.default.type(source) == 'undefined')\r\n        return false;\r\n    source = ('' + source).toLowerCase();\r\n    target = ('' + target).toLowerCase();\r\n    return source.includes(target);\r\n}\r\n// 如果数组元素是对象进行深度比较\r\nfunction deepCompareValues(source, target, compare) {\r\n    if (util_1.default.type(target) == 'string' && target.startsWith('!')) {\r\n        return !deepCompareValues(source, target.substring(1), compare);\r\n    }\r\n    if (util_1.default.type(source) == 'object') {\r\n        if (util_1.default.type(target) == 'object') {\r\n            for (var i in target) {\r\n                return deepCompareValues(source[i], target[i], compare);\r\n            }\r\n        }\r\n        var arr = util_1.default.objVal(source);\r\n        return arr.some(function (val) {\r\n            return deepCompareValues(val, target, compare);\r\n        });\r\n    }\r\n    return compare(source, target);\r\n}\r\n// 注册管道函数--结束\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/parse/index.ts\n// module id = 9\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../../log\");\r\nvar moduleNames = {};\r\nvar Loader = /** @class */ (function () {\r\n    function Loader() {\r\n        this.modules = {\r\n            name: '',\r\n            requires: []\r\n        };\r\n    }\r\n    Loader.prototype.clear = function () {\r\n        this.modules = {};\r\n    };\r\n    /**\r\n     * 模块\r\n     * @param name 模块名称\r\n     * @param requires 模块的依赖项\r\n     * @param configFn 配置函数\r\n     */\r\n    Loader.prototype.module = function (name, requires, configFn) {\r\n        var modules = {};\r\n        if (requires) {\r\n            this.modules = this.$$set(name, requires, modules, configFn);\r\n        }\r\n        else {\r\n            this.modules = this.$$get(name, modules);\r\n        }\r\n        return this.modules;\r\n    };\r\n    /**\r\n     * 生成module\r\n     * @param name\r\n     * @param requires\r\n     * @param configFn\r\n     */\r\n    Loader.prototype.$$set = function (name, requires, modules, configFn) {\r\n        if (name == 'hasOwnProperty')\r\n            $log.error('hasOwnProperty不能用于键名');\r\n        var invokeQueue = [];\r\n        var configQueue = [];\r\n        /**\r\n         * 引用函数\r\n         * @param service 服务名称\r\n         * @param prefix data,provider\r\n         * @param arrProp 数组属性\r\n         * @param queue 引用队列\r\n         */\r\n        var invokeFn = function (service, prefix, arrProp, queue) {\r\n            if (arrProp === void 0) { arrProp = 'push'; }\r\n            if (queue === void 0) { queue = invokeQueue; }\r\n            return function () {\r\n                queue[arrProp]([service, prefix, arguments]);\r\n                return moduleObj;\r\n            };\r\n        };\r\n        var moduleObj = {\r\n            name: name,\r\n            requires: requires,\r\n            // data: (key, val)=>{\r\n            //     invokeQueue.unshift(['data', [key, val]]);\r\n            // },\r\n            // provider: (key, val)=>{\r\n            //     invokeQueue.push(['provider', [key, val]]);\r\n            // },\r\n            data: invokeFn('$provider', 'data', 'unshift'),\r\n            provider: invokeFn('$provider', 'provider'),\r\n            factory: invokeFn('$provider', 'factory'),\r\n            value: invokeFn('$provider', 'value'),\r\n            service: invokeFn('$provider', 'service'),\r\n            config: invokeFn('$injector', 'invoke', 'push', configQueue),\r\n            run: function (fn) {\r\n                moduleObj._runQueue.push(fn);\r\n                return moduleObj;\r\n            },\r\n            pipe: invokeFn('$pipeProvider', 'register'),\r\n            // directive: invokeFn('$compileProvider', 'directive'),\r\n            _invokeQueue: invokeQueue,\r\n            _configQueue: configQueue,\r\n            _runQueue: []\r\n        };\r\n        if (configFn) {\r\n            moduleObj.config(configFn);\r\n        }\r\n        this.modules = moduleNames[name] = moduleObj;\r\n        return moduleObj;\r\n    };\r\n    /**\r\n     * 根据name获取module\r\n     * @param name\r\n     * @param modules\r\n     */\r\n    Loader.prototype.$$get = function (name, modules) {\r\n        if (moduleNames.hasOwnProperty(name)) {\r\n            return moduleNames[name];\r\n        }\r\n        $log.error('名称为' + name + '的module不存在！');\r\n    };\r\n    return Loader;\r\n}());\r\nexports.default = Loader;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/store/loader/index.ts\n// module id = 10\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar targetDom_1 = require(\"./targetDom\");\r\nvar util_1 = require(\"../util\");\r\n// 事件的操作\r\nvar eventModel = /** @class */ (function (_super) {\r\n    __extends(eventModel, _super);\r\n    function eventModel(selector) {\r\n        return _super.call(this, selector) || this;\r\n    }\r\n    // 事件绑定\r\n    eventModel.prototype.on = function (eventType, fn) {\r\n        this.each(this.els, function (val, index) {\r\n            val.addEventListener(eventType, fn, false);\r\n        });\r\n    };\r\n    // 解除事件绑定\r\n    eventModel.prototype.off = function (eventType, fn) {\r\n        this.each(this.els, function (val, index) {\r\n            val.removeEventListener(eventType, fn, false);\r\n        });\r\n    };\r\n    // 鼠标移入移除\r\n    eventModel.prototype.hover = function (hover, out) {\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (util_1.default.type(hover) == 'function') {\r\n                i.addEventListener('mouseover', hover, false);\r\n            }\r\n            else {\r\n                throw new Error('hover方法：没有传递回调函数');\r\n            }\r\n            if (util_1.default.type(out) == 'function') {\r\n                i.addEventListener('mouseout', hover, false);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    // 点击事件\r\n    eventModel.prototype.click = function (fn) {\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (util_1.default.type(fn) == 'function') {\r\n                i.addEventListener('click', fn, false);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    //设置点击切换方法\r\n    eventModel.prototype.toggle = function () {\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            (function (element, args) {\r\n                var count = 0;\r\n                element.addEventListener('click', function () {\r\n                    args[count++ % args.length].call(this);\r\n                }, false);\r\n            })(i, arguments);\r\n        }\r\n        return this;\r\n    };\r\n    //窗口滚动事件\r\n    eventModel.prototype.scroll = function (fn) {\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (util_1.default.type(fn) == 'function') {\r\n                i.addEventListener('scroll', fn, false);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    eventModel.prototype.resize = function (fn) {\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            var offsetLeft = i.offsetLeft;\r\n            var offsetWidth = i.offsetWidth;\r\n            var offsetTop = i.offsetTop;\r\n            var offsetHeight = i.offsetHeight;\r\n            window.onresize = function () {\r\n                fn();\r\n                if (offsetLeft >= util_1.default.page().width - offsetWidth) {\r\n                    offsetLeft = util_1.default.page().width - offsetWidth;\r\n                }\r\n                if (offsetTop >= util_1.default.page().height - offsetHeight) {\r\n                    offsetTop = util_1.default.page().height - offsetHeight;\r\n                }\r\n            };\r\n        }\r\n        return this;\r\n    };\r\n    return eventModel;\r\n}(targetDom_1.default));\r\nexports.default = eventModel;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/eventModel.ts\n// module id = 11\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar targetDom_1 = require(\"./targetDom\");\r\nvar nodeModel_1 = require(\"./nodeModel\");\r\nvar eventModel_1 = require(\"./eventModel\");\r\nvar moveModel_1 = require(\"./moveModel\");\r\nvar statusModel_1 = require(\"./statusModel\");\r\nvar mixins_1 = require(\"../mixins\");\r\n// dom操作\r\nvar DomAction = /** @class */ (function (_super) {\r\n    __extends(DomAction, _super);\r\n    function DomAction(selector) {\r\n        return _super.call(this, selector) || this;\r\n    }\r\n    return DomAction;\r\n}(targetDom_1.default));\r\nmixins_1.applyMixins(DomAction, [nodeModel_1.default, eventModel_1.default, moveModel_1.default, statusModel_1.default]);\r\nvar Dom = function (selector) {\r\n    var dom = new DomAction(selector);\r\n    return dom;\r\n};\r\nexports.default = Dom;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/index.ts\n// module id = 12\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar targetDom_1 = require(\"./targetDom\");\r\nvar moveModel = /** @class */ (function (_super) {\r\n    __extends(moveModel, _super);\r\n    function moveModel(selector) {\r\n        return _super.call(this, selector) || this;\r\n    }\r\n    moveModel.prototype.show = function (delay) {\r\n        if (delay && typeof delay == 'number') {\r\n            var _loop_1 = function (i) {\r\n                setTimeout(function () {\r\n                    i.style.display = 'none';\r\n                }, delay || 500);\r\n            };\r\n            for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n                var i = _a[_i];\r\n                _loop_1(i);\r\n            }\r\n        }\r\n        else if (!delay) {\r\n            for (var _b = 0, _c = this.els; _b < _c.length; _b++) {\r\n                var i = _c[_b];\r\n                i.style.display = 'block';\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    moveModel.prototype.hide = function (delay) {\r\n        if (delay && typeof delay == 'number') {\r\n            var _loop_2 = function (i) {\r\n                setTimeout(function () {\r\n                    i.style.display = 'block';\r\n                }, delay || 500);\r\n            };\r\n            for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n                var i = _a[_i];\r\n                _loop_2(i);\r\n            }\r\n        }\r\n        else if (!delay) {\r\n            for (var _b = 0, _c = this.els; _b < _c.length; _b++) {\r\n                var i = _c[_b];\r\n                i.style.display = 'none';\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    return moveModel;\r\n}(targetDom_1.default));\r\nexports.default = moveModel;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/moveModel.ts\n// module id = 13\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar targetDom_1 = require(\"./targetDom\");\r\nvar util_1 = require(\"../util\");\r\n// 操作dom节点\r\nvar nodeModel = /** @class */ (function (_super) {\r\n    __extends(nodeModel, _super);\r\n    function nodeModel(selector) {\r\n        return _super.call(this, selector) || this;\r\n    }\r\n    /**\r\n     * 设置，获取html\r\n     * @param str html值\r\n     */\r\n    nodeModel.prototype.html = function (str) {\r\n        if (str && util_1.default.type(str) != 'string') {\r\n            return;\r\n        }\r\n        if (!str) {\r\n            return this.els[0].innerHTML;\r\n        }\r\n        else {\r\n            this.each(this.els, function (val, index) {\r\n                val.innerHTML = str;\r\n            });\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * 设置，获取节点文本\r\n     * @param str 文本值\r\n     */\r\n    nodeModel.prototype.text = function (str) {\r\n        if (str && util_1.default.type(str) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (arguments.length == 0) {\r\n                return i.innerText || i.textContent;\r\n            }\r\n            else if (arguments.length == 1) {\r\n                if (i.innerText) {\r\n                    i.innerText = str;\r\n                }\r\n                else {\r\n                    i.textContent = str;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    nodeModel.prototype.css = function (key, value) {\r\n        if (key && util_1.default.type(key) != 'string') {\r\n            return;\r\n        }\r\n        if (value && util_1.default.type(value) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (arguments.length == 1) {\r\n                return window.getComputedStyle(i, null)[key];\r\n            }\r\n            else if (arguments.length == 2) {\r\n                i.style[key] = value;\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 获取，设置元素宽度\r\n     * @param str\r\n     */\r\n    nodeModel.prototype.width = function (str) {\r\n        if (str && util_1.default.type(str) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (str) {\r\n                i.style.width = str;\r\n            }\r\n            else {\r\n                return i.offsetWidth;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n    * 获取，设置元素高度\r\n    * @param str\r\n    */\r\n    nodeModel.prototype.height = function (str) {\r\n        if (str && util_1.default.type(str) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (str) {\r\n                i.style.height = str;\r\n            }\r\n            else {\r\n                return i.offsetHeight;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 获取，设置节点的属性值\r\n     * @param attr 属性名\r\n     * @param value 属性值\r\n     */\r\n    nodeModel.prototype.attr = function (attr, value) {\r\n        if (util_1.default.type(attr) != 'string') {\r\n            return;\r\n        }\r\n        if (value && util_1.default.type(value) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (arguments.length == 1) {\r\n                if (i.hasAttribute(attr)) {\r\n                    return i.getAttribute(attr);\r\n                }\r\n            }\r\n            else if (arguments.length == 2) {\r\n                i.setAttribute(attr, value);\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 获取，设置节点的value值\r\n     * @param str value值\r\n     */\r\n    nodeModel.prototype.val = function (str) {\r\n        if (str && util_1.default.type(str) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (arguments.length == 1) {\r\n                var oldStr = i.getAttribute('value');\r\n                i.setAttribute(oldStr, str);\r\n            }\r\n            else if (arguments.length == 0) {\r\n                if (i.nodeName.match(/INPUT|TEXTAREA|SELECT|RADIO|CHECKBOX/)) {\r\n                    return i.value;\r\n                }\r\n                return i.getAttribute('value');\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 给节点添加class\r\n     * @param name\r\n     */\r\n    nodeModel.prototype.addClass = function (name) {\r\n        if (name && util_1.default.type(name) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            i.classList.add(name);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 删除节点的class\r\n     * @param name\r\n     */\r\n    nodeModel.prototype.removeClass = function (name) {\r\n        if (name && util_1.default.type(name) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            i.classList.remove(name);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 切换class\r\n     */\r\n    nodeModel.prototype.toggleClass = function (name) {\r\n        if (name && util_1.default.type(name) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (i.classList.toggle(name)) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    return nodeModel;\r\n}(targetDom_1.default));\r\nexports.default = nodeModel;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/nodeModel.ts\n// module id = 14\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar targetDom_1 = require(\"./targetDom\");\r\nvar util_1 = require(\"../util\");\r\n// 操作dom节点\r\nvar statusModel = /** @class */ (function (_super) {\r\n    __extends(statusModel, _super);\r\n    function statusModel(selector) {\r\n        return _super.call(this, selector) || this;\r\n    }\r\n    // 判断节点是否拥有属性\r\n    statusModel.prototype.hasAttrs = function () {\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (i.hasAttributes()) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 判断节点是否有某个属性\r\n     * @param attr 属性名\r\n     */\r\n    statusModel.prototype.hasAttr = function (attr) {\r\n        if (attr && util_1.default.type(attr) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (i.hasAttribute(attr)) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 判断节点是否有某个class\r\n     * @param name class名称\r\n     */\r\n    statusModel.prototype.hasClass = function (name) {\r\n        if (name && util_1.default.type(name) != 'string') {\r\n            return;\r\n        }\r\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (i.classList.contains(name)) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    return statusModel;\r\n}(targetDom_1.default));\r\nexports.default = statusModel;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Dom/statusModel.ts\n// module id = 15\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Cookie = {\r\n    // 判断cookie是否可用\r\n    support: function () {\r\n        if (!(document.cookie || navigator.cookieEnabled))\r\n            return false;\r\n        return true;\r\n    },\r\n    // 添加cookie\r\n    set: function (name, value, config) {\r\n        // config = {hours, path, domain, secure}\r\n        var data = name + \"=\" + encodeURIComponent(value);\r\n        console.log(123);\r\n        if (config && config.hours != undefined) {\r\n            var d = new Date();\r\n            d.setHours(d.getHours() + config.hours);\r\n            data += \"; expires=\" + d.toUTCString();\r\n        }\r\n        data += (config && config.path) ? (\"; path=\" + config.path) : \"\";\r\n        data += (config && config.domain) ? (\"; domain=\" + config.domain) : \"\";\r\n        data += (config && config.secure) ? (\"; secure=\" + config.secure) : \"\";\r\n        document.cookie = data;\r\n    },\r\n    // 查询 cookie\r\n    get: function (name) {\r\n        var len = arguments.length;\r\n        if (len == 0) {\r\n            var cs = document.cookie, arr = [], arr2 = [], obj = {};\r\n            arr = cs.split(';');\r\n            // console.log(arr);\r\n            for (var i = 0; i < arr.length; i++) {\r\n                var a = arr[i].split('=');\r\n                var a1 = [a[0].trim(), decodeURIComponent(a[1])];\r\n                arr2.push(a1);\r\n            }\r\n            return JSON.stringify(arr2);\r\n        }\r\n        else if (len == 1) {\r\n            var reg = eval(\"/(?:^|;\\\\s*)\" + name + \"=([^=]+)(?:;|$)/\");\r\n            return reg.test(document.cookie) ? decodeURIComponent(RegExp.$1) : \"\";\r\n        }\r\n    },\r\n    // 删除 cookie\r\n    remove: function (name, path) {\r\n        if (arguments.length == 0) {\r\n            var all = this.get();\r\n            for (var i = 0; i < all.length; i++) {\r\n                this.set(all[i][0], \"\", -1);\r\n            }\r\n        }\r\n        this.set(name, path || '', { \"hours\": -1 });\r\n    }\r\n};\r\nexports.default = Cookie;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/cache/cookie.ts\n// module id = 16\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HandelEventer_1 = require(\"../util/HandelEventer\");\r\nvar util_1 = require(\"../util\");\r\nvar HandelData = /** @class */ (function () {\r\n    function HandelData() {\r\n        this.data = {};\r\n        this.name = '';\r\n        this.token = undefined;\r\n        this.props = {};\r\n        this.componentStatus = '';\r\n    }\r\n    HandelData.prototype.$data = function (key, val) {\r\n        var n = arguments.length;\r\n        switch (n) {\r\n            case 0:\r\n                return this.data;\r\n            case 1:\r\n                return this.data[key];\r\n            case 2:\r\n                var oldData = util_1.default.deepClone(this.data);\r\n                this.data[key] = val;\r\n                var newData = this.data;\r\n                HandelEventer_1.default.trigger(key, util_1.default.clone({\r\n                    target: this.token,\r\n                    which: this.name,\r\n                    old: oldData,\r\n                    new: newData,\r\n                    oldVal: oldData[key],\r\n                    newVal: newData[key],\r\n                    props: this.props == undefined ? {} : this.props,\r\n                    componentStatus: this.componentStatus\r\n                }));\r\n                break;\r\n        }\r\n    };\r\n    return HandelData;\r\n}());\r\nvar Data = new HandelData();\r\nexports.default = Data;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/HandelData.ts\n// module id = 17\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HandelEventer_1 = require(\"../util/HandelEventer\");\r\n/**\r\n * 组件事件监听函数\r\n */\r\nvar HandelEvent = /** @class */ (function () {\r\n    function HandelEvent() {\r\n    }\r\n    /**\r\n     * 触发事件\r\n     * @param name 事件名称\r\n     * @param msg 信息\r\n     */\r\n    HandelEvent.prototype.trigger = function (name, msg) {\r\n        HandelEventer_1.default.trigger(name, msg);\r\n    };\r\n    /**\r\n     * 监听事件\r\n     * @param name 事件名称\r\n     * @param fn 回调函数，返回触发的信息\r\n     */\r\n    HandelEvent.prototype.listen = function (name, fn) {\r\n        HandelEventer_1.default.listen(name, fn);\r\n    };\r\n    return HandelEvent;\r\n}());\r\nvar handelEvent = new HandelEvent();\r\nexports.default = handelEvent;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/HandelEvent.ts\n// module id = 18\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\n/**\r\n * 验证组件的状态\r\n * @param component 组件\r\n */\r\nfunction componentGuard(component) {\r\n    // 验证组件名称\r\n    if (!component.name) {\r\n        return;\r\n    }\r\n    if (component.name) {\r\n        if (util_1.default.type(component.name) != 'string')\r\n            $log.error('组件' + component.name + '的名称必须为字符串');\r\n    }\r\n    // 验证组件components属性\r\n    if (component.components) {\r\n        if (util_1.default.type(component.components) != 'array') {\r\n            $log.error('组件' + component.name + '的components属性应为数组！');\r\n        }\r\n    }\r\n    // 验证组件style属性\r\n    if (component.style) {\r\n        if (util_1.default.type(component.style) != 'string') {\r\n            $log.error('组件' + component.name + '的style属性应为字符！');\r\n        }\r\n    }\r\n    // 验证组件styleeId属性\r\n    if (component.styleId) {\r\n        if (util_1.default.type(component.styleId) != 'string') {\r\n            $log.error('组件' + component.name + '的styleId属性应为字符！');\r\n        }\r\n        if (document.querySelector(component.styleId) == undefined) {\r\n            $log.error('节点' + component.styleId + '不存在');\r\n        }\r\n    }\r\n    // 验证组件template属性\r\n    if (component.template) {\r\n        if (util_1.default.type(component.template) != 'string') {\r\n            $log.error('组件' + component.name + '的template属性应为字符！');\r\n        }\r\n    }\r\n    // 验证组件templateId属性\r\n    if (component.templateId) {\r\n        if (util_1.default.type(component.templateId) != 'string') {\r\n            $log.error('组件' + component.name + '的templateId属性应为字符！');\r\n        }\r\n        if (document.querySelector(component.templateId) == undefined) {\r\n            $log.error('节点' + component.templateId + '不存在');\r\n        }\r\n    }\r\n    // 验证组件data属性\r\n    if (component.data) {\r\n        if (util_1.default.type(component.data) != 'object') {\r\n            $log.error('组件' + component.name + '的data属性应为对象！');\r\n        }\r\n    }\r\n    // 验证组件props属性\r\n    if (component.props) {\r\n        if (util_1.default.type(component.props) != 'object') {\r\n            $log.error('组件' + component.name + '的props属性应为对象！');\r\n        }\r\n    }\r\n    // 验证组件props方法\r\n    if (component.beforeRender) {\r\n        if (util_1.default.type(component.beforeRender) != 'function') {\r\n            $log.error('组件' + component.name + '的beforeRender属性应为函数！');\r\n        }\r\n    }\r\n    // 验证组件render方法\r\n    if (component.render) {\r\n        if (util_1.default.type(component.render) != 'function') {\r\n            $log.error('组件' + component.name + '的render属性应为函数！');\r\n        }\r\n    }\r\n    else {\r\n        return;\r\n    }\r\n}\r\nexports.default = componentGuard;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/componentGuard.ts\n// module id = 19\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\nvar render_1 = require(\"./render\");\r\nvar componentGuard_1 = require(\"./componentGuard\");\r\nvar store_1 = require(\"../store\");\r\nvar store = new store_1.default();\r\nstore.data('componentList', []);\r\nstore.service('component', function () {\r\n    this.ensureOneInvokeComponent = function (name, arr) {\r\n        var res = {\r\n            type: 'yes'\r\n        }, rootName = [], names = [];\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i].name == name)\r\n                rootName.push(name);\r\n            names.push(arr[i].name);\r\n        }\r\n        if (rootName.length >= 2)\r\n            res = {\r\n                type: 'no',\r\n                info: '只能有一个根组件，却发现' + rootName.length + '个' + name + '根组件'\r\n            };\r\n        return res;\r\n    };\r\n});\r\nvar CPage = /** @class */ (function () {\r\n    function CPage() {\r\n        this.CList = [];\r\n        this.id = 0;\r\n        this.id = 0;\r\n    }\r\n    /**\r\n     * es6模式，渲染组件\r\n     * @param selector id选择符，如果是class，则取第一个节点\r\n     * @param fn 根组件函数\r\n     */\r\n    CPage.bootstrap = function (selector, fn) {\r\n        var rootComponent = {};\r\n        function componetList(fn, isRoot) {\r\n            if (isRoot === void 0) { isRoot = false; }\r\n            var classToJson = util_1.default.classToJson(fn, isRoot);\r\n            var componentJson = classToJson.componentJson;\r\n            if (isRoot) {\r\n                rootComponent = classToJson.rootComponent;\r\n            }\r\n            componentGuard_1.default(componentJson);\r\n            store.data('componentList', store.get('componentList').push(componentJson));\r\n            if (componentJson.components && util_1.default.type(componentJson.components) == 'array' && componentJson.components.length) {\r\n                componentJson.components.forEach(function (v) {\r\n                    componetList(v);\r\n                });\r\n            }\r\n        }\r\n        componetList(fn, true);\r\n        var r = new render_1.default(selector, rootComponent, store.get('componentList'));\r\n        r.componentToDom();\r\n    };\r\n    /**\r\n     * 路由\r\n     * @param config 路由配置\r\n     */\r\n    CPage.router = function (config) {\r\n        function check(str) {\r\n            if (util_1.default.type(str) != 'array') {\r\n                $log.error('路由配置项需为数组形式');\r\n            }\r\n        }\r\n        check(config);\r\n        config.forEach(function (v) {\r\n            var classToJson = util_1.default.classToJson(v.component, false);\r\n            v.component = classToJson.componentJson;\r\n        });\r\n        store.data('routerConfig', config);\r\n    };\r\n    CPage.prototype.directive = function (name, fn) {\r\n        var conf = fn();\r\n        conf.id = this.id;\r\n        this.CList.push(conf);\r\n        this.id++;\r\n        var guard = store.get('component').ensureOneInvokeComponent(name, this.CList);\r\n        if (guard.type == 'no') {\r\n            $log.error(guard.info);\r\n        }\r\n        return conf;\r\n    };\r\n    /**\r\n     * es5模式获取组建信息\r\n     * @param obj\r\n     */\r\n    CPage.prototype.component = function (obj) {\r\n        componentGuard_1.default(obj);\r\n        var componentInfo = util_1.default.deepClone(obj);\r\n        Object.defineProperties(componentInfo, {\r\n            isRoot: {\r\n                value: false,\r\n                writable: true\r\n            },\r\n            $el: {\r\n                value: undefined,\r\n                writable: true\r\n            },\r\n            $props: {\r\n                value: {},\r\n                writable: true\r\n            }\r\n        });\r\n        return this.directive(obj.name, function () {\r\n            return componentInfo;\r\n        });\r\n    };\r\n    /**\r\n     * es5模式，将组件渲染到dom\r\n     * @param selector id选择符，如果是class，则取第一个节点\r\n     * @param root 根组件信息\r\n     */\r\n    CPage.prototype.bootstrap = function (selector, root) {\r\n        if (util_1.default.type(selector) != 'string') {\r\n            $log.error(selector + '应为字符串');\r\n        }\r\n        if (!document.querySelector(selector)) {\r\n            $log.error('节点“' + selector + '”不存在');\r\n        }\r\n        if (util_1.default.type(root) != 'object') {\r\n            $log.error(root + '应为json对象');\r\n        }\r\n        if (arguments.length == 2) {\r\n            componentGuard_1.default(root);\r\n            if (!root.name) {\r\n                $log.error('找不到根组件的name属性');\r\n            }\r\n            store.data('rootComponent', root.name);\r\n            var r = new render_1.default(selector, root, this.CList);\r\n            r.componentToDom();\r\n        }\r\n    };\r\n    CPage.version = '1.0.4';\r\n    return CPage;\r\n}());\r\nexports.default = CPage;\r\n/**\r\n * es6模式构建组件\r\n */\r\nvar Component = /** @class */ (function () {\r\n    function Component() {\r\n        this.components = [];\r\n        this.name = '';\r\n        this.template = '';\r\n        this.data = {};\r\n        this.props = {};\r\n    }\r\n    Component.prototype.render = function () {\r\n        $log.error('render方法必须被继承');\r\n    };\r\n    return Component;\r\n}());\r\nexports.Component = Component;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/index.ts\n// module id = 20\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\nvar parse_1 = require(\"../parse\");\r\nvar ParseTpl = /** @class */ (function () {\r\n    function ParseTpl(text, data, props) {\r\n        this.text = text;\r\n        this.data = data;\r\n        this.props = props;\r\n    }\r\n    /**\r\n     * 组合data和props属性\r\n     * @param data\r\n     * @param props\r\n     */\r\n    ParseTpl.prototype.combineData = function (data, props) {\r\n        if (data === void 0) { data = {}; }\r\n        if (props === void 0) { props = {}; }\r\n        if (util_1.default.type(data) != 'object')\r\n            $log.error('组件是属性data必须为对象');\r\n        if (util_1.default.type(props) != 'object')\r\n            $log.error('组件是属性props必须为对象');\r\n        if (util_1.default.isEmpty(props))\r\n            return data;\r\n        for (var i in props) {\r\n            data[i] = props[i].default;\r\n        }\r\n        return data;\r\n    };\r\n    // 渲染模板\r\n    ParseTpl.prototype.tpl = function () {\r\n        var self = this;\r\n        var index = 0, parts = [], startIndex, endIndex, exp, expFn;\r\n        if (this.text == undefined) {\r\n            return;\r\n        }\r\n        while (index < this.text.length) {\r\n            startIndex = this.text.indexOf('{{', index);\r\n            if (startIndex != -1) {\r\n                endIndex = this.text.indexOf('}}', startIndex + 2);\r\n            }\r\n            if (startIndex != -1 && endIndex != -1) {\r\n                if (startIndex != index) {\r\n                    parts.push(this.text.substring(index, startIndex));\r\n                }\r\n                exp = this.text.substring(startIndex + 2, endIndex);\r\n                expFn = parse_1.default.parse(exp);\r\n                parts.push(expFn);\r\n                index = endIndex + 2;\r\n            }\r\n            else {\r\n                parts.push(this.text.substring(index));\r\n                break;\r\n            }\r\n        }\r\n        // console.log(parts)\r\n        return parts.reduce(function (prev, cur) {\r\n            if (util_1.default.type(cur) == 'function') {\r\n                return prev + self.expectNullUndefined(cur(self.combineData(self.data, self.props)));\r\n            }\r\n            else {\r\n                return prev + cur;\r\n            }\r\n        }, '');\r\n    };\r\n    /**\r\n     * 判断表达式是否为null或者undefined，是则返回''\r\n     * @param str\r\n     */\r\n    ParseTpl.prototype.expectNullUndefined = function (str) {\r\n        if (util_1.default.type(str) == 'null' || util_1.default.type(str) == 'undefined') {\r\n            return '';\r\n        }\r\n        else if (typeof str == 'object') {\r\n            return JSON.stringify(str);\r\n        }\r\n        else {\r\n            return '' + str;\r\n        }\r\n    };\r\n    return ParseTpl;\r\n}());\r\nfunction tpl(text, data, props) {\r\n    var parseTpl = new ParseTpl(text, data, props);\r\n    return parseTpl.tpl();\r\n}\r\nexports.default = tpl;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/parseTpl.ts\n// module id = 21\n// module chunks = 0","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\nvar dom_1 = require(\"../dom/dom\");\r\nvar parseTpl_1 = require(\"./parseTpl\");\r\nvar HandelData_1 = require(\"./HandelData\");\r\nvar HandelEventer_1 = require(\"../util/HandelEventer\");\r\nvar HandelEvent_1 = require(\"./HandelEvent\");\r\nvar index_1 = require(\"../parse/index\");\r\nvar http_1 = require(\"../http\");\r\nvar router_1 = require(\"../router\");\r\nvar store_1 = require(\"../store\");\r\nvar store = new store_1.default();\r\nvar PREFIX_DIRECTIVE = /(x[\\:\\-_]|data[\\:\\-_])/i;\r\nvar ID = 'c-data-id';\r\nvar ID_FOR = 'c-for-id';\r\nvar ID_REPEAT = 'c-repeat-id';\r\nvar renderComponents = /** @class */ (function () {\r\n    function renderComponents(selector, root, CList) {\r\n        this.selector = selector;\r\n        this.root = root;\r\n        this.CList = CList;\r\n        this.CObj = this.listToObj(CList);\r\n        this.eventList = [];\r\n        this.cRefList = [];\r\n        this.showList = [];\r\n        this.ifList = [];\r\n        this.ifTpl = {};\r\n        this.cHtmlList = [];\r\n        this.cForList = [];\r\n        this.cRepeatList = [];\r\n        this.cViewList = [];\r\n        this.dataId = parseInt(util_1.default.now());\r\n        this.componentToken = [];\r\n        this.componentNames = this.getComponentNameList();\r\n        this.componentAttrs = {};\r\n        this.templateId = {};\r\n        this.oneRootComponent = 1;\r\n        this.$router = undefined;\r\n        this.$routerCache = {};\r\n    }\r\n    /**\r\n     * 组件渲染到dom节点\r\n     */\r\n    renderComponents.prototype.componentToDom = function () {\r\n        var self = this, node, components = [], rootTpl = dom_1.default.wrapDom(this.theTpl(this.root), util_1.default._cameCase(this.root.name).toLowerCase());\r\n        function handelComponent() {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, invokeLooopNodes()];\r\n                        case 1:\r\n                            _a.sent();\r\n                            return [4 /*yield*/, invokeLoopComponents()];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [4 /*yield*/, invokeRouter()];\r\n                        case 3:\r\n                            _a.sent();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        handelComponent();\r\n        // 遍历节点\r\n        function invokeLooopNodes() {\r\n            node = self.loopNodes(self.root.name, dom_1.default.create(rootTpl), components);\r\n        }\r\n        // 遍历组件\r\n        function invokeLoopComponents() {\r\n            self.root.template = node[0].outerHTML;\r\n            self.root.isRoot = true;\r\n            self.templateId[node[0].getAttribute(ID)] = node[0].outerHTML;\r\n            self.loopComponents(components, self.root.data, self.root.components, self.root.name);\r\n        }\r\n        // 处理路由\r\n        function invokeRouter() {\r\n            if (store.has('routerConfig')) {\r\n                handelRouter();\r\n            }\r\n            function handelRouter() {\r\n                setTimeout(function () {\r\n                    if (window.document.readyState == \"complete\") {\r\n                        var hash = window.location.hash;\r\n                        if (hash == '') {\r\n                            var index = pathIndex();\r\n                            if (util_1.default.type(index) == 'object') {\r\n                                handelView(index);\r\n                            }\r\n                        }\r\n                        else {\r\n                            var r = getNowRouter(hash.substr(1));\r\n                            if (r != undefined) {\r\n                                handelView(r);\r\n                            }\r\n                        }\r\n                    }\r\n                    window.addEventListener('hashchange', function (data) {\r\n                        var nowPath = '';\r\n                        if (data.newURL.includes('/#')) {\r\n                            nowPath = data.newURL.split('/#')[1];\r\n                        }\r\n                        var r = getNowRouter(nowPath);\r\n                        if (r != undefined) {\r\n                            handelView(r);\r\n                        }\r\n                    }, false);\r\n                    function handelView(obj) {\r\n                        var name = obj.component.name;\r\n                        var delay = obj.delay || 0;\r\n                        setTimeout(function () {\r\n                            self.cViewList.forEach(function (v) {\r\n                                if (!dom_1.default.q(v.ele))\r\n                                    return;\r\n                                if (obj.cache && self.$routerCache.hasOwnProperty(name)) {\r\n                                    dom_1.default.q(v.ele).innerHTML = self.$routerCache[name];\r\n                                    self.handelEventListener(self.CObj[name], dom_1.default.q(v.ele).firstChild);\r\n                                }\r\n                                else {\r\n                                    dom_1.default.q(v.ele).innerHTML = '';\r\n                                    dom_1.default.q(v.ele).insertAdjacentHTML('afterbegin', '<' + util_1.default._cameCase(name) + '></' + util_1.default._cameCase(name) + '>');\r\n                                    self.loopNodes(name, dom_1.default.q(v.ele).childNodes, []);\r\n                                    self.loopComponents([self.CObj[name]], self.CObj[v.which].data || {}, [], v.which);\r\n                                    setTimeout(function () {\r\n                                        self.$routerCache[name] = dom_1.default.q(util_1.default._cameCase(name)).outerHTML;\r\n                                    }, 0);\r\n                                }\r\n                            });\r\n                        }, delay);\r\n                    }\r\n                }, 0);\r\n            }\r\n        }\r\n        // 获取当前路由\r\n        function getNowRouter(path) {\r\n            var router = new router_1.default(path, store.get('routerConfig'));\r\n            self.$router = router;\r\n            return router.nowRouter;\r\n        }\r\n        // 默认路径\r\n        function pathIndex() {\r\n            var obj = undefined;\r\n            store.get('routerConfig').forEach(function (v) {\r\n                if (v.path == '/') {\r\n                    obj = v;\r\n                }\r\n            });\r\n            return obj;\r\n        }\r\n    };\r\n    /**\r\n     * 组件的template, templateId, templateUrl\r\n     * @param component 组件\r\n     */\r\n    renderComponents.prototype.theTpl = function (component) {\r\n        // hasHtmlUrl, webpack打包需要引入html-loader\r\n        return (component.template ? component.template.trim() : undefined) || dom_1.default.hasHtml(component.templateId) || dom_1.default.hasHtmlUrl(component.templateUrl);\r\n    };\r\n    /**\r\n     * 组件的style, styleId, styleUrl\r\n     * @param component 组件\r\n     */\r\n    renderComponents.prototype.theStyle = function (component) {\r\n        // component.style\r\n        function handelString(str) {\r\n            if (str != undefined) {\r\n                return {\r\n                    type: 'string',\r\n                    result: str\r\n                };\r\n            }\r\n            return false;\r\n        }\r\n        // component.styleId\r\n        function handelId(id) {\r\n            if (dom_1.default.q(id) != undefined) {\r\n                return {\r\n                    type: 'id',\r\n                    result: id\r\n                };\r\n            }\r\n            return false;\r\n        }\r\n        // component.styleUrl, webpack打包需要引入css-loader\r\n        function handelUrl(url) {\r\n            if (url != undefined) {\r\n                // 针对import * as css from '';\r\n                if (util_1.default.type(url) == 'object') {\r\n                    url = url[0][1];\r\n                }\r\n                // 针对require('../xx.css')\r\n                if (util_1.default.type(url) == 'array') {\r\n                    url = url[1];\r\n                }\r\n                return {\r\n                    type: 'url',\r\n                    result: url\r\n                };\r\n            }\r\n            return false;\r\n        }\r\n        return handelString(component.style) || handelId(component.styleId) || handelUrl(component.styleUrl);\r\n    };\r\n    /**\r\n     * 遍历dom节点\r\n     * @param name 组件名称\r\n     * @param node dom节点\r\n     * @param components 组件列表\r\n     */\r\n    renderComponents.prototype.loopNodes = function (name, node, components) {\r\n        var _this = this;\r\n        for (var i = 0; i < node.length; i++) {\r\n            if (node[i].nodeType == 1) {\r\n                node[i].setAttribute(\"c-data-id\", this.dataId);\r\n                var cs = this.getComponent(node[i], name);\r\n                cs.forEach(function (v) {\r\n                    if (components) {\r\n                        components.push(util_1.default.deepClone(util_1.default.extend(_this.CObj[v], { token: _this.dataId })));\r\n                        // components.push(Util.extend(this.CObj[v], {token: this.dataId}));\r\n                    }\r\n                });\r\n                this.dataId++;\r\n                // 添加eventList, showList...等集合\r\n                this.addDirectiveList(name, node[i]);\r\n                if (node[i].childNodes && node[i].childNodes.length) {\r\n                    this.loopNodes(name, node[i].childNodes, components);\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    /**\r\n     * 添加eventList, showList...等集合\r\n     * @param name 组件名称\r\n     * @param node 节点\r\n     */\r\n    renderComponents.prototype.addDirectiveList = function (name, node) {\r\n        for (var j = 0, len = node.attributes; j < len.length; j++) {\r\n            var attrName = this.normalizeDirective(len[j].name);\r\n            if (attrName.match(/^cClick|cDbclick|cMouseover|cMousedown|cMouseup|cMousemove|cMouseout|cMouseleave|cBlur|cFocus|cChange|cInput|cDrag|cDragend|cDragenter|cDragleave|cDragover|cDragstart|cDrop|cFocus|cKeydown|cKeypress|cKeyup|cScroll|cSelect|cSubmit|cTtoggle|cResize|cWaiting|cProgress|cLoadstart|cDurationchange|cLoadedmetadata|cLoadeddata|cCanplay|cCanplaythrough|cPlay|cPause|cRef|cShow|cIf|cHtml|cFor|cRepeat|cView$/g)) {\r\n                switch (attrName) {\r\n                    case 'cRef':\r\n                        this.cRefList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID)\r\n                        });\r\n                        break;\r\n                    case 'cShow':\r\n                        this.showList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID),\r\n                            directive: attrName\r\n                        });\r\n                        // 在组件渲染前面处理display\r\n                        var displayStatus = dom_1.default.boolToDisplay(parseTpl_1.default(len[j].value, this.CObj[name].data, this.CObj[name].props));\r\n                        node.style.display = displayStatus;\r\n                        break;\r\n                    case 'cIf':\r\n                        this.ifList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID),\r\n                            directive: attrName,\r\n                            html: node.outerHTML\r\n                        });\r\n                        var ifInfo = parseTpl_1.default(len[j].value, this.CObj[name].data, this.CObj[name].props);\r\n                        if (ifInfo == 'true') {\r\n                            node.style.display = 'none';\r\n                        }\r\n                        break;\r\n                    case 'cHtml':\r\n                        this.cHtmlList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID),\r\n                            directive: attrName,\r\n                            html: node.outerHTML\r\n                        });\r\n                        break;\r\n                    case 'cFor':\r\n                        this.cForList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID),\r\n                            html: node.innerHTML\r\n                        });\r\n                        break;\r\n                    case 'cRepeat':\r\n                        this.cRepeatList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID)\r\n                        });\r\n                        break;\r\n                    case 'cView':\r\n                        this.cViewList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID)\r\n                        });\r\n                        break;\r\n                    default:\r\n                        this.eventList.push({\r\n                            which: name,\r\n                            type: len[j].name.split('-')[1],\r\n                            fn: len[j].value,\r\n                            ele: '[' + ID + '=\"' + node.getAttribute(ID) + '\"]',\r\n                            id: node.getAttribute(ID)\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 遍历组件\r\n     * @param components 模板中的组件集合\r\n     * @param fatherData 父组件data数据\r\n     * @param componentArr 注入的组件集合\r\n     * @param componentName 父组件名称\r\n     */\r\n    renderComponents.prototype.loopComponents = function (components, fatherData, componentArr, componentName) {\r\n        if (components.length && componentArr == undefined) {\r\n            $log.error('找不到组件为' + componentName + '的components属性');\r\n        }\r\n        var self = this;\r\n        components.forEach(function (v) {\r\n            if (v == undefined)\r\n                return;\r\n            // “模板中的组件” 与 “注入的组件” 对比\r\n            self.compareChildComponentAndInjectComponents(v.name, componentArr);\r\n            // 给组件赋能\r\n            v.$data = HandelData_1.default.$data;\r\n            v.$http = http_1.default;\r\n            v.$event = HandelEvent_1.default;\r\n            v.$router = self.$router;\r\n            function handelCC() {\r\n                return __awaiter(this, void 0, void 0, function () {\r\n                    var before;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, self.handelDataChange(v)];\r\n                            case 1:\r\n                                _a.sent(); // 监听data数据改变\r\n                                return [4 /*yield*/, self.handelBeforeRender(v)];\r\n                            case 2:\r\n                                before = _a.sent();\r\n                                return [4 /*yield*/, self.handelAfterRender(before, v)];\r\n                            case 3:\r\n                                _a.sent(); //在组件渲染之后执行\r\n                                return [2 /*return*/];\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            handelCC();\r\n        });\r\n    };\r\n    /**\r\n     * 在组建渲染之前执行\r\n     * @param v 组件\r\n     */\r\n    renderComponents.prototype.handelBeforeRender = function (v) {\r\n        if (v.beforeRender) {\r\n            v.$el = undefined;\r\n            v.$refs = undefined;\r\n            v.componentStatus = 'beforeRender';\r\n            v.beforeRender();\r\n        }\r\n        return 'beforeRenderIsDone';\r\n    };\r\n    /**\r\n     * 在组件渲染之后执行\r\n     * @param status handelBeforeRender()的返回值\r\n     * @param v 组件\r\n     */\r\n    renderComponents.prototype.handelAfterRender = function (status, v) {\r\n        if (status != 'beforeRenderIsDone') {\r\n            return;\r\n        }\r\n        var self = this;\r\n        function invokeAfterRender() {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var step1, step2, step3, step4, step5, step6, step7;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, addStyle()];\r\n                        case 1:\r\n                            step1 = _a.sent();\r\n                            return [4 /*yield*/, renderOnce(step1)];\r\n                        case 2:\r\n                            step2 = _a.sent();\r\n                            return [4 /*yield*/, handelCforDirective(step2)];\r\n                        case 3:\r\n                            step3 = _a.sent();\r\n                            return [4 /*yield*/, handelOtherDirective(step3)];\r\n                        case 4:\r\n                            step4 = _a.sent();\r\n                            return [4 /*yield*/, handelRenderFn(step4)];\r\n                        case 5:\r\n                            step5 = _a.sent();\r\n                            return [4 /*yield*/, loopChildComponent(step5)];\r\n                        case 6:\r\n                            step6 = _a.sent();\r\n                            return [4 /*yield*/, handelClickDirective(step6)];\r\n                        case 7:\r\n                            step7 = _a.sent();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        if (v.render) {\r\n            invokeAfterRender();\r\n        }\r\n        function addStyle() {\r\n            // head添加style\r\n            dom_1.default.addStyle(self.theStyle(v), v);\r\n            return 'done';\r\n        }\r\n        function renderOnce(status) {\r\n            if (status != 'done') {\r\n                return;\r\n            }\r\n            var node;\r\n            // 根组件单独渲染\r\n            if (v.name == self.root.name) {\r\n                if (self.oneRootComponent == 2) {\r\n                    $log.error('根组件' + self.root.name + '只能有一个');\r\n                }\r\n                var dom = dom_1.default.q(self.selector);\r\n                if (dom == undefined) {\r\n                    $log.error('节点' + self.selector + '不存在');\r\n                }\r\n                dom.innerHTML = parseTpl_1.default(self.theTpl(self.root), self.root.data, {});\r\n                node = dom_1.default.q('[' + ID + '=\"' + v.token + '\"]');\r\n                self.oneRootComponent++;\r\n            }\r\n            else {\r\n                var newNode = self.loopNodes(v.name, dom_1.default.create(self.theTpl(self.CObj[v.name])));\r\n                node = dom_1.default.q('[' + ID + '=\"' + v.token + '\"]');\r\n                self.templateId[v.token] = newNode[0].outerHTML;\r\n                // 编译组件属性，父组件的data值覆盖子组件的props值（组件的attr值与props对比，有则覆盖）\r\n                var newProps = dom_1.default.combineAttrAndProps(self.componentAttrs[v.token], self.CObj[v.name].props);\r\n                node.innerHTML = self.getChangedData(newNode[0].outerHTML, self.CObj[v.name].data, newProps);\r\n            }\r\n            return node;\r\n        }\r\n        function handelCforDirective(node) {\r\n            // 处理c-for\r\n            self.loopCforToDom(self.cForList, v);\r\n            return node;\r\n        }\r\n        function handelOtherDirective(node) {\r\n            // 处理c-if\r\n            self.loopIfToDom(self.ifList, v);\r\n            // 处理c-html\r\n            self.loopHtmlToDom(self.cHtmlList, v);\r\n            return node;\r\n        }\r\n        function handelRenderFn(node) {\r\n            v.$el = node;\r\n            // 处理c-ref\r\n            v.$refs = {};\r\n            var currentRefs = self.cRefList.filter(function (rfs) {\r\n                return rfs.which == v.name;\r\n            });\r\n            currentRefs.forEach(function (r) {\r\n                v.$refs[r.fn] = dom_1.default.q(r.ele);\r\n            });\r\n            v.componentStatus = 'afterRender';\r\n            v.render();\r\n            return node;\r\n        }\r\n        function loopChildComponent(node) {\r\n            // 遍历组件子节点\r\n            if (v.name != self.root.name) {\r\n                var arr = self.findComponent(node.firstChild);\r\n                if (arr.length) {\r\n                    if (v.name) {\r\n                        // self.loopComponents(arr, v.data, Util.deepClone(v.components), v.name)\r\n                        self.loopComponents(arr, v.data, v.components, v.name);\r\n                    }\r\n                }\r\n            }\r\n            return node;\r\n        }\r\n        function handelClickDirective(node) {\r\n            //绑定事件\r\n            self.handelEventListener(v, node);\r\n        }\r\n    };\r\n    /**\r\n     * “模板中的组件” 与 “注入的组件” 对比\r\n     * @param child 模板中的单个组件\r\n     * @param arr 注入的组件集合\r\n     */\r\n    renderComponents.prototype.compareChildComponentAndInjectComponents = function (child, arr) {\r\n        var self = this, flag = false;\r\n        if (child = this.root.name) {\r\n            flag = true;\r\n        }\r\n        else if (!arr.length && child != this.root.name) {\r\n            flag = false;\r\n        }\r\n        else {\r\n            flag = arr.some(function (v) {\r\n                if (v.name) {\r\n                    return child != self.root.name && child == v.name;\r\n                }\r\n            });\r\n        }\r\n        if (!flag)\r\n            $log.error('名称为' + child + '的组件未找到');\r\n    };\r\n    /**\r\n     * 组件渲染后的事件绑定\r\n     * @param v 组件对象\r\n     * @param node 节点\r\n     */\r\n    renderComponents.prototype.handelEventListener = function (v, node) {\r\n        // 获取当前组件的事件集合\r\n        var attrArr = dom_1.default.getAttr(ID, node);\r\n        var newAttrArr = this.array_intersection(attrArr, this.eventList);\r\n        // 事件绑定处理\r\n        if (newAttrArr.length) {\r\n            var arr = newAttrArr.filter(function (ev) {\r\n                return ev.which == v.name;\r\n            });\r\n            arr.forEach(function (val) {\r\n                if (document.querySelectorAll(val.ele)) {\r\n                    try {\r\n                        for (var _i = 0, _a = document.querySelectorAll(val.ele); _i < _a.length; _i++) {\r\n                            var dq = _a[_i];\r\n                            dq.addEventListener(val.type, function (event) {\r\n                                try {\r\n                                    if (val.fn.toString().match(/\\(\\)$/)) {\r\n                                        if (v.hasOwnProperty(val.fn.toString().split('()')[0])) {\r\n                                            index_1.default.parse(val.fn)(v, { $event: event });\r\n                                        }\r\n                                        else {\r\n                                            $log.error('组件' + v.name + '中不存在方法' + val.fn);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        $log.error('组件' + v.name + '中方法' + val.fn + '语法错误');\r\n                                    }\r\n                                }\r\n                                catch (e) {\r\n                                    console.log(e);\r\n                                }\r\n                            }, false);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        $log.error(e);\r\n                    }\r\n                }\r\n                else {\r\n                    $log.error('属性为' + val.ele + '的节点不存在！');\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * 监听data数据改变\r\n     * @param v 组件对象\r\n     */\r\n    renderComponents.prototype.handelDataChange = function (v, type) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            HandelEventer_1.default.listen(i, function (info) {\r\n                if (info.target == v.token && JSON.stringify(info.oldVal) != JSON.stringify(info.newVal)) {\r\n                    // 获取组件原始的tpl，将其转为dom\r\n                    var parseNode = dom_1.default.create(_this.templateId[v.token]);\r\n                    var dataPos = _this.dataPosition(i, parseNode, v.name);\r\n                    // 在dom渲染之前执行，更新data数据\r\n                    _this.updateData(i, info);\r\n                    if (dom_1.default.q(util_1.default._cameCase(v.name))) {\r\n                        // data数据改变重新渲染对象的节点\r\n                        _this.dataChangeToDom(parseNode, dataPos, info, v.name);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        for (var i in v.data) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * 在dom渲染之前执行，更新data数据\r\n     * @param key data的key\r\n     * @param info 更改的信息\r\n     */\r\n    renderComponents.prototype.updateData = function (key, info) {\r\n        // 所属组件\r\n        var component = info.which;\r\n        this.CObj[component].data[key] = info.newVal;\r\n    };\r\n    /**\r\n     * data数据改变重新渲染对象的节点\r\n     * @param parseNode 原始的dom节点\r\n     * @param dataPos 改变的数据集合\r\n     * @param info data的变化信息\r\n     * @param component 所属组件\r\n     */\r\n    renderComponents.prototype.dataChangeToDom = function (parseNode, dataPos, info, component) {\r\n        // 文本类型\r\n        this.loopTextToDom(parseNode, dataPos, info, component);\r\n        // 属性类型\r\n        this.loopAttrToDom(dataPos, info, component);\r\n    };\r\n    /**\r\n     * 文本改变渲染对应的dom节点\r\n     * @param parseNode 编译的节点\r\n     * @param dataPos 改变的数据集合\r\n     * @param info data的变化信息\r\n     * @param component 所属组件\r\n     */\r\n    renderComponents.prototype.loopTextToDom = function (parseNode, dataPos, info, component) {\r\n        var textData = dataPos.filter(function (df) {\r\n            return df.type == 'text';\r\n        });\r\n        if (textData.length) {\r\n            textData.forEach(function (dp) {\r\n                var originNode = parseNode[0].parentNode.querySelector(dp.position).childNodes[dp.item].textContent;\r\n                document.querySelector(dp.position).childNodes[dp.item].textContent = parseTpl_1.default(originNode, info.new, info.props);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * 属性改变渲染对应的dom节点\r\n     * @param dataPos 改变的数据集合\r\n     * @param info data的变化信息\r\n     * @param component 所属组件\r\n     */\r\n    renderComponents.prototype.loopAttrToDom = function (dataPos, info, component) {\r\n        var _this = this;\r\n        var self = this;\r\n        var attrData = dataPos.filter(function (df) {\r\n            return df.type == 'attr';\r\n        });\r\n        if (attrData.length) {\r\n            attrData.forEach(function (dp) {\r\n                // 处理指令\r\n                switch (dp.attr) {\r\n                    case 'c-show':\r\n                        var newAttr = dom_1.default.boolToDisplay(index_1.default.parse(dp.value)(info.new));\r\n                        dom_1.default.q(dp.position).style.display = newAttr;\r\n                        break;\r\n                    case 'c-if':\r\n                        var dom = dom_1.default.q(dp.position);\r\n                        if (dom != undefined) {\r\n                            dom_1.default.q(dp.position).setAttribute(dp.attr, info.newVal);\r\n                        }\r\n                        _this.handelIf(dp, component);\r\n                        break;\r\n                    case 'c-for':\r\n                        _this.loopCforToDom(dataPos, _this.CObj[component], 'dataChange');\r\n                        break;\r\n                    default:\r\n                        changeAttr(dp);\r\n                }\r\n                function changeAttr(dp) {\r\n                    dom_1.default.q(dp.position).setAttribute(dp.attr, info.newVal);\r\n                    // 更新componentAttrs\r\n                    self.componentAttrs[dp.componentToken][dp.attr] = info.newVal;\r\n                }\r\n                //父组件的属性改变\r\n                function handelComponent(dp) {\r\n                    var childChangePos = self.dataPosition(dp.attr, dom_1.default.create(self.templateId[dp.componentToken]), component);\r\n                    // 文本类型\r\n                    var childChangePosText = childChangePos.filter(function (df) {\r\n                        return df.type == 'text';\r\n                    });\r\n                    childChangePosText.forEach(function (chItem) {\r\n                        var changedComponent = self.CObj[dp.componentName], changedOriginComponentProps = changedComponent.props, changedComponentData = changedComponent.data, changedPropKey = dp.attr, changedPropVal = self.componentAttrs[dp.componentToken][dp.attr], changedComponentProps = self.combineChangedProps(changedPropKey, changedPropVal, changedOriginComponentProps);\r\n                        var changedOrginNode = dom_1.default.create(self.templateId[dp.componentToken]);\r\n                        var changedOrginText = changedOrginNode[0].parentNode.querySelector(chItem.position).childNodes[chItem.item].textContent;\r\n                        dom_1.default.q(chItem.position).childNodes[chItem.item].textContent = parseTpl_1.default(changedOrginText, changedComponentData, changedComponentProps);\r\n                    });\r\n                    // 属性类型\r\n                    var childChangePosAttr = childChangePos.filter(function (df) {\r\n                        return df.type == 'attr';\r\n                    });\r\n                    childChangePosAttr.forEach(function (chItem) {\r\n                        // 父组件的attr值与子组件的props值进行联动\r\n                        if (dp.attr == chItem.value) {\r\n                            chItem.value = dp.value;\r\n                        }\r\n                        dom_1.default.q(chItem.position).setAttribute(chItem.attr, chItem.value);\r\n                        // 更新componentAttrs\r\n                        self.componentAttrs[chItem.componentToken][chItem.attr] = chItem.value;\r\n                        self.componentAttrs[chItem.componentToken][chItem.attr] = chItem.value;\r\n                        if (chItem.isComponent) {\r\n                            handelComponent(chItem);\r\n                        }\r\n                    });\r\n                }\r\n                if (dp.isComponent) {\r\n                    handelComponent(dp);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * 处理c-for指令\r\n     * @param arr c-for 集合\r\n     * @param component 指令所在组件\r\n     */\r\n    renderComponents.prototype.loopCforToDom = function (arr, component, reRender) {\r\n        var _this = this;\r\n        var currentRepeat = arr.filter(function (rVal) {\r\n            return rVal.which == component.name;\r\n        });\r\n        var self = this;\r\n        currentRepeat.forEach(function (re) {\r\n            // 解析指令，获取重复次数\r\n            var match2 = re.fn.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)\\s*$/);\r\n            if (!match2) {\r\n                $log.error('c-for格式有误');\r\n            }\r\n            var itemExp = match2[1];\r\n            var itemsExp = match2[2];\r\n            var items = _this.inComponent(itemsExp, component);\r\n            if (items && util_1.default.type(items) == 'array' && items.length) {\r\n                if (reRender == 'dataChange') {\r\n                    dom_1.default.removeDomExpectWhich(0, '[c-for-id=\"' + dom_1.default.q(re.ele).getAttribute('c-for-id') + '\"]');\r\n                }\r\n                // 渲染单个有c-for指令的模板\r\n                items.forEach(function (item, i) {\r\n                    // 克隆节点，重复次数\r\n                    var newn = dom_1.default.q(re.ele).cloneNode(true);\r\n                    var data = {};\r\n                    data[match2[1]] = item;\r\n                    newn.innerHTML = parseTpl_1.default(re.html, data, self.CObj[component.name]['props'] || {});\r\n                    var newNode = self.loopNodes(component.name, dom_1.default.create(newn.outerHTML));\r\n                    var innerComponents = self.findComponent(newNode[0]);\r\n                    newNode[0].setAttribute('c-for-id', re.id);\r\n                    // 重新编译节点\r\n                    if (i == 0) {\r\n                        dom_1.default.q(re.ele).innerHTML = newNode[0].innerHTML;\r\n                        dom_1.default.q(re.ele).setAttribute('c-for-id', re.id);\r\n                    }\r\n                    else {\r\n                        var el = document.querySelectorAll('[c-for-id=\"' + re.id + '\"][c-for=\"' + re.fn + '\"]');\r\n                        el[el.length - 1].insertAdjacentElement('afterEnd', newNode[0]);\r\n                    }\r\n                    if (innerComponents.length) {\r\n                        self.loopComponents(util_1.default.deepClone(innerComponents), data, [], component.name);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                $log.error('组件' + component.name + '内c-for指令的格式不正确');\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * 处理c-if指令\r\n     * @param arr c-if 集合\r\n     * @param component 指令所在组件\r\n     */\r\n    renderComponents.prototype.loopIfToDom = function (arr, component) {\r\n        var _this = this;\r\n        var currentIf = arr.filter(function (ifVal) {\r\n            return ifVal.which == component.name;\r\n        });\r\n        currentIf.forEach(function (cIf) {\r\n            _this.handelIf(cIf, component.name);\r\n        });\r\n    };\r\n    /**\r\n     * 移除c-if指令所在的节点\r\n     * @param cIf c-if指令所绑定的节点信息\r\n     */\r\n    renderComponents.prototype.handelIf = function (cIf, componentName) {\r\n        var ifDom = dom_1.default.q(cIf.ele || cIf.position);\r\n        // 节点存在，移除节点\r\n        if (ifDom != undefined) {\r\n            var ifInfo = ifDom.getAttribute('c-if');\r\n            if (ifInfo == 'true') {\r\n                ifDom.parentNode.replaceChild(dom_1.default.addComment('c-if:' + cIf.id + ''), ifDom);\r\n                this.ifTpl[cIf.id] = ifDom.outerHTML;\r\n            }\r\n        }\r\n        // 已经被移除，还原节点\r\n        if (ifDom == undefined) {\r\n            dom_1.default.replaceComment(dom_1.default.q(util_1.default._cameCase(componentName)), cIf.attr + ':' + cIf.id, dom_1.default.create(this.ifTpl[cIf.id])[0]);\r\n            // 更改属性\r\n            dom_1.default.attr((cIf.ele || cIf.position), 'c-if', false);\r\n            dom_1.default.q(cIf.ele || cIf.position).style.display = 'block';\r\n        }\r\n    };\r\n    /**\r\n     * 处理c-html指令\r\n     * @param arr c-html指令集合\r\n     * @param component 所属组件\r\n     */\r\n    renderComponents.prototype.loopHtmlToDom = function (arr, component) {\r\n        var currentHtml = arr.filter(function (h) {\r\n            return h.which == component.name;\r\n        });\r\n        currentHtml.forEach(function (h) {\r\n            dom_1.default.q(h.ele).innerHTML = dom_1.default.attr(h.ele, 'c-html');\r\n        });\r\n    };\r\n    /**\r\n     * 组合经过改变的组件的props值\r\n     * @param key\r\n     * @param val\r\n     * @param props\r\n     */\r\n    renderComponents.prototype.combineChangedProps = function (key, val, props) {\r\n        if (props[key]) {\r\n            props[key]['default'] = val;\r\n        }\r\n        return props;\r\n    };\r\n    /**\r\n     * 数组去重\r\n     * @param a\r\n     * @param b\r\n     */\r\n    renderComponents.prototype.array_intersection = function (a, b) {\r\n        var result = [];\r\n        for (var i = 0; i < b.length; i++) {\r\n            var temp = b[i].id;\r\n            for (var j = 0; j < a.length; j++) {\r\n                if (temp === a[j]) {\r\n                    result.push(b[i]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * 判断dom节点是组件\r\n     * @param node dom节点\r\n     */\r\n    renderComponents.prototype.isComponent = function (node) {\r\n        var name = dom_1.default.parseName(node);\r\n        return this.CObj[name] != undefined;\r\n    };\r\n    /**\r\n     * 判断表达式内的字符是否在组件的data中\r\n     * @param name data属性名称\r\n     * @param expression '{{xxx}}'\r\n     * @returns 存在返回{{ }}内的表达式，否在返回null\r\n     */\r\n    renderComponents.prototype.isComponentData = function (name, expression) {\r\n        var regExp = new RegExp(\"{{\\\\s*([\\\\s\\\\S]*\" + name + \"[\\\\s\\\\S]*)\\\\s*}}\", \"gm\");\r\n        var res = regExp.exec(expression);\r\n        if (res == null) {\r\n            return null;\r\n        }\r\n        var exp = {\r\n            '': true,\r\n            '+': true,\r\n            '-': true,\r\n            '*': true,\r\n            '/': true,\r\n            '(': true,\r\n            ')': true,\r\n            '.': true,\r\n            '[': true,\r\n            ']': true,\r\n            '!': true,\r\n            '!=': true,\r\n            '!==': true,\r\n            '>': true,\r\n            '>=': true,\r\n            '>==': true,\r\n            '<': true,\r\n            '<=': true,\r\n            '<==': true,\r\n            '?': true,\r\n            ':': true\r\n        };\r\n        var nameIndex = res[1].indexOf(name), prev1 = res[1].charAt(nameIndex - 1), prev2 = res[1].charAt(nameIndex - 2), prev3 = res[1].charAt(nameIndex - 3), next1 = res[1].charAt(nameIndex + 1), next2 = res[1].charAt(nameIndex + 2), next3 = res[1].charAt(nameIndex + 3);\r\n        if (exp[prev1] || exp[prev2] || exp[prev3] || exp[next1] || exp[next2] || exp[next3]) {\r\n            return res[1];\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * 获取某个data属性名在节点中的位置\r\n     * @param name data属性名称\r\n     * @param node dom节点\r\n     * @param component 所属组件\r\n     */\r\n    renderComponents.prototype.dataPosition = function (name, node, component) {\r\n        var res = [], self = this;\r\n        // 属性\r\n        function loopAttr(node) {\r\n            if (typeof node == 'object' && node.length) {\r\n                for (var i = 0; i < node.length; i++) {\r\n                    if (node[i].nodeType == 1 && node[i].hasAttributes()) {\r\n                        for (var j = 0, len = node[i].attributes; j < len.length; j++) {\r\n                            if (len[j].name == 'c-for') {\r\n                                var match2 = len[j].value.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)\\s*$/);\r\n                                if (!match2) {\r\n                                    $log.error('组件' + component + '内的c-for指令表达式' + len[j] + '有误');\r\n                                }\r\n                                if (match2[2] == name && !self.isComponent(node[i])) {\r\n                                    res = res.concat({\r\n                                        attr: len[j].name,\r\n                                        fn: len[j].value,\r\n                                        type: 'attr',\r\n                                        id: node[i].getAttribute(ID),\r\n                                        ele: '[' + ID + '=\"' + node[i].getAttribute(ID) + '\"]',\r\n                                        item: i,\r\n                                        isComponent: false,\r\n                                        html: node[i].innerHTML,\r\n                                        which: component //所属组件\r\n                                    });\r\n                                }\r\n                            }\r\n                            else {\r\n                                var attrVal = self.isComponentData(name, len[j].value);\r\n                                if (attrVal) {\r\n                                    var isCs = self.isComponent(node[i]);\r\n                                    if (isCs) {\r\n                                        res = res.concat({\r\n                                            attr: len[j].name,\r\n                                            value: name,\r\n                                            type: 'attr',\r\n                                            id: node[i].getAttribute(ID),\r\n                                            position: '[' + ID + '=\"' + node[i].getAttribute(ID) + '\"]',\r\n                                            item: i,\r\n                                            isComponent: true,\r\n                                            componentName: dom_1.default.parseName(node[i]),\r\n                                            componentToken: node[i].getAttribute(ID),\r\n                                            which: component //所属组件\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        res = res.concat({\r\n                                            attr: len[j].name,\r\n                                            value: attrVal,\r\n                                            type: 'attr',\r\n                                            id: node[i].getAttribute(ID),\r\n                                            position: '[' + ID + '=\"' + node[i].getAttribute(ID) + '\"]',\r\n                                            item: i,\r\n                                            isComponent: false,\r\n                                            which: component //所属组件\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (node[i].childNodes && node[i].childNodes.length) {\r\n                            loopAttr(node[i].childNodes);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        loopAttr(node);\r\n        // textContent\r\n        function loopText(node) {\r\n            if (typeof node == 'object' && node.length) {\r\n                for (var i = 0; i < node.length; i++) {\r\n                    if (node[i].nodeType == 3) {\r\n                        var text = node[i].textContent;\r\n                        if (self.isComponentData(name, text)) {\r\n                            res = res.concat({\r\n                                value: name,\r\n                                type: 'text',\r\n                                position: '[' + ID + '=\"' + node[i].parentNode.getAttribute(ID) + '\"]',\r\n                                item: i,\r\n                                isComponent: false\r\n                            });\r\n                        }\r\n                    }\r\n                    if (node[i].childNodes && node[i].childNodes.length) {\r\n                        loopText(node[i].childNodes);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        loopText(node);\r\n        return res;\r\n    };\r\n    /**\r\n     * 组件集合转json对象\r\n     * @param arr\r\n     */\r\n    renderComponents.prototype.listToObj = function (arr) {\r\n        var obj = {};\r\n        arr.forEach(function (v) {\r\n            obj[v.name] = v;\r\n        });\r\n        return obj;\r\n    };\r\n    /**\r\n     * 获取组件的名称集合\r\n     */\r\n    renderComponents.prototype.getComponentNameList = function () {\r\n        var arr = [];\r\n        this.CList.forEach(function (v) {\r\n            arr.push(v.name);\r\n        });\r\n        return arr;\r\n    };\r\n    /**\r\n     * 根据dom节点获取component， 遍历子节点\r\n     * @param node dom节点\r\n     */\r\n    renderComponents.prototype.findComponent = function (node) {\r\n        if (node.nodeType == 3) {\r\n            return;\r\n        }\r\n        var arr = [];\r\n        var self = this;\r\n        // tag标签\r\n        function loopTagNode(node) {\r\n            var normalizedNodeName = self.normalizeDirective(dom_1.default.getNodeName(node).toLowerCase());\r\n            if (self.componentNames.includes(normalizedNodeName)) {\r\n                // arr.push(Util.deepClone(Util.extend(self.CObj[normalizedNodeName], {token: node.getAttribute(ID)})));\r\n                arr.push(util_1.default.extend(self.CObj[normalizedNodeName], { token: node.getAttribute(ID) }));\r\n            }\r\n            if (node.childNodes && node.childNodes.length) {\r\n                node.childNodes.forEach(function (v) {\r\n                    if (v.nodeType != 3) {\r\n                        loopTagNode(v);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        loopTagNode(node);\r\n        return arr;\r\n    };\r\n    /**\r\n     * 根据dom节点获取component， 不遍历子节点\r\n     * @param node dom节点\r\n     * @param name 组件名称\r\n     */\r\n    renderComponents.prototype.getComponent = function (node, name) {\r\n        var arr = [];\r\n        var self = this;\r\n        // tag标签\r\n        function loopTagNode(node) {\r\n            var normalizedNodeName = util_1.default.cameCase(dom_1.default.getNodeName(node).toLowerCase());\r\n            if (self.componentNames.includes(normalizedNodeName)) {\r\n                arr.push(normalizedNodeName);\r\n                var obj = {};\r\n                for (var i = 0, len = node.attributes; i < len.length; i++) {\r\n                    if (len[i].name != ID) {\r\n                        obj[len[i].name] = parseTpl_1.default(len[i].value, self.CObj[name].data, self.CObj[name].props);\r\n                    }\r\n                }\r\n                if (!dom_1.default.noOtherAttr(ID, node)) {\r\n                    obj['component'] = normalizedNodeName;\r\n                    self.componentAttrs[node.getAttribute(ID)] = obj;\r\n                }\r\n            }\r\n        }\r\n        loopTagNode(node);\r\n        return arr;\r\n    };\r\n    /**\r\n     * 判断指令是否含有mulit属性\r\n     * @param name\r\n     */\r\n    renderComponents.prototype.directiveIsMulit = function (name) {\r\n        for (var i = 0, len = this.CList; i < len.length; i++) {\r\n            if (len[i]['name'] == name && len[i].mulit == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * 组件指令的层级关系\r\n     * @param a\r\n     * @param b\r\n     */\r\n    renderComponents.prototype.componentLayer = function (a, b) {\r\n        var sort = b.layer - a.layer;\r\n        if (sort == 0) {\r\n            if (a.name != b.name) {\r\n                return a.name < b.name ? -1 : 1;\r\n            }\r\n            else {\r\n                return a.cid - b.cid;\r\n            }\r\n        }\r\n        else {\r\n            return sort;\r\n        }\r\n    };\r\n    /**\r\n     * 获取data数据改变后的模板\r\n     * @param html\r\n     * @param data\r\n     */\r\n    renderComponents.prototype.getChangedData = function (html, data, props) {\r\n        return parseTpl_1.default(html, data, props);\r\n    };\r\n    /**\r\n     * 序列化指令\r\n     * @param name\r\n     */\r\n    renderComponents.prototype.normalizeDirective = function (name) {\r\n        return util_1.default.cameCase(name.replace(PREFIX_DIRECTIVE, ''));\r\n    };\r\n    /**\r\n     * 判断变量是否在组件的data,props之中, 并返回结果\r\n     * @param exp 变量\r\n     * @param component 组件\r\n     */\r\n    renderComponents.prototype.inComponent = function (exp, component) {\r\n        return component.data[exp] || component.props.default[exp];\r\n    };\r\n    return renderComponents;\r\n}());\r\nexports.default = renderComponents;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/compile/render.ts\n// module id = 22\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//对象属性\r\nvar PROPERTY = ['constructor', '__proto__', '__defineGetter__', '__defineSetter__', '__lookupGetter__', '__loopupSetter__'];\r\nexports.PROPERTY = PROPERTY;\r\n//window对象\r\nvar WINDOW = ['document', 'alert', 'location', 'setInterval'];\r\nexports.WINDOW = WINDOW;\r\n//dom节点\r\nvar NODE = ['nodeName', 'children'];\r\nexports.NODE = NODE;\r\n//函数\r\nvar FUN = [Function.prototype.call, Function.prototype.apply, Function.prototype.bind];\r\nexports.FUN = FUN;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/config/unSafeStr.ts\n// module id = 23\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar util_1 = require(\"../util\");\r\nvar $log = require(\"../log\");\r\nvar HandelDom = /** @class */ (function () {\r\n    function HandelDom() {\r\n        this.BOOLEAN_ATTRS = {\r\n            selected: true\r\n        };\r\n        this.BOOLEAN_ELEMENT = {};\r\n    }\r\n    /**\r\n     * 获取dom节点\r\n     * @param str 节点标识,class,id...\r\n     */\r\n    HandelDom.prototype.q = function (str) {\r\n        return document.querySelector(str);\r\n    };\r\n    /**\r\n     * 根据字符串创建dom节点，返回dom节点\r\n     * @param str\r\n     */\r\n    HandelDom.prototype.createDom = function (str) {\r\n        if (util_1.default.type(str) != 'string') {\r\n            $log.error('组件模板' + str + '必须为字符串，请检查组件的template,templateId,templateUrl属性');\r\n        }\r\n        var html = \"\" + str;\r\n        html = html.trim();\r\n        html = html.replace(/<!--[\\s\\S]*?-->/gm, ''); //去除html注释\r\n        html = html.replace(/>\\s+([^\\s<]*)\\s+</gm, '>$1<').trim(); //去除html标签间的多余空白\r\n        var pattern = /([^>]*)(<([a-z/][-a-z0-9_:.]*)[^>/]*(\\/*)>)([^<]*)/gm, matchArr, start = Date.now();\r\n        var arr = [];\r\n        while ((matchArr = pattern.exec(html))) {\r\n            var textBefore = matchArr[1], //获取排在标签前的文本\r\n            elem = matchArr[2], //获取整个开标签或闭标签\r\n            elemName = matchArr[3], //获取标签名\r\n            closeSign = matchArr[4], //判断是否为自闭合标签标记\r\n            textAfter = matchArr[5]; //获取排在标签后的文本\r\n            arr.push(elemName);\r\n        }\r\n        var dom = document.createElement(arr[0]);\r\n        dom.innerHTML = str;\r\n        return dom;\r\n    };\r\n    /**\r\n     * 根据字符串创建dom节点，返回dom的子节点\r\n     * @param str\r\n     */\r\n    HandelDom.prototype.create = function (str) {\r\n        var div = this.createDom(str);\r\n        return div.childNodes;\r\n    };\r\n    /**\r\n    * 获取节点名称\r\n    * @param node\r\n    */\r\n    HandelDom.prototype.getNodeName = function (node) {\r\n        return node.nodeName ? node.nodeName : node[0].nodeName;\r\n    };\r\n    /**\r\n     * 获取节点的驼峰名称\r\n     * @param node\r\n     */\r\n    HandelDom.prototype.parseName = function (node) {\r\n        return util_1.default.cameCase(node.tagName.toLowerCase());\r\n    };\r\n    /**\r\n     * 包括dom节点\r\n     * @param str 节点字符串\r\n     * @param wrap 包括的tag标签\r\n     */\r\n    HandelDom.prototype.wrapDom = function (str, wrap) {\r\n        return \"<\" + wrap + \">\" + str + \"</\" + wrap + \">\";\r\n    };\r\n    /**\r\n     * 获取某个属性的集合\r\n     * @param attr 属性名\r\n     * @param node 节点\r\n     */\r\n    HandelDom.prototype.getAttr = function (attr, node) {\r\n        var arr = [];\r\n        if (node.nodeType == 1 && node.getAttribute(attr)) {\r\n            arr.push(node.getAttribute(attr));\r\n        }\r\n        if (node.childNodes && node.childNodes.length) {\r\n            getA(node.childNodes);\r\n        }\r\n        function getA(node) {\r\n            for (var i = 0; i < node.length; i++) {\r\n                if (node[i].nodeType == 1 && node[i].getAttribute(attr)) {\r\n                    arr.push(node[i].getAttribute(attr));\r\n                }\r\n                if (node[i].childNodes && node[i].childNodes.length) {\r\n                    getA(node[i].childNodes);\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    };\r\n    /**\r\n     * 父组件的data值覆盖子组件的props值（组件的attr值与props对比，有则覆盖）\r\n     * @param attr {component:'hello', 'width': 100}\r\n     * @param props { 'width': { default:50, type:Number } }\r\n     */\r\n    HandelDom.prototype.combineAttrAndProps = function (attr, props) {\r\n        if (util_1.default.isEmpty(attr))\r\n            return props;\r\n        if (attr) {\r\n            var newAttr = util_1.default.expectSome(attr, 'component');\r\n            for (var i in newAttr) {\r\n                if (props && props[i]) {\r\n                    props[i].default = newAttr[i];\r\n                }\r\n            }\r\n        }\r\n        return props;\r\n    };\r\n    /**\r\n     * 节点没有除了attr以外的其他属性\r\n     * @param attr 属性\r\n     * @param node 节点\r\n     */\r\n    HandelDom.prototype.noOtherAttr = function (attr, node) {\r\n        if (node.nodeType == 1) {\r\n            if (node.attributes) {\r\n                if (node.attributes.length >= 2)\r\n                    return false;\r\n                if (node.attributes.length == 1) {\r\n                    if (node.attributes[0].name == attr)\r\n                        return true;\r\n                    else\r\n                        return false;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 根据bool值转化成display\r\n     * @param bool true, false\r\n     */\r\n    HandelDom.prototype.boolToDisplay = function (bool) {\r\n        if (bool == 'true' || bool == true)\r\n            return 'block';\r\n        if (bool == 'false' || bool == false)\r\n            return 'none';\r\n    };\r\n    /**\r\n     * 获取节点除了某些属性外的其他属性\r\n     * @param node 节点\r\n     * @param attr 属性\r\n     */\r\n    HandelDom.prototype.expectSomeAttr = function (node, attr) {\r\n        var obj = {};\r\n        if (node.attributes && node.attributes.length) {\r\n            for (var i = 0, len = node.attributes; i < len.length; i++) {\r\n                if (len[i].name != attr) {\r\n                    obj[len[i].name] = len[i].value;\r\n                }\r\n            }\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * 添加注释节点\r\n     * @param str 注释内容\r\n     */\r\n    HandelDom.prototype.addComment = function (str) {\r\n        var dom = document.createComment(str);\r\n        return dom;\r\n    };\r\n    /**\r\n     * 替换注释节点\r\n     * @param node 父节点\r\n     * @param text 注释内容\r\n     * @param newNode 新的节点\r\n     */\r\n    HandelDom.prototype.replaceComment = function (node, text, newNode) {\r\n        var iterator = document.createNodeIterator(node, NodeFilter.SHOW_COMMENT, null, false);\r\n        var n = iterator.nextNode();\r\n        while (n) {\r\n            if (n.nodeValue == text) {\r\n                n.parentNode.replaceChild(newNode, n);\r\n            }\r\n            n = iterator.nextNode();\r\n        }\r\n    };\r\n    /**\r\n     * 更改节点属性\r\n     * @param str 节点\r\n     * @param key 属性名\r\n     * @param val 属性值\r\n     */\r\n    HandelDom.prototype.attr = function (str, key, val) {\r\n        var dom = this.q(str);\r\n        if (dom != undefined) {\r\n            if (arguments.length == 3) {\r\n                dom.setAttribute(key, val);\r\n            }\r\n            if (arguments.length == 2) {\r\n                return dom.getAttribute(key);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 返回节点的html\r\n     * @param str 节点标识\r\n     */\r\n    HandelDom.prototype.hasHtml = function (str) {\r\n        if (DOM.q(str)) {\r\n            return DOM.q(str).innerHTML;\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * 返回require,import 的html\r\n     * @param str 节点标识\r\n     */\r\n    HandelDom.prototype.hasHtmlUrl = function (str) {\r\n        return str;\r\n    };\r\n    /**\r\n     * head添加style\r\n     * @param res style所属类型\r\n     * @param component style所属组件\r\n     */\r\n    HandelDom.prototype.addStyle = function (res, component) {\r\n        if (component.name == undefined) {\r\n            $log.error('找不到组件的name属性，无法添加style样式');\r\n        }\r\n        if (res == undefined) {\r\n            return;\r\n        }\r\n        // 组件的标签名称\r\n        var tag = util_1.default._cameCase(component.name);\r\n        switch (res.type) {\r\n            case 'string':\r\n                this.appendStyle(res.result, tag);\r\n                break;\r\n            case 'id':\r\n                if (this.q(res.result) == undefined) {\r\n                    $log.error('名称为' + component.name + '组件中，节点' + res.result + '不存在');\r\n                }\r\n                var inner = this.q(res.result).innerHTML;\r\n                this.appendStyle(inner, tag);\r\n                break;\r\n            case 'url':\r\n                this.appendStyle(res.result, tag);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * 将样式表添加到head里面\r\n     * @param inner 样式表内容\r\n     * @param title style的title属性，也是组件tag标签\r\n     */\r\n    HandelDom.prototype.appendStyle = function (inner, title) {\r\n        var style = \"\" + inner;\r\n        style = util_1.default.trimStr(style);\r\n        var newStyle = document.createElement('style');\r\n        newStyle.type = 'text/css';\r\n        newStyle.title = title;\r\n        newStyle.innerHTML = style;\r\n        this.q('head').appendChild(newStyle);\r\n        // 给选择符设置前缀\r\n        this.addSelectorPrefix(title);\r\n    };\r\n    /**\r\n     * 给选择符设置前缀\r\n     * @param title style的title属性\r\n     */\r\n    HandelDom.prototype.addSelectorPrefix = function (title) {\r\n        var stylesheet = document.styleSheets;\r\n        for (var i = 0; i < stylesheet.length; i++) {\r\n            if (stylesheet[i].title == title) {\r\n                for (var j = 0, cr = stylesheet[i].cssRules; j < cr.length; j++) {\r\n                    cr[j].selectorText = title + ' ' + cr[j].selectorText;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 移除具有相同属性的节点，第item个除外\r\n     * @param item 索引\r\n     * @param selector 节点选择器\r\n     */\r\n    HandelDom.prototype.removeDomExpectWhich = function (item, selector) {\r\n        var nodes = document.querySelectorAll(selector);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            if (i != item) {\r\n                nodes[i].parentNode.removeChild(nodes[i]);\r\n            }\r\n        }\r\n    };\r\n    HandelDom.prototype.watch = function (node) {\r\n        // 观察dom数据变化\r\n        var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\r\n        var target = document.querySelector(node);\r\n        var observer = new MutationObserver(function (mu) {\r\n            // console.log(mu)\r\n        });\r\n        var config = { childList: true, attributes: true, characterData: true, subtree: true, attributeOldValue: true, characterDataOldValue: true };\r\n        observer.observe(target, config);\r\n    };\r\n    HandelDom.prototype.booleanAttr = function (node, nodeName) {\r\n    };\r\n    return HandelDom;\r\n}());\r\nvar DOM = new HandelDom();\r\nexports.default = DOM;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/dom/dom.ts\n// module id = 24\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar parseHttp_1 = require(\"./parseHttp\");\r\nvar Http = /** @class */ (function () {\r\n    function Http() {\r\n    }\r\n    /**\r\n     * ajax请求方式，全配置\r\n     * @param param0\r\n     */\r\n    Http.prototype.ajax = function (_a) {\r\n        var _b = _a.type, type = _b === void 0 ? 'get' : _b, _c = _a.url, url = _c === void 0 ? '' : _c, data = _a.data;\r\n        return parseHttp_1.parseHttp(type, url, data);\r\n    };\r\n    /**\r\n     * get请求方式\r\n     * @param url\r\n     */\r\n    Http.prototype.get = function (url) {\r\n        return parseHttp_1.parseHttp('get', url, null);\r\n    };\r\n    /**\r\n     * post请求\r\n     * @param url\r\n     * @param data\r\n     */\r\n    Http.prototype.post = function (url, data) {\r\n        return parseHttp_1.parseHttp('post', url, data);\r\n    };\r\n    /**\r\n     * put请求\r\n     * @param url\r\n     * @param data\r\n     */\r\n    Http.prototype.put = function (url, data) {\r\n        return parseHttp_1.parseHttp('put', url, data);\r\n    };\r\n    /**\r\n     * delete请求\r\n     * @param url\r\n     * @param data\r\n     */\r\n    Http.prototype.delete = function (url, data) {\r\n        return parseHttp_1.parseHttp('delete', url, data);\r\n    };\r\n    return Http;\r\n}());\r\nvar http = new Http();\r\nexports.default = http;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/http/index.ts\n// module id = 25\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar util_1 = require(\"../util\");\r\nvar $log = require(\"../log\");\r\nvar httpType = ['get', 'post', 'put', 'delete', 'head', 'options'];\r\n/**\r\n * 解析http请求\r\n * @param type 请求类型\r\n * @param url\r\n * @param data\r\n */\r\nfunction parseHttp(type, url, data) {\r\n    if (util_1.default.type(type) != 'string' && !httpType.includes(type.toLowerCase())) {\r\n        $log.error('http请求类型必须为' + httpType + '中的一个');\r\n    }\r\n    if (util_1.default.type(url) != 'string') {\r\n        $log.error('http请求的url参数需为字符');\r\n    }\r\n    if (data && util_1.default.type(data) != 'object') {\r\n        $log.error('http请求的data参数需为对象');\r\n    }\r\n    var promise = new Promise(function (resolve, reject) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(type, url);\r\n        xhr.onreadystatechange = handel;\r\n        xhr.responseType = 'json';\r\n        xhr.setRequestHeader('Accept', 'application/json');\r\n        xhr.send(data || null);\r\n        function handel() {\r\n            if (this.readyState != 4) {\r\n                return;\r\n            }\r\n            if (this.status == 200) {\r\n                resolve(this.response);\r\n            }\r\n            else {\r\n                reject(new Error(this.statusText));\r\n            }\r\n        }\r\n    });\r\n    return promise;\r\n}\r\nexports.parseHttp = parseHttp;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/http/parseHttp.ts\n// module id = 26\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AST = require(\"../config/ast_config\");\r\nvar LEXER = require(\"../config/lexer_config\");\r\nvar util_1 = require(\"../util\");\r\n/**\r\n * 抽象语法结构树\r\n [{ type: 'ASTBuilder.Program',\r\n  body:\r\n   { type: 'ASTBuilder.Binary',\r\n     boolean_expression:\r\n      { type: 'ASTBuilder.Binary',\r\n        operator: '>',\r\n        left: { type: 'ASTBuilder.Identifier', value: 'a' },\r\n        right: { type: 'ASTBuilder.MetaData', value: 2 } },\r\n     true_value: { type: 'ASTBuilder.MetaData', value: 1 },\r\n     error_value: { type: 'ASTBuilder.MetaData', value: 0 } } }]\r\n */\r\nvar ASTBuilder = /** @class */ (function () {\r\n    function ASTBuilder(lexer) {\r\n        this.lexer = lexer;\r\n        this.tokens = [];\r\n    }\r\n    /**\r\n     * 生成抽象语法结构树\r\n     * @param text\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.ast = function (text) {\r\n        this.tokens = this.lexer.lex(text);\r\n        return this.init();\r\n    };\r\n    /**\r\n     * 结构树形式, ';'看作是多个表达式的组合，故词法树的body有对象进化为对象数组Array<object>\r\n     * @returns {{type: string, body: {}}}\r\n     */\r\n    ASTBuilder.prototype.init = function () {\r\n        var body = [];\r\n        while (true) {\r\n            if (this.tokens.length) {\r\n                body.push(this.pipeBuilder());\r\n            }\r\n            if (!util_1.default.expect(this.tokens, ';')) {\r\n                AST.ast_init['body'] = {};\r\n                AST.ast_init['body'] = body;\r\n                return util_1.default.clone(AST.ast_init);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 中介函数\r\n     * @returns {any}\r\n     */\r\n    ASTBuilder.prototype.agency = function () {\r\n        var agency;\r\n        if (util_1.default.expect(this.tokens, '(')) {\r\n            agency = this.pipeBuilder();\r\n            util_1.default.consume(this.tokens, ')');\r\n        }\r\n        else if (util_1.default.expect(this.tokens, '[')) {\r\n            agency = this.arrayBuilder();\r\n        }\r\n        else if (util_1.default.expect(this.tokens, '{')) {\r\n            agency = this.objectBuilder();\r\n        }\r\n        else if (LEXER.LETTER.hasOwnProperty(this.tokens[0]['text'])) {\r\n            if (this.tokens[0]['text'] == \"this\") {\r\n                agency = util_1.default.clone(AST.ast_this);\r\n            }\r\n            else {\r\n                AST.ast_constant['value'] = LEXER.LETTER[util_1.default.consume(this.tokens)['text']];\r\n                agency = util_1.default.clone(AST.ast_constant);\r\n            }\r\n        }\r\n        else if (util_1.default.exitFirst(this.tokens).identifier) {\r\n            agency = this.identifierBuilder();\r\n        }\r\n        else {\r\n            agency = this.constantBuilder();\r\n        }\r\n        /**\r\n         * 处理带有 '.', '[' 的标识符\r\n         * 结构树：{\"type\":\"ASTBuilder.Member\",\"object\":{\"type\":\"ASTBuilder.Member\",\"object\":{\"type\":\"ASTBuilder.Identifier\",\"value\":\"a\"},\"property\":{\"type\":\"ASTBuilder.Identifier\",\"value\":\"b\"}},\"property\":{\"type\":\"ASTBuilder.Identifier\",\"value\":\"c\"}}\r\n         */\r\n        var type;\r\n        while (type = util_1.default.expect(this.tokens, '.', '[', '(')) {\r\n            agency = this.memberBuilder(type, agency);\r\n        }\r\n        // console.log(JSON.stringify(agency));\r\n        return agency;\r\n    };\r\n    /**\r\n     * 遍历'[]','{}','()'等对称标识符\r\n     */\r\n    ASTBuilder.prototype.closingTags = function (quote) {\r\n        var arr = [], that = this;\r\n        if (!util_1.default.exitFirst(this.tokens, quote)) {\r\n            do {\r\n                if (util_1.default.exitFirst(this.tokens, quote))\r\n                    break;\r\n                arr.push(that.agency());\r\n            } while (util_1.default.expect(this.tokens, ','));\r\n        }\r\n        util_1.default.consume(this.tokens, quote);\r\n        return arr;\r\n    };\r\n    /**\r\n     * 结构树的常量部分\r\n     * @returns {{type: string, value: {}}}\r\n     */\r\n    ASTBuilder.prototype.constantBuilder = function () {\r\n        AST.ast_constant['value'] = util_1.default.consume(this.tokens)['value'];\r\n        return util_1.default.clone(AST.ast_constant);\r\n    };\r\n    /**\r\n    * 结构树的标识符部分\r\n    * @returns {{type: string, value: {}}}\r\n    */\r\n    ASTBuilder.prototype.identifierBuilder = function () {\r\n        AST.ast_identifier['value'] = util_1.default.consume(this.tokens)['value'];\r\n        return util_1.default.clone(AST.ast_identifier);\r\n    };\r\n    /**\r\n     * 结构树的数组部分\r\n     * @returns {{type: string, value: {}}}\r\n     */\r\n    ASTBuilder.prototype.arrayBuilder = function () {\r\n        AST.ast_array['value'] = this.closingTags(']');\r\n        return util_1.default.clone(AST.ast_array);\r\n    };\r\n    /**\r\n     * 结构树的对象部分\r\n     * @returns {{type: string, value: {}}}\r\n     */\r\n    ASTBuilder.prototype.objectBuilder = function () {\r\n        var arr = [];\r\n        if (!util_1.default.exitFirst(this.tokens, '}')) {\r\n            do {\r\n                AST.ast_json['key'] = this.constantBuilder();\r\n                util_1.default.consume(this.tokens, ':');\r\n                AST.ast_json['value'] = this.assignmentBuilder();\r\n                arr.push(util_1.default.clone(AST.ast_json));\r\n            } while (util_1.default.expect(this.tokens, ','));\r\n        }\r\n        util_1.default.consume(this.tokens, '}');\r\n        AST.ast_object['value'] = arr;\r\n        return util_1.default.clone(AST.ast_object);\r\n    };\r\n    /**\r\n     * 结构树的对象取值部分，a.b  a[\"b\"]，a() 等\r\n     * @param type\r\n     * @param agency\r\n     * @returns {{type: string, value: {}}}\r\n     */\r\n    ASTBuilder.prototype.memberBuilder = function (type, agency) {\r\n        if (type.text === '[') {\r\n            agency = {\r\n                type: AST.dataType['7'],\r\n                object: agency,\r\n                property: this.agency(),\r\n                computed: true\r\n            };\r\n            util_1.default.consume(this.tokens, ']');\r\n        }\r\n        if (type.text === '.') {\r\n            agency = {\r\n                type: AST.dataType['7'],\r\n                object: agency,\r\n                property: this.identifierBuilder(),\r\n                computed: false\r\n            };\r\n        }\r\n        if (type.text === '(') {\r\n            agency = {\r\n                type: AST.ast_function['type'],\r\n                callee: agency,\r\n                arguments: this.closingTags(')'),\r\n                pipe: false\r\n            };\r\n        }\r\n        return agency;\r\n    };\r\n    /**\r\n     * 含有‘=’等符号\r\n     * @returns {any}\r\n     */\r\n    ASTBuilder.prototype.assignmentBuilder = function () {\r\n        var left = this.ternaryBuilder();\r\n        if (util_1.default.expect(this.tokens, '=')) {\r\n            var right = this.ternaryBuilder();\r\n            AST.ast_assignment['left'] = left;\r\n            AST.ast_assignment['right'] = right;\r\n            return util_1.default.clone(AST.ast_assignment);\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * 一元运算符\r\n     * @returns {any}\r\n     */\r\n    ASTBuilder.prototype.unaryBuilder = function () {\r\n        var ue = util_1.default.expect(this.tokens, '+', '!', '-');\r\n        if (ue) {\r\n            AST.ast_unary['operator'] = ue.text;\r\n            AST.ast_unary['value'] = this.unaryBuilder();\r\n            return util_1.default.clone(AST.ast_unary);\r\n        }\r\n        if (!ue)\r\n            return this.agency();\r\n    };\r\n    /**\r\n     *乘法运算\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.multiplicativeBuilder = function () {\r\n        var left = this.unaryBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '*', '%', '/')) {\r\n            AST.ast_binary['operator'] = ue.text;\r\n            AST.ast_binary['left'] = left;\r\n            AST.ast_binary['right'] = this.unaryBuilder();\r\n            left = util_1.default.clone(AST.ast_binary);\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * 加法运算\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.additiveBuilder = function () {\r\n        var left = this.multiplicativeBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '+', '-')) {\r\n            left = {\r\n                type: AST.ast_binary['type'],\r\n                operator: ue.text,\r\n                left: left,\r\n                right: this.multiplicativeBuilder()\r\n            };\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * 关系运算符，‘>’\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.relationalBuilder = function () {\r\n        var left = this.additiveBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '>', '<', '>=', '<=')) {\r\n            left = {\r\n                type: AST.ast_binary['type'],\r\n                operator: ue.text,\r\n                left: left,\r\n                right: this.additiveBuilder()\r\n            };\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * 等法运算符，‘==’\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.equalityBuilder = function () {\r\n        var left = this.relationalBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '==', '===', '!=', '!==')) {\r\n            left = {\r\n                type: AST.ast_binary['type'],\r\n                operator: ue.text,\r\n                left: left,\r\n                right: this.relationalBuilder()\r\n            };\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * && 运算符， &&高于||\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.andBuilder = function () {\r\n        var left = this.equalityBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '&&')) {\r\n            left = {\r\n                type: AST.ast_logical['type'],\r\n                operator: ue.text,\r\n                left: left,\r\n                right: this.equalityBuilder()\r\n            };\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * || 运算符， &&高于||\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.orBuilder = function () {\r\n        var left = this.andBuilder(), ue;\r\n        while (ue = util_1.default.expect(this.tokens, '||')) {\r\n            left = {\r\n                type: AST.ast_logical['type'],\r\n                operator: ue.text,\r\n                left: left,\r\n                right: this.andBuilder()\r\n            };\r\n        }\r\n        return left;\r\n    };\r\n    /**\r\n     * 三元运算符\r\n     * @returns {Object}\r\n     */\r\n    ASTBuilder.prototype.ternaryBuilder = function () {\r\n        var boolean_expression = this.orBuilder();\r\n        if (util_1.default.expect(this.tokens, '?')) {\r\n            var true_value = this.assignmentBuilder();\r\n            if (util_1.default.consume(this.tokens, ':')) {\r\n                var error_value = this.assignmentBuilder();\r\n                return {\r\n                    type: AST.ast_teranry['type'],\r\n                    boolean_expression: boolean_expression,\r\n                    true_value: true_value,\r\n                    error_value: error_value\r\n                };\r\n            }\r\n        }\r\n        return boolean_expression;\r\n    };\r\n    /**\r\n     * 管道处理\r\n     */\r\n    ASTBuilder.prototype.pipeBuilder = function () {\r\n        var pipes = this.assignmentBuilder();\r\n        while (util_1.default.expect(this.tokens, '|')) {\r\n            var args = [pipes];\r\n            pipes = {\r\n                type: AST.ast_function['type'],\r\n                callee: this.identifierBuilder(),\r\n                arguments: args,\r\n                pipe: true\r\n            };\r\n            while (util_1.default.expect(this.tokens, ':')) {\r\n                args.push(this.assignmentBuilder());\r\n            }\r\n        }\r\n        return pipes;\r\n    };\r\n    return ASTBuilder;\r\n}());\r\nexports.default = ASTBuilder;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/parse/astBuilder.ts\n// module id = 27\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ast_config_1 = require(\"../config/ast_config\");\r\nvar $log = require(\"../log\");\r\nvar K = require(\"../config/unSafeStr\");\r\nvar util_1 = require(\"../util\");\r\nvar ps = {}; //管道集合\r\nvar ASTCompile = /** @class */ (function () {\r\n    function ASTCompile(astBuilder, pipes) {\r\n        this.astBuilder = astBuilder;\r\n        this.state = {\r\n            body: [],\r\n            compileId: 0,\r\n            echo: [],\r\n            pipes: {} //管道过滤器\r\n        };\r\n        this.ast = {};\r\n        ps = pipes;\r\n    }\r\n    /**\r\n     * 词法树的最终解析执行函数\r\n     * @param text\r\n     * @returns {Function}\r\n     */\r\n    ASTCompile.prototype.compile = function (text) {\r\n        this.ast = this.astBuilder.ast(text);\r\n        this.handelTree(this.ast);\r\n        this.constantExpr(this.ast);\r\n        var fn = this.pipePrefix() + 'var fn = function(scope, local){'\r\n            + (this.state.echo.length ? 'var ' + this.state.echo.join(',') + ';' : '')\r\n            + this.state.body.join('') + '}; return fn;';\r\n        var fns = new Function('safeProperty', 'safeObject', 'safeFunction', 'isUndefined', 'pipe', fn)(safeProperty, safeObject, safeFunction, isUndefined, pipe);\r\n        fns.literal = this.isLiteral(); // 定义字面量\r\n        fns.constant = this.ast.constant; // 定义常亮\r\n        return fns;\r\n    };\r\n    /**\r\n     * 递归解析词法树\r\n     * @param ast 词法结构树\r\n     * @param context 针对函数的上下文\r\n     * @param createNewElement 布尔值，如果属性不存在就动态创建一个\r\n     * @returns {any}\r\n     */\r\n    ASTCompile.prototype.handelTree = function (ast, context, createNewElement) {\r\n        if (context === void 0) { context = { context: undefined, name: undefined, computed: undefined }; }\r\n        switch (ast.type) {\r\n            case ast_config_1.dataType['1']://'ASTBuilder.Init'\r\n                this.initCompile(ast);\r\n                break;\r\n            case ast_config_1.dataType['2']://'ASTBuilder.MetaData'\r\n                return this.metaCompile(ast);\r\n            case ast_config_1.dataType['3']://'ASTBuilder.Array'\r\n                return this.arrayCompile(ast);\r\n            case ast_config_1.dataType['4']://'ASTBuilder.Object'\r\n                return this.objectCompile(ast);\r\n            case ast_config_1.dataType['5']://'ASTBuilder.Identifier'\r\n                return this.identifierCompile(ast, context, createNewElement);\r\n            case ast_config_1.dataType['6']://'ASTBuilder.This'\r\n                return this.thisCompile();\r\n            case ast_config_1.dataType['7']://'ASTBuilder.Member'\r\n                return this.memberCompile(ast, context, createNewElement);\r\n            case ast_config_1.dataType['8']://'ASTBuilder.Function'\r\n                return this.functionCompile(ast);\r\n            case ast_config_1.dataType['9']://'ASTBuilder.Assignment'\r\n                return this.assigmentCompile(ast);\r\n            case ast_config_1.dataType['10']://'ASTBuilder.Unary'\r\n                return this.unaryCompile(ast);\r\n            case ast_config_1.dataType['11']://'ASTBuilder.Binary'\r\n                return this.binaryCompile(ast);\r\n            case ast_config_1.dataType['12']://'ASTBuilder.Logical'\r\n                return this.logicalCompile(ast);\r\n            case ast_config_1.dataType['13']://'ASTBuilder.Ternary'\r\n                return this.ternaryCompile(ast);\r\n        }\r\n    };\r\n    /**\r\n     * 初始化词法编译器\r\n     * @param ast\r\n     */\r\n    ASTCompile.prototype.initCompile = function (ast) {\r\n        var _this = this;\r\n        var arr = util_1.default.clone(ast.body);\r\n        var last = arr.pop();\r\n        arr.forEach(function (val) {\r\n            _this.state.body.push(_this.handelTree(val));\r\n        });\r\n        this.state.body.push('return ', this.handelTree(last), ';');\r\n    };\r\n    /**\r\n     * 基础类数据编译\r\n     * @param ast\r\n     * @returns {any}\r\n     */\r\n    ASTCompile.prototype.metaCompile = function (ast) {\r\n        return util_1.default.wrapString(ast.value);\r\n    };\r\n    /**\r\n     * 数组类词法树编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.arrayCompile = function (ast) {\r\n        var _this = this;\r\n        var arr = ast.value.map(function (val) {\r\n            return _this.handelTree(val);\r\n        });\r\n        return '[' + arr.join(',') + ']';\r\n    };\r\n    /**\r\n     * 对象类词法树编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.objectCompile = function (ast) {\r\n        var _this = this;\r\n        var arrJson = ast.value.map(function (val) {\r\n            var key = val['key']['value'];\r\n            var value = _this.handelTree(val['value']);\r\n            return key + ':' + value;\r\n        });\r\n        return '{' + arrJson.join(',') + '}';\r\n    };\r\n    /**\r\n     * 标识符词法树编译\r\n     * @param ast\r\n     * @param context\r\n     * @param createNewElement\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.identifierCompile = function (ast, context, createNewElement) {\r\n        //判断是否是安全的属性名\r\n        safeProperty(ast.value);\r\n        var id = this.incrementId();\r\n        // 存在本地属性local\r\n        util_1.default.conditionIsRight(this.state.body, util_1.default.hasProperty('local', ast.value), util_1.default.concatCode(id, util_1.default.nonComputedMember('local', ast.value)));\r\n        // 创建空对象\r\n        if (createNewElement) {\r\n            util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.hasProperty('local', ast.value)) + ' && scope && ' + util_1.default.notExist(util_1.default.hasProperty('scope', ast.value)), util_1.default.concatCode(util_1.default.nonComputedMember('scope', ast.value), '{}'));\r\n        }\r\n        //不存在本地属性，只有scope属性\r\n        util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.hasProperty('local', ast.value)) + ' && scope', util_1.default.concatCode(id, util_1.default.nonComputedMember('scope', ast.value)));\r\n        // 处理函数上下文\r\n        if (context) {\r\n            context.context = util_1.default.hasProperty('local', ast.value) + '?local:scope';\r\n            context.name = ast.value;\r\n            context.computed = false;\r\n        }\r\n        this.state.body.push('safeObject(' + id + ');');\r\n        return id;\r\n    };\r\n    /**\r\n     * 含有this的编译\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.thisCompile = function () {\r\n        return 'scope';\r\n    };\r\n    /**\r\n     * 对象属性操作类词法树编译，如a.b, a[\"b\"]\r\n     * @param ast\r\n     * @param context\r\n     * @param createNewElement\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.memberCompile = function (ast, context, createNewElement) {\r\n        var id = this.incrementId();\r\n        var noComp = this.handelTree(ast.object, undefined, true);\r\n        if (context) {\r\n            context.context = noComp;\r\n        }\r\n        if (ast.computed) {\r\n            var comp = this.handelTree(ast.property);\r\n            this.state.body.push('safeProperty(' + comp + ');');\r\n            //处理空对象\r\n            if (createNewElement) {\r\n                util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.computedMember(noComp, comp)), util_1.default.concatCode(util_1.default.computedMember(noComp, comp), '{}'));\r\n            }\r\n            util_1.default.conditionIsRight(this.state.body, noComp, util_1.default.concatCode(id, 'safeObject(' + util_1.default.computedMember(noComp, comp) + ')'));\r\n            if (context) {\r\n                context.name = comp;\r\n                context.computed = true;\r\n            }\r\n        }\r\n        if (!ast.computed) {\r\n            safeProperty(ast.property.value);\r\n            if (createNewElement) {\r\n                util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(util_1.default.nonComputedMember(noComp, ast.property.value)), util_1.default.concatCode(util_1.default.nonComputedMember(noComp, ast.property.value), '{}'));\r\n            }\r\n            util_1.default.conditionIsRight(this.state.body, noComp, util_1.default.concatCode(id, 'safeObject(' + util_1.default.nonComputedMember(noComp, ast.property.value) + ')'));\r\n            if (context) {\r\n                context.name = ast.property.value;\r\n                context.computed = false;\r\n            }\r\n        }\r\n        return id;\r\n    };\r\n    /**\r\n     * 函数类词法树编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.functionCompile = function (ast) {\r\n        var _this = this;\r\n        var callContext, callee, args;\r\n        if (ast.pipe) {\r\n            callee = this.pipeCompile(ast.callee.value);\r\n            args = ast.arguments.map(function (val) {\r\n                return _this.handelTree(val);\r\n            });\r\n            return callee + '(' + args.join(',') + ')';\r\n        }\r\n        if (!ast.pipe) {\r\n            callContext = { context: undefined, name: undefined, computed: undefined };\r\n            callee = this.handelTree(ast.callee, callContext);\r\n            args = ast.arguments.map(function (val) {\r\n                return 'safeObject(' + _this.handelTree(val) + ')'; //检测函数参数是否安全\r\n            });\r\n            // console.log(callContext);\r\n            if (callContext.name) {\r\n                this.state.body.push('safeObject(' + callContext.context + ');');\r\n                if (callContext.computed) {\r\n                    callee = util_1.default.computedMember(callContext.context, callContext.name);\r\n                }\r\n                else {\r\n                    callee = util_1.default.nonComputedMember(callContext.context, callContext.name);\r\n                }\r\n            }\r\n            //检测函数是否安全\r\n            this.state.body.push('safeFunction(' + callee + ');');\r\n            //safeObject 检测函数返回值是否安全\r\n            return callee + ' && safeObject(' + callee + '(' + args.join(',') + '))';\r\n        }\r\n    };\r\n    /**\r\n     *含有等号等符号类词法树编译\r\n     * @param ast\r\n     * @returns {any}\r\n     */\r\n    ASTCompile.prototype.assigmentCompile = function (ast) {\r\n        var left, leftCon = { context: undefined, name: undefined, computed: undefined };\r\n        this.handelTree(ast.left, leftCon, true);\r\n        if (leftCon.computed) {\r\n            left = util_1.default.computedMember(leftCon.context, leftCon.name);\r\n        }\r\n        else {\r\n            left = util_1.default.nonComputedMember(leftCon.context, leftCon.name);\r\n        }\r\n        // console.log(leftCon, left);\r\n        //safeObject 用于检测表达式右侧是否安全\r\n        return util_1.default.concatCode(left, 'safeObject(' + this.handelTree(ast.right) + ')');\r\n    };\r\n    /**\r\n     * 含有一元运算符的编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.unaryCompile = function (ast) {\r\n        return ast.operator + '(' + 'isUndefined(' + this.handelTree(ast.value) + '))';\r\n    };\r\n    /**\r\n     * 二元运算符编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.binaryCompile = function (ast) {\r\n        if (util_1.default.inStr(ast.operator, '+-')) {\r\n            return '(isUndefined(' + this.handelTree(ast.left) + ')' + ast.operator + 'isUndefined(' + this.handelTree(ast.right) + '))';\r\n        }\r\n        return '(' + this.handelTree(ast.left) + ast.operator + this.handelTree(ast.right) + ')';\r\n    };\r\n    /**\r\n     * 逻辑运算符编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.logicalCompile = function (ast) {\r\n        var id = this.incrementId();\r\n        this.state.body.push(util_1.default.concatCode(id, this.handelTree(ast.left)));\r\n        util_1.default.conditionIsRight(this.state.body, ast.operator == '&&' ? id : util_1.default.notExist(id), util_1.default.concatCode(id, this.handelTree(ast.right)));\r\n        return id;\r\n    };\r\n    /**\r\n     * 三元运算符编译\r\n     * @param ast\r\n     * @returns {string}\r\n     */\r\n    ASTCompile.prototype.ternaryCompile = function (ast) {\r\n        var id = this.incrementId();\r\n        var id2 = this.incrementId();\r\n        this.state.body.push(util_1.default.concatCode(id2, this.handelTree(ast.boolean_expression)));\r\n        util_1.default.conditionIsRight(this.state.body, id2, util_1.default.concatCode(id, this.handelTree(ast.true_value)));\r\n        util_1.default.conditionIsRight(this.state.body, util_1.default.notExist(id2), util_1.default.concatCode(id, this.handelTree(ast.error_value)));\r\n        return id;\r\n    };\r\n    /**\r\n     * 管道编译\r\n     * @param name\r\n     */\r\n    ASTCompile.prototype.pipeCompile = function (name) {\r\n        var ps = this.state.pipes;\r\n        if (!ps.hasOwnProperty('name')) {\r\n            ps[name] = this.incrementId(true);\r\n        }\r\n        return ps[name];\r\n    };\r\n    /**\r\n     * 判断pipes是否存在\r\n     */\r\n    ASTCompile.prototype.pipePrefix = function () {\r\n        var ps = this.state.pipes;\r\n        if (JSON.stringify(ps) == '{}') {\r\n            return '';\r\n        }\r\n        var arr = [];\r\n        for (var k in ps) {\r\n            arr.push(ps[k] + '=' + 'pipe(' + util_1.default.wrapString(k) + ')');\r\n        }\r\n        // console.log(arr);\r\n        return 'var ' + arr.join(',') + ';';\r\n    };\r\n    /**\r\n     * compileId自增\r\n     */\r\n    ASTCompile.prototype.incrementId = function (flag) {\r\n        var id = util_1.default.compileId(this.state.compileId, this.state.echo, flag);\r\n        this.state.compileId++;\r\n        return id;\r\n    };\r\n    /**\r\n     * 字面量\r\n     */\r\n    ASTCompile.prototype.isLiteral = function () {\r\n        var arr = this.ast.body;\r\n        return !arr.length || ((arr.length === 1) &&\r\n            (arr[0].type === ast_config_1.dataType['2'] ||\r\n                arr[0].type === ast_config_1.dataType['3'] ||\r\n                arr[0].type === ast_config_1.dataType['4'] ||\r\n                arr[0].type === ast_config_1.dataType['5']));\r\n    };\r\n    /**\r\n     * 常量\r\n     * @param ast\r\n     */\r\n    ASTCompile.prototype.constantExpr = function (ast) {\r\n        var _this = this;\r\n        var cons, that = this;\r\n        switch (ast.type) {\r\n            case ast_config_1.dataType['1']://ASTBuilder.Init\r\n                cons = true;\r\n                arrayLike(ast.body);\r\n                break;\r\n            case ast_config_1.dataType['2']://ASTBuilder.MetaData\r\n                ast.constant = true;\r\n                break;\r\n            case ast_config_1.dataType['3']://ASTBuilder.Array\r\n                cons = true;\r\n                arrayLike(ast.value);\r\n                ast.constant = cons;\r\n                break;\r\n            case ast_config_1.dataType['4']://ASTBuilder.Object\r\n                cons = true;\r\n                ast.value.forEach(function (val) {\r\n                    _this.constantExpr(val.value);\r\n                    cons = cons && val.value.constant;\r\n                });\r\n                ast.constant = cons;\r\n                break;\r\n            case ast_config_1.dataType['5']: //ASTBuilder.Identifier\r\n            case ast_config_1.dataType['6']://ASTBuilder.This\r\n                ast.constant = false;\r\n                break;\r\n            case ast_config_1.dataType['7']://ASTBuilder.Member\r\n                this.constantExpr(ast.object);\r\n                if (ast.computed) {\r\n                    this.constantExpr(ast.property);\r\n                }\r\n                ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);\r\n                break;\r\n            case ast_config_1.dataType['8']://ASTBuilder.Function\r\n                cons = ast.pipe;\r\n                arrayLike(ast.arguments);\r\n                ast.constant = cons;\r\n                break;\r\n            case ast_config_1.dataType['9']://ASTBuilder.Assignment\r\n                leftRight();\r\n                break;\r\n            case ast_config_1.dataType['10']://ASTBuilder.Unary\r\n                this.constantExpr(ast.value);\r\n                ast.constant = ast.value.constant;\r\n                break;\r\n            case ast_config_1.dataType['11']: //ASTBuilder.Binary\r\n            case ast_config_1.dataType['12']://ASTBuilder.Logical\r\n                leftRight();\r\n                break;\r\n            case ast_config_1.dataType['13']://ASTBuilder.Teranry\r\n                this.constantExpr(ast.boolean_expression);\r\n                this.constantExpr(ast.true_value);\r\n                this.constantExpr(ast.error_value);\r\n                ast.constant = ast.boolean_expression.constant && ast.true_value.constant && ast.error_value.constant;\r\n                break;\r\n        }\r\n        function arrayLike(array) {\r\n            array.forEach(function (val) {\r\n                that.constantExpr(val);\r\n                cons = cons && val.constant;\r\n            });\r\n            ast.constant = cons;\r\n        }\r\n        function leftRight() {\r\n            that.constantExpr(ast.left);\r\n            that.constantExpr(ast.right);\r\n            ast.constant = ast.left.constant && ast.right.constant;\r\n        }\r\n    };\r\n    return ASTCompile;\r\n}());\r\nexports.default = ASTCompile;\r\n/**\r\n * 检测是否是安全的属性名，例如constructor, __defineGetter__等\r\n * @param str\r\n */\r\nfunction safeProperty(str) {\r\n    var f = K.PROPERTY.some(function (val) {\r\n        return val === str;\r\n    });\r\n    if (f)\r\n        $log.error(str + '存在编译风险');\r\n}\r\n/**\r\n * 检测是否是安全的对象\r\n * @param obj\r\n */\r\nfunction safeObject(obj) {\r\n    if (obj == undefined)\r\n        return;\r\n    var f = K.WINDOW.every(function (val) {\r\n        return obj[val];\r\n    });\r\n    var f2 = K.NODE.every(function (val) {\r\n        return obj[val];\r\n    });\r\n    if (f || f2 || obj.constructor == obj || obj.getOwnPropertyDescriptor || obj.getOwnPropertyNames)\r\n        $log.error(obj + '存在编译风险');\r\n    return obj;\r\n}\r\n/**\r\n * 检查函数是否安全\r\n * @param fun\r\n */\r\nfunction safeFunction(fun) {\r\n    var f = K.FUN.some(function (val) {\r\n        return val == fun;\r\n    });\r\n    if (f || fun.constructor == fun)\r\n        $log.error(fun + '存在编译风险');\r\n}\r\n/**\r\n * 判断目标是否为undefined\r\n * @param target\r\n * @param value\r\n * @returns {any}\r\n */\r\nfunction isUndefined(target, value) {\r\n    if (value === void 0) { value = 0; }\r\n    return typeof target === 'undefined' ? value : target;\r\n}\r\n/**\r\n * 根据管道名称返回管道处理函数\r\n * @param name 管道名称\r\n */\r\nfunction pipe(name) {\r\n    // console.log(ps);\r\n    return ps[name];\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/parse/astCompile.ts\n// module id = 28\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\nvar lexer_config_1 = require(\"../config/lexer_config\");\r\n/**\r\n * 此法解析器，用于解析{{a + b}} 之类的插值运算\r\n */\r\nvar Lexer = /** @class */ (function () {\r\n    function Lexer() {\r\n        this.index = 0;\r\n        this.now = undefined;\r\n        this.tokens = [];\r\n        this.text = '';\r\n    }\r\n    /**\r\n     * 词法解析函数\r\n     * @param text\r\n     * @returns {Array<any>}\r\n     */\r\n    Lexer.prototype.lex = function (text) {\r\n        this.text = text;\r\n        while (this.index < this.text.length) {\r\n            this.now = this.text.charAt(this.index);\r\n            if (util_1.default.whichType(this.now) == 'number' ||\r\n                (this.now === '.' && util_1.default.whichType(util_1.default.nextLeter(this.index, this.text)))) {\r\n                this.loopNumber();\r\n            }\r\n            else if (util_1.default.whichType(this.now) == 'string') {\r\n                this.loopString(this.now);\r\n            }\r\n            else if (util_1.default.whichType(this.now) == 'letter') {\r\n                this.loopLetter();\r\n            }\r\n            else if (util_1.default.isWhiteSpace(this.now)) {\r\n                this.index++;\r\n            }\r\n            else if (util_1.default.inStr(this.now, '[],{}.:()?;')) {\r\n                this.pushObj();\r\n            }\r\n            else {\r\n                this.loopOperator();\r\n            }\r\n        }\r\n        return this.tokens;\r\n    };\r\n    /**\r\n     * 添加词法解析对象\r\n     */\r\n    Lexer.prototype.pushObj = function () {\r\n        this.tokens.push({\r\n            text: this.now,\r\n            value: this.now\r\n        });\r\n        this.index++;\r\n    };\r\n    /**\r\n     * 获取下一个字符\r\n     * @param n\r\n     * @returns {string|boolean}\r\n     */\r\n    Lexer.prototype.nextStr = function (n) {\r\n        if (n === void 0) { n = 1; }\r\n        return (this.index + n < this.text.length) ?\r\n            this.text.charAt(this.index + n) :\r\n            false;\r\n    };\r\n    /**\r\n     * 遍历数字类\r\n     */\r\n    Lexer.prototype.loopNumber = function () {\r\n        var number = '';\r\n        while (this.index < this.text.length) {\r\n            var now = this.text.charAt(this.index).toLowerCase();\r\n            if (util_1.default.whichType(now) == 'number' || now === '.') {\r\n                number += now;\r\n            }\r\n            else {\r\n                var next = util_1.default.nextLeter(this.index, this.text);\r\n                var prev = number.charAt(number.length - 1);\r\n                if (now == 'e' && util_1.default.isExponent(next)) {\r\n                    number += now;\r\n                }\r\n                else if (util_1.default.isExponent(now) && prev === 'e' && next && util_1.default.isNumber(next)) {\r\n                    number += now;\r\n                }\r\n                else if (util_1.default.isExponent(now) && prev === 'e' && (!next || !util_1.default.isNumber(next))) {\r\n                    $log.error(\"指数格式错误！\");\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            this.index++;\r\n        }\r\n        this.tokens.push({\r\n            text: number,\r\n            value: Number(number)\r\n        });\r\n    };\r\n    /**\r\n     * 遍历字符串类，'\"abc\"'\r\n     */\r\n    Lexer.prototype.loopString = function (quote) {\r\n        this.index++;\r\n        var string = '', \r\n        //避免单独的操作符匹配错误，例如'\"!\"'\r\n        raw = quote;\r\n        while (this.index < this.text.length) {\r\n            var now = this.text.charAt(this.index);\r\n            raw += now;\r\n            if (now == quote) {\r\n                this.index++;\r\n                this.tokens.push({\r\n                    text: raw,\r\n                    value: string\r\n                });\r\n                return;\r\n            }\r\n            else if (now == lexer_config_1.SPECIALS[now]) {\r\n                string += lexer_config_1.SPECIALS[now];\r\n            }\r\n            else {\r\n                string += now;\r\n            }\r\n            this.index++;\r\n        }\r\n        $log.error('无法匹配的符号');\r\n    };\r\n    /**\r\n     * 字符类, 'abc_$'\r\n     */\r\n    Lexer.prototype.loopLetter = function () {\r\n        var letter = '';\r\n        while (this.index < this.text.length) {\r\n            var now = this.text.charAt(this.index);\r\n            if (util_1.default.isLetter(now) || util_1.default.isNumber(now)) {\r\n                letter += now;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            this.index++;\r\n        }\r\n        // 针对boolean,null,undefined\r\n        var v = lexer_config_1.LETTER.hasOwnProperty(letter) ? lexer_config_1.LETTER[letter] : letter;\r\n        this.tokens.push({\r\n            text: letter,\r\n            identifier: true,\r\n            value: v\r\n        });\r\n    };\r\n    /**\r\n     * 操作符，+- ！==\r\n     */\r\n    Lexer.prototype.loopOperator = function () {\r\n        var str = this.now, str2 = this.now + this.nextStr(1), str3 = this.now + this.nextStr(1) + this.nextStr(2), op = lexer_config_1.OPERATORS[str], op2 = lexer_config_1.OPERATORS[str2], op3 = lexer_config_1.OPERATORS[str3];\r\n        if (op || op2 || op3) {\r\n            var ct = op3 ? str3 : (op2 ? str2 : str);\r\n            this.tokens.push({\r\n                text: ct,\r\n                value: ct\r\n            });\r\n            this.index += ct.length;\r\n        }\r\n        else {\r\n            $log.error('未识别的字符' + this.now);\r\n        }\r\n    };\r\n    return Lexer;\r\n}());\r\nexports.default = Lexer;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/parse/lexer.ts\n// module id = 29\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar astBuilder_1 = require(\"./astBuilder\");\r\nvar astCompile_1 = require(\"./astCompile\");\r\nvar Parser = /** @class */ (function () {\r\n    function Parser(lexer, pipes) {\r\n        this.lexer = lexer;\r\n        this.astBuilder = new astBuilder_1.default(this.lexer);\r\n        this.astCompile = new astCompile_1.default(this.astBuilder, pipes);\r\n    }\r\n    Parser.prototype.parse = function (text) {\r\n        return this.astCompile.compile(text);\r\n    };\r\n    return Parser;\r\n}());\r\nexports.default = Parser;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/parse/parser.ts\n// module id = 30\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar util_1 = require(\"../util\");\r\n/**\r\n * 执行管道过滤操作\r\n */\r\nvar Pipe = /** @class */ (function () {\r\n    function Pipe() {\r\n        this.pipes = {};\r\n    }\r\n    /**\r\n     * 注册管道函数\r\n     * @param name 字符串或者对象\r\n     * @param factory\r\n     */\r\n    Pipe.prototype.register = function (name, factory) {\r\n        // this.pipes = {};\r\n        //允许对象方式注册多个pipe\r\n        if (util_1.default.type(name) == 'object') {\r\n            for (var i in name) {\r\n                return this.register(i, name[i]);\r\n            }\r\n        }\r\n        if (util_1.default.type(name) == 'string') {\r\n            if (util_1.default.type(factory) != 'function')\r\n                $log.error('注册的管道函数类型为function');\r\n            var pipe = factory();\r\n            this.pipes[name] = pipe;\r\n            return pipe;\r\n        }\r\n    };\r\n    /**\r\n     * 管道执行函数\r\n     * @param name\r\n     */\r\n    Pipe.prototype.pipe = function (name) {\r\n        return this.pipes[name];\r\n    };\r\n    Pipe.prototype.returnPipes = function () {\r\n        return this.pipes;\r\n    };\r\n    return Pipe;\r\n}());\r\nexports.default = Pipe;\r\n// const pipe = new Pipe();\r\nfunction $pipeProvider($provider) {\r\n    var pipes = {};\r\n    this.register = function (name, factory) {\r\n        //允许对象方式注册多个pipe\r\n        if (util_1.default.type(name) == 'object') {\r\n            for (var i in name) {\r\n                return this.register(i, name[i]);\r\n            }\r\n        }\r\n        if (util_1.default.type(name) == 'string') {\r\n            if (util_1.default.type(factory) != 'function')\r\n                $log.error('注册的管道函数类型为function');\r\n            return $provider.factory(name + 'Pipe', factory);\r\n        }\r\n    };\r\n    this.$get = ['$injector', function ($injector) {\r\n            return function (name) {\r\n                return $injector.get(name + 'Pipe');\r\n            };\r\n        }];\r\n}\r\nexports.$pipeProvider = $pipeProvider;\r\n$pipeProvider.$inject = ['$provider'];\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pipe/pipe.ts\n// module id = 31\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar store_1 = require(\"../store\");\r\nvar store = new store_1.default();\r\nvar Router = /** @class */ (function () {\r\n    function Router(url, routers) {\r\n        this.url = url;\r\n        this.routers = this._parseRouters(routers);\r\n        this.nowRouter = this._getNowRouter(url, this.routers);\r\n        this.params = this.nowRouter ? (this.nowRouter.params ? this.nowRouter.params : {}) : {};\r\n    }\r\n    /**\r\n     * 获取当前路由\r\n     * @param url 浏览器pathname\r\n     * @param routers 路由集合\r\n     */\r\n    Router.prototype._getNowRouter = function (url, routers) {\r\n        if (url.includes('?')) {\r\n            url = url.substr(0, url.lastIndexOf('?'));\r\n        }\r\n        return routers.filter(function (v) {\r\n            return url.match(v.info.regexp);\r\n        })[0];\r\n    };\r\n    Router.prototype._parseRouters = function (routers) {\r\n        var _this = this;\r\n        routers.forEach(function (v) {\r\n            var r = _this._pathToReg(v.path);\r\n            if (r != null) {\r\n                v.info = r;\r\n                _this.params = v.params || {};\r\n            }\r\n        });\r\n        return routers;\r\n    };\r\n    /**\r\n     * 转换路径为正则\r\n     * @param path 路径\r\n     */\r\n    Router.prototype._pathToReg = function (path) {\r\n        var ret = {\r\n            originalPath: path,\r\n            regexp: path\r\n        }, keys = ret.keys = [];\r\n        path = path\r\n            .replace(/([().])/g, '\\\\$1')\r\n            .replace(/(\\/)?:(\\w+)(\\*\\?|[?*])?/g, function (_, slash, key, option) {\r\n            var optional = (option === '?' || option === '*?') ? '?' : null;\r\n            var star = (option === '*' || option === '*?') ? '*' : null;\r\n            keys.push({ name: key, optional: !!optional });\r\n            slash = slash || '';\r\n            return ''\r\n                + (optional ? '' : slash)\r\n                + '(?:'\r\n                + (optional ? slash : '')\r\n                + (star && '(.+?)' || '([^/]+)')\r\n                + (optional || '')\r\n                + ')'\r\n                + (optional || '');\r\n        })\r\n            .replace(/([/$*])/g, '\\\\$1');\r\n        ret.regexp = new RegExp('^' + path + '$', '');\r\n        return ret;\r\n    };\r\n    /**\r\n     * 跳转到已存在的路由页面\r\n     * @param path 需要跳转的路径\r\n     */\r\n    Router.prototype.go = function (_a) {\r\n        var _b = _a.path, path = _b === void 0 ? '' : _b, _c = _a.params, params = _c === void 0 ? {} : _c;\r\n        updateRouterConfig(path, params);\r\n        this.hash(path);\r\n    };\r\n    /**\r\n     * url的hash\r\n     * @param path\r\n     */\r\n    Router.prototype.hash = function (path) {\r\n        if (!path) {\r\n            return window.location.hash;\r\n        }\r\n        window.location.hash = '#' + path;\r\n    };\r\n    /**\r\n     * 刷新当前路由\r\n     */\r\n    Router.prototype.reflesh = function () {\r\n        var hash = window.location.hash;\r\n        window.location.hash = '#';\r\n        window.location.hash = hash;\r\n    };\r\n    /**\r\n     * 返回\r\n     */\r\n    Router.prototype.back = function () {\r\n        window.history.back();\r\n    };\r\n    return Router;\r\n}());\r\nexports.default = Router;\r\n// 更新路由配置\r\nfunction updateRouterConfig(path, params) {\r\n    store.get('routerConfig').forEach(function (v) {\r\n        if (v.path == path) {\r\n            v.params = params;\r\n        }\r\n    });\r\n    store.data('routerConfig', store.get('routerConfig'));\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/router/index.ts\n// module id = 32\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../../log\");\r\nvar util_1 = require(\"../../util\");\r\nvar loader_1 = require(\"../loader\");\r\nvar loader = new loader_1.default();\r\n// 处理函数\r\nvar FN_REG = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\r\n// 处理空格\r\nvar SPACE_REG = /^\\s*(\\S+)\\s*$/;\r\n// 处理注释\r\nvar COMMENTS_REG = /(\\/\\*.*?\\*\\/)|(\\/\\/$)/mg;\r\nvar Injector = /** @class */ (function () {\r\n    function Injector() {\r\n    }\r\n    /**\r\n     * 模块注入函数\r\n     * @param moduleNames 模块名称\r\n     * @param strict 严格模式的判断，默认false\r\n     */\r\n    Injector.prototype.inject = function (moduleNames, strict) {\r\n        if (util_1.default.type(moduleNames) != 'array')\r\n            $log.error('模块的名称的参数为数组');\r\n        // 缓存data数据\r\n        var providerCache = { $injector: undefined, $provider: { data: undefined, provider: undefined } };\r\n        var providerInjecter = providerCache.$injector = injectAgency(providerCache, function () {\r\n            // $log.error('未知的provider'+JSON.stringify(depPath));\r\n        });\r\n        var dataCache = { $injector: undefined };\r\n        var dataInjecter = dataCache.$injector = injectAgency(dataCache, function (name) {\r\n            var provider = providerInjecter.get(name + 'Provider');\r\n            return dataInjecter.invoke(provider.$get, provider);\r\n        });\r\n        // 已经加载的模块\r\n        var loadedModules = new Map();\r\n        var cricle = false;\r\n        // provider依赖数组,[['数组名',['依赖项']]] [['a',['b']]]\r\n        var depPath = [];\r\n        // run 函数队列\r\n        var runQueue = [];\r\n        /**\r\n         * 处理函数的返回值\r\n         * @param fn\r\n         */\r\n        function handelReturn(fn) {\r\n            return function () {\r\n                var val = dataInjecter.invoke(fn);\r\n                if (util_1.default.type(val) == 'undefined') {\r\n                    $log.error('factory函数必须有返回值');\r\n                }\r\n                return val;\r\n            };\r\n        }\r\n        providerCache.$provider = {\r\n            data: function (key, val) {\r\n                if (key == 'hasOwnProperty' || key == '$injector' || key == '$provider')\r\n                    $log.error(key + '不能用于标识符');\r\n                dataCache[key] = val;\r\n                providerCache[key] = val;\r\n            },\r\n            provider: function (key, val) {\r\n                if (key == 'hasOwnProperty' || key == '$injector' || key == '$provider')\r\n                    $log.error(key + '不能用于标识符');\r\n                if (util_1.default.type(val) == 'function') {\r\n                    // val = instantiate(val);\r\n                    val = providerInjecter.instantiate(val);\r\n                }\r\n                providerCache[key + 'Provider'] = val;\r\n            },\r\n            factory: function (key, fn) {\r\n                this.provider(key, { $get: handelReturn(fn) });\r\n            },\r\n            value: function (key, val) {\r\n                this.factory(key, function () { return val; });\r\n            },\r\n            service: function (key, fn) {\r\n                this.factory(key, function () {\r\n                    return dataInjecter.instantiate(fn);\r\n                });\r\n            }\r\n        };\r\n        var listQueue = function (queues) {\r\n            queues.forEach(function (inq) {\r\n                var service = providerInjecter.get(inq[0]);\r\n                var method = inq[1];\r\n                var args = inq[2];\r\n                // const arr = [args[0], args[1]];\r\n                // providerCache.$provider[method].apply(providerCache.$provider, args);\r\n                service[method].apply(service, args);\r\n            });\r\n        };\r\n        moduleNames.forEach(function loadMobule(val) {\r\n            if (!loadedModules.get(val)) {\r\n                loadedModules.set(val, true);\r\n                if (util_1.default.type(val) == 'string') {\r\n                    var module_1 = loader.module(val);\r\n                    module_1.requires.forEach(loadMobule); // 递归其他的依赖模块\r\n                    listQueue(module_1._invokeQueue);\r\n                    listQueue(module_1._configQueue);\r\n                    runQueue = runQueue.concat(module_1._runQueue);\r\n                }\r\n                if (util_1.default.type(val) == 'function' || util_1.default.type(val) == 'array') {\r\n                    runQueue.push(providerInjecter.invoke(val));\r\n                }\r\n            }\r\n        });\r\n        //执行run函数队列\r\n        util_1.default.arrayCompact(runQueue).forEach(function (run) {\r\n            dataInjecter.invoke(run);\r\n        });\r\n        function injectAgency(cache, fn) {\r\n            /**\r\n             * 处理缓存\r\n             * @param name data或者provideer名称\r\n             */\r\n            function handelCache(name) {\r\n                handeldepPath(depPath);\r\n                if (cache.hasOwnProperty(name)) {\r\n                    return cache[name];\r\n                }\r\n                else {\r\n                    try {\r\n                        return (cache[name] = fn(name));\r\n                    }\r\n                    finally {\r\n                        if (cricle)\r\n                            delete cache[name];\r\n                    }\r\n                }\r\n            }\r\n            /**\r\n             * $inject内部的调用函数\r\n             * @param fn 注入的函数或数组\r\n             * @param obj 对象，fn为其属性\r\n             * @param local 用于覆盖$inject数组的item项\r\n             * @param name data或provider名称\r\n             */\r\n            function invoke(fn, obj, local, name) {\r\n                if (arguments.length == 1) {\r\n                    obj = null;\r\n                }\r\n                var args = annotate(fn, name).map(function (v) {\r\n                    if (util_1.default.type(v) == 'string')\r\n                        return (local && local.hasOwnProperty(v)) ? local[v] : handelCache(v);\r\n                    else\r\n                        $log.error('无效的标识符' + v + '，标识符应为字符串');\r\n                });\r\n                if (util_1.default.type(fn) == 'array') {\r\n                    fn = fn.slice(-1)[0];\r\n                }\r\n                return fn.apply(obj, args);\r\n            }\r\n            /**\r\n             * 实例化\r\n             * @param fn\r\n             * @param local\r\n             */\r\n            function instantiate(fn, local) {\r\n                var fn2 = util_1.default.type(fn) == 'array' ? fn.slice(-1)[0] : fn;\r\n                var instance = Object.create(fn2.prototype);\r\n                invoke(fn, instance, local);\r\n                return instance;\r\n            }\r\n            function hasKey(key) {\r\n                return dataCache.hasOwnProperty(key) || providerCache.hasOwnProperty(key + 'Provider');\r\n            }\r\n            return {\r\n                has: hasKey,\r\n                get: handelCache,\r\n                invoke: invoke,\r\n                annotate: annotate,\r\n                instantiate: instantiate\r\n            };\r\n        }\r\n        function handeldepPath(arr) {\r\n            if (arr.length) {\r\n                if (arr[arr.length - 1][1].includes(arr[0][0])) {\r\n                    var path = arr.map(function (v) {\r\n                        return v[0];\r\n                    });\r\n                    path.push(arr[0][0]);\r\n                    cricle = true;\r\n                    $log.error('发现循环依赖' + path.join('->'));\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * 装饰器函数\r\n         * @param fn 注入的函数\r\n         */\r\n        function annotate(fn, name) {\r\n            var arr = [];\r\n            if (util_1.default.type(fn) == 'array') {\r\n                if (fn.length)\r\n                    arr = fn.slice(0, fn.length - 1);\r\n                else\r\n                    arr = [];\r\n            }\r\n            if (util_1.default.type(fn) == 'function') {\r\n                if (strict) {\r\n                    $log.error('函数没有$inject属性，不能再严格模式下使用');\r\n                }\r\n                else if (fn.$inject) {\r\n                    arr = fn.$inject;\r\n                }\r\n                else {\r\n                    var fns = (fn.toString().replace(COMMENTS_REG, '')).match(FN_REG);\r\n                    arr = util_1.default.arrayCompact(fns[1].split(',')).map(function (a) {\r\n                        return a.match(SPACE_REG)[1];\r\n                    });\r\n                    if (name != null) {\r\n                        depPath.push([name, arr]);\r\n                    }\r\n                }\r\n            }\r\n            // console.log(arr)\r\n            return arr;\r\n        }\r\n        return dataInjecter;\r\n    };\r\n    return Injector;\r\n}());\r\nexports.default = Injector;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/store/injector/index.ts\n// module id = 33\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HandelCoding = /** @class */ (function () {\r\n    function HandelCoding() {\r\n    }\r\n    /**\r\n     * 组合对象属性语句，类似于a.b\r\n     * @param left\r\n     * @param right\r\n     * @returns {any}\r\n     */\r\n    HandelCoding.prototype.nonComputedMember = function (left, right) {\r\n        return '(' + left + ').' + right;\r\n    };\r\n    /**\r\n     *\r\n     * @param left\r\n     * @param right\r\n     * @returns {any}\r\n     */\r\n    HandelCoding.prototype.computedMember = function (left, right) {\r\n        return '(' + left + ')[' + right + ']';\r\n    };\r\n    /**\r\n     * 组合成条件不存在的语句 例如!(str)\r\n     * @param expression any\r\n     * @returns {any}\r\n     */\r\n    HandelCoding.prototype.notExist = function (expression) {\r\n        return '!(' + expression + ')';\r\n    };\r\n    /**\r\n     * 组合js表达式,例如组合成 var a = 123;\r\n     * @param token\r\n     * @param value\r\n     * @returns {any}\r\n     */\r\n    HandelCoding.prototype.concatCode = function (token, value) {\r\n        return token + '=' + value + ';';\r\n    };\r\n    /**\r\n    * 此方法用于模拟if语句，判断参数是否成立，并组装成if语句\r\n    * @param condition\r\n    * @param statement\r\n    */\r\n    HandelCoding.prototype.conditionIsRight = function (array, condition, statement) {\r\n        array.push('if(', condition, '){', statement, '}');\r\n    };\r\n    /**\r\n     * 该函数每次被调用，参数id递增\r\n     * @param id\r\n     * @return {string}\r\n     */\r\n    HandelCoding.prototype.compileId = function (id, arr, flag) {\r\n        var uid = 'compileId' + id;\r\n        if (!flag) {\r\n            arr.unshift(uid);\r\n        }\r\n        return uid;\r\n    };\r\n    return HandelCoding;\r\n}());\r\nexports.default = HandelCoding;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/handelCoding.ts\n// module id = 34\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $log = require(\"../log\");\r\nvar HandelType = /** @class */ (function () {\r\n    function HandelType() {\r\n    }\r\n    /**\r\n     * 判断数据类型\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    HandelType.prototype.type = function (str) {\r\n        var toString = Object.prototype.toString, map = {\r\n            '[object Boolean]': 'boolean',\r\n            '[object Number]': 'number',\r\n            '[object String]': 'string',\r\n            '[object Function]': 'function',\r\n            '[object Array]': 'array',\r\n            '[object Date]': 'date',\r\n            '[object RegExp]': 'regExp',\r\n            '[object Undefined]': 'undefined',\r\n            '[object Null]': 'null',\r\n            '[object Object]': 'object',\r\n            '[object Map]': 'map',\r\n            '[object Set]': 'set',\r\n            '[object Symbol]': 'symbol'\r\n        };\r\n        return map[toString.call(str)];\r\n    };\r\n    /**\r\n     * 判断输入的内容是否在0~9之间\r\n     * @param str\r\n     * @returns {boolean}\r\n     */\r\n    HandelType.prototype.isNumber = function (str) {\r\n        // if(Number(str).toString() != 'NaN') return true;\r\n        // else return false;\r\n        if (this.type(str) != 'string')\r\n            return false;\r\n        else\r\n            return str >= '0' && str <= '9';\r\n    };\r\n    /**\r\n     * 判断是否符合指数特征\r\n     * @param ch\r\n     * @returns {boolean|Boolean}\r\n     */\r\n    HandelType.prototype.isExponent = function (ch) {\r\n        return ch === '+' || ch === '-' || this.isNumber(ch);\r\n    };\r\n    /**\r\n     * 判断是否属于特定字符：字母，_, $\r\n     * @param str\r\n     * @returns {boolean}\r\n     */\r\n    HandelType.prototype.isLetter = function (str) {\r\n        var arr = str.split('');\r\n        return arr.every(function (i) {\r\n            return (i >= 'a' && i <= 'z') || (i >= 'A' && i <= 'Z') || (i === '_') || (i === '$');\r\n        });\r\n    };\r\n    /**\r\n     * 判断字符是否属于空格\r\n     * @param str\r\n     * @returns {boolean}\r\n     */\r\n    HandelType.prototype.isWhiteSpace = function (str) {\r\n        return str === ' ' || str === '\\r' || str === '\\t' || str === '\\n' || str === '\\v' || str === '\\u00A0';\r\n    };\r\n    /**\r\n     * 判断被解析的字符串属于那种数据类型\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    HandelType.prototype.whichType = function (str) {\r\n        if (this.type(str) != 'string')\r\n            $log.error('数据类型错误' + str);\r\n        // '12', '12.12', '0.12e2'\r\n        if (this.isNumber(str) || str === '.')\r\n            return 'number';\r\n        else if (str.charAt(0) === \"'\" || str.charAt(0) === '\"')\r\n            return 'string';\r\n        else if (this.isLetter(str))\r\n            return 'letter';\r\n        else if ((str === '[' || str === ']' || str === ','))\r\n            return 'array';\r\n        else if ((str === '{' || str === '}' || str === ':'))\r\n            return 'object';\r\n        else if (str === '(' || str === ')')\r\n            return 'function';\r\n        else\r\n            return 'other';\r\n    };\r\n    return HandelType;\r\n}());\r\nexports.default = HandelType;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/handelType.ts\n// module id = 35\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar mixins_1 = require(\"../mixins\");\r\nvar handelType_1 = require(\"./handelType\");\r\nvar handelCoding_1 = require(\"./handelCoding\");\r\nvar $log = require(\"../log\");\r\nvar util = /** @class */ (function () {\r\n    function util() {\r\n    }\r\n    /**\r\n     * 判断两个变量是否相等，只能匹配简单的数据类型\r\n     * @param str1\r\n     * @param str2\r\n     * @returns {boolean}\r\n     */\r\n    util.prototype.isEqual = function (str1, str2) {\r\n        return JSON.stringify(str1) === JSON.stringify(str2);\r\n    };\r\n    /**\r\n     * 判断两个变量是否相等\r\n     * @param newVal\r\n     * @param oldVal\r\n     * @param equalStatus 为TRUE,则深层次比较\r\n     */\r\n    util.prototype.areEqual = function (newVal, oldVal, equalStatus) {\r\n        if (equalStatus) {\r\n            return this.compare(newVal, oldVal);\r\n        }\r\n        else {\r\n            // return (newVal === oldVal) && (typeof newVal == 'number' && typeof oldVal == 'number' && !isNaN(newVal) && !isNaN(oldVal)) && (newVal != NaN && oldVal != NaN);\r\n            if (newVal.toString() == 'NaN') {\r\n                return true;\r\n            }\r\n            else {\r\n                return newVal === oldVal;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 判断两个变量是否相等, 此方法用于相同数据类型的变量比较\r\n     * @param a\r\n     * @param b\r\n     * @returns {boolean}\r\n     */\r\n    util.prototype.compare = function (a, b) {\r\n        var pt = /undefined|number|string|boolean/, fn = /^(function\\s*)(\\w*\\b)/, cr = \"constructor\", cn = \"childNodes\", pn = \"parentNode\";\r\n        if (pt.test(typeof a) || pt.test(typeof b) || a === null || b === null) {\r\n            return a === b || (isNaN(a) && isNaN(b)); //为了方便，此处假定NaN == NaN\r\n        }\r\n        if (a[cr] !== b[cr]) {\r\n            return false;\r\n        }\r\n        switch (a[cr]) {\r\n            case Date:\r\n                return a.valueOf() === b.valueOf();\r\n            case Function:\r\n                return a.toString().replace(fn, '$1') === b.toString().replace(fn, '$1'); //硬编码中声明函数的方式会影响到toString的结果，因此用正则进行格式化\r\n            case Array:\r\n                if (a.length !== b.length) {\r\n                    return false;\r\n                }\r\n                for (var i = 0; i < a.length; i++) {\r\n                    // if(!ce(a[i],b[i])){\r\n                    // \treturn false;\r\n                    // }\r\n                    if (a[i].toString() == b[i].toString()) { }\r\n                }\r\n                break;\r\n            default:\r\n                var alen = 0, blen = 0, d = void 0;\r\n                if (a === b) {\r\n                    return true;\r\n                }\r\n                if (a[cn] || a[pn] || b[cn] || b[pn]) {\r\n                    return a === b;\r\n                }\r\n                for (d in a) {\r\n                    alen++;\r\n                }\r\n                for (d in b) {\r\n                    blen++;\r\n                }\r\n                if (alen !== blen) {\r\n                    return false;\r\n                }\r\n                for (d in a) {\r\n                    if (a[d].toString() != b[d].toString()) {\r\n                        return false;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * 浅拷贝，才方法只针对普通对象{}和数组[]\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    util.prototype.clone = function (str) {\r\n        return JSON.parse(JSON.stringify(str));\r\n    };\r\n    util.prototype.deepClone = function (data) {\r\n        var t = this.type(data), o, i, ni;\r\n        if (t === 'array') {\r\n            o = [];\r\n        }\r\n        else if (t === 'object') {\r\n            o = {};\r\n        }\r\n        else {\r\n            return data;\r\n        }\r\n        if (t === 'array') {\r\n            for (i = 0, ni = data.length; i < ni; i++) {\r\n                o.push(this.deepClone(data[i]));\r\n            }\r\n            return o;\r\n        }\r\n        else if (t === 'object') {\r\n            for (i in data) {\r\n                o[i] = this.deepClone(data[i]);\r\n            }\r\n            return o;\r\n        }\r\n    };\r\n    /**\r\n     * 字符串或函数的执行次数\r\n     * @param obj:类型为Function, String\r\n     */\r\n    util.prototype.repeatObj = function (obj, manyTime) {\r\n        if (this.type(manyTime) != 'number') {\r\n            $log.error('函数repeat的参数manyTime类型为number');\r\n        }\r\n        switch (this.type(obj)) {\r\n            case 'string':\r\n                return obj.repeat(manyTime);\r\n            case 'function':\r\n                var arr = new Array(manyTime);\r\n                for (var i = 0; i < arr.length; i++) {\r\n                    obj();\r\n                }\r\n                break;\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    /**\r\n     * 对每个scope的children进行遍历\r\n     * @param cb\r\n     * @param scope\r\n     * @returns {boolean}\r\n     */\r\n    util.prototype.everyScope = function (cb, scope) {\r\n        if (cb(scope)) {\r\n            return scope.$children.every(function (child) {\r\n                return child.everyScope(cb, scope);\r\n            });\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * 处理scope的event事件\r\n     * @param eventName\r\n     * @param arr\r\n     * @param scope\r\n     */\r\n    util.prototype.handelEvent = function (eventName, arr, scope) {\r\n        // if(arr[eventName] == undefined){\r\n        // \t$log.error('事件'+eventName+'不存在');\r\n        // }\r\n        // const event = {name: eventName};\r\n        var listener = arr[eventName] || function () { };\r\n        try {\r\n            listener(scope);\r\n        }\r\n        catch (e) {\r\n            $log.error(e);\r\n        }\r\n    };\r\n    /**\r\n     * 对象转map对象\r\n     * @param obj\r\n     * @returns {Map}\r\n     */\r\n    util.prototype.objToMap = function (obj) {\r\n        if (this.type(obj) != 'object')\r\n            return;\r\n        var map = new Map();\r\n        for (var i in obj) {\r\n            map.set(i, obj[i]);\r\n        }\r\n        return map;\r\n    };\r\n    /**\r\n     * map对象转普通对象\r\n     * @param map\r\n     * @returns {{}}\r\n     */\r\n    util.prototype.mapToObj = function (map) {\r\n        if (this.type(map) != 'map')\r\n            return;\r\n        var obj = {};\r\n        map.forEach(function (val, key) {\r\n            obj[key] = val;\r\n        });\r\n        return obj;\r\n    };\r\n    /**\r\n     * 此方法用于获取首位不写0浮点数的下一位字符\r\n     * @param index\r\n     * @param str\r\n     * @returns {string|boolean}\r\n     */\r\n    util.prototype.nextLeter = function (index, str) {\r\n        return (index < str.length - 1) ? str.charAt(index + 1) : false;\r\n    };\r\n    /**\r\n     * 将string类型的数据外层包装\\\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    util.prototype.wrapString = function (str) {\r\n        if (this.type(str) == 'string') {\r\n            return '\\'' + str + '\\'';\r\n        }\r\n        else if (this.type(str) == 'null') {\r\n            return 'null';\r\n        }\r\n        else {\r\n            return str;\r\n        }\r\n    };\r\n    /**\r\n     * 判断数组第一个元素是否与有某个元素相等，如果是则将其移除\r\n     * @param str\r\n     * @param arr\r\n     * @returns {any[]}\r\n     */\r\n    util.prototype.expect = function (arr) {\r\n        var str = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            str[_i - 1] = arguments[_i];\r\n        }\r\n        var that = this;\r\n        function es(val) {\r\n            return that.exitFirst(arr, val);\r\n        }\r\n        // console.log(str);\r\n        if (str.some(es)) {\r\n            return arr.shift();\r\n        }\r\n        // if(this.exitFirst(arr, str)) return arr.shift();\r\n    };\r\n    /**\r\n     * 在expect函数基础上，如果目标元素不匹配报错\r\n     * @param str\r\n     * @param arr\r\n     * @returns {any}\r\n     */\r\n    util.prototype.consume = function (arr, str) {\r\n        var t = this.expect(arr, str);\r\n        if (!t)\r\n            $log.error('词法解析错误' + str);\r\n        return t;\r\n    };\r\n    /**\r\n     * 判断数组第一个元素是否与有某个元素相等，相等则返回首个数组首个元素\r\n     * @param str\r\n     * @param arr\r\n     * @returns {number}\r\n     */\r\n    util.prototype.exit = function (str, arr) {\r\n        if (this.type(arr) != 'array')\r\n            return;\r\n        if (!arr.length)\r\n            return;\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (str == arr[i]['text']) {\r\n                return i;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 只针对对象的第一个元素\r\n     * @param arr\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    util.prototype.exitFirst = function (arr, str) {\r\n        if (this.type(arr) != 'array')\r\n            return;\r\n        if (!arr.length)\r\n            return;\r\n        if (!str || (str == arr[0]['text'])) {\r\n            return arr[0];\r\n        }\r\n    };\r\n    /**\r\n     * 数组去重，针对普通类型的数组\r\n     * @param arr\r\n     * @returns {Array}\r\n     */\r\n    util.prototype.uArray = function (arr) {\r\n        var newArr = [];\r\n        var set = new Set(arr);\r\n        set.forEach(function (val) {\r\n            newArr.push(val);\r\n        });\r\n        return newArr;\r\n    };\r\n    /**\r\n     * 获取数组中某个元素的下标\r\n     * @param data\r\n     * @param array\r\n     * @returns {any}\r\n     */\r\n    util.prototype.arrayItem = function (data, array) {\r\n        if (this.type(array) != 'array')\r\n            return;\r\n        var item = [];\r\n        for (var i = 0; i < array.length; i++) {\r\n            if (array[i].toString() === data.toString())\r\n                item.push(i);\r\n        }\r\n        // console.log(item,array);\r\n        return item;\r\n    };\r\n    /**\r\n     * 获取数组中某个对象元素的下标\r\n     */\r\n    util.prototype.arrayItem2 = function (data, array) {\r\n        if (this.type(array) != 'array')\r\n            return;\r\n        var item;\r\n        for (var i = 0; i < array.length; i++) {\r\n            if (array[i]['name'] === data)\r\n                item = i;\r\n        }\r\n        return item;\r\n    };\r\n    /**\r\n     * 获取数组中某个重复元素的最后下标\r\n     */\r\n    util.prototype.arrayLastItem = function (data, array) {\r\n        if (this.type(array) != 'array')\r\n            return;\r\n        var item;\r\n        array = array.reverse();\r\n        for (var i = 0; i < array.length; i++) {\r\n            if (array[i] === data)\r\n                item = i;\r\n        }\r\n        return item;\r\n    };\r\n    /**\r\n     * 去除数组中的重复元素\r\n     * @param data\r\n     * @param array\r\n     * @returns {Array}\r\n     */\r\n    util.prototype.arraySplice = function (data, array) {\r\n        if (this.type(array) != 'array')\r\n            return;\r\n        var arr = this.arrayItem(data, array);\r\n        for (var i = 0; i < arr.length; i++) {\r\n            array.splice(arr[i], 1);\r\n        }\r\n        return array;\r\n    };\r\n    /**\r\n     * 去除数组中的'',null,undefined\r\n     */\r\n    util.prototype.arrayCompact = function (arr) {\r\n        var newArr = [];\r\n        arr.forEach(function (v) {\r\n            if (v != '' && v != null && v != undefined)\r\n                newArr.push(v);\r\n        });\r\n        return newArr;\r\n    };\r\n    /**\r\n     * 获取两个数组的交集\r\n     * @param a\r\n     * @param b\r\n     */\r\n    util.prototype.intersection = function (a, b) {\r\n        return a.filter(function (v) { return b.includes(v); });\r\n    };\r\n    /**\r\n     * 对字符串进行解析\r\n     * @param str\r\n     * @returns {Function}\r\n     */\r\n    util.prototype.parseString = function (str) {\r\n        if (this.type(str) != 'string')\r\n            return;\r\n        return new Function(\"return \" + str);\r\n    };\r\n    /**\r\n     * 用于判断对象是否含有某个属性,并返回与表达式 ‘scope’ && （\\‘a\\’ in 'scope'）\r\n     * @param obj\r\n     * @param ele\r\n     * @returns {any}\r\n     */\r\n    util.prototype.hasProperty = function (obj, ele) {\r\n        return obj + ' && (' + this.wrapString(ele) + ' in ' + obj + ')';\r\n    };\r\n    /**\r\n     * 判断所传字符串与目标字符串是否相等\r\n     * @param target\r\n     * @param str\r\n     * @returns {any}\r\n     */\r\n    util.prototype.inStr = function (target, str) {\r\n        return str.includes(target);\r\n    };\r\n    /**\r\n     * 获取对象的键\r\n     * @param obj\r\n     */\r\n    util.prototype.objKey = function (obj) {\r\n        var arr = [];\r\n        for (var i in obj) {\r\n            arr.push(i);\r\n        }\r\n        return arr;\r\n    };\r\n    /**\r\n     * 获取对象的值\r\n     * @param obj\r\n     */\r\n    util.prototype.objVal = function (obj) {\r\n        var arr = [];\r\n        for (var i in obj) {\r\n            arr.push(obj[i]);\r\n        }\r\n        return arr;\r\n    };\r\n    /**\r\n     * 判断对象是否为空\r\n     * @param obj 对象\r\n     */\r\n    util.prototype.isEmpty = function (obj) {\r\n        if (this.type(obj) != 'object')\r\n            return;\r\n        if (JSON.stringify(obj) == '{}')\r\n            return true;\r\n        return false;\r\n    };\r\n    /**\r\n     * 移除对象中某些元素\r\n     * @param obj 对象\r\n     * @param ...str  需要移除的元素\r\n     */\r\n    util.prototype.expectSome = function (obj) {\r\n        var str = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            str[_i - 1] = arguments[_i];\r\n        }\r\n        var newObj = this.clone(obj);\r\n        str.forEach(function (v) {\r\n            delete newObj[v];\r\n        });\r\n        return newObj;\r\n    };\r\n    /**\r\n     * x-a转驼峰xA\r\n     * @param str\r\n     */\r\n    util.prototype.cameCase = function (str) {\r\n        return str.replace(/\\-(\\w)/g, function (x) { return x.slice(1).toUpperCase(); });\r\n    };\r\n    /**\r\n     * 驼峰xA转x-a\r\n     * @param str\r\n     */\r\n    util.prototype._cameCase = function (str) {\r\n        return str.replace(/([A-Z])/g, \"-$1\");\r\n    };\r\n    /**\r\n     * 合并对象\r\n     * @param target\r\n     * @param source\r\n     */\r\n    util.prototype.extend = function (target, source) {\r\n        for (var i in source) {\r\n            target[i] = source[i];\r\n        }\r\n        return target;\r\n    };\r\n    /**\r\n     * 去除空格 回车 换行\r\n     * @param str\r\n     */\r\n    util.prototype.trimStr = function (str) {\r\n        var res = str.trim();\r\n        res = res.replace(/\\s+/g, '');\r\n        res = res.replace(/[\\r\\n]/g, '');\r\n        return res;\r\n    };\r\n    /**\r\n     * 获取当前时间 20170516\r\n     */\r\n    util.prototype.now = function () {\r\n        var date = new Date(), year = date.getFullYear().toString(), month = (date.getMonth() + 1).toString(), day = date.getDate().toString();\r\n        month = parseInt(month) < 10 ? '0' + month : month;\r\n        return year + month + day + '0';\r\n    };\r\n    util.prototype.page = function () {\r\n        return {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        };\r\n    };\r\n    /**\r\n     * 将class转换为json\r\n     * @param fn class函数\r\n     * @param isRoot 是否为根组件\r\n     */\r\n    util.prototype.classToJson = function (fn, isRoot) {\r\n        if (isRoot === void 0) { isRoot = false; }\r\n        var app;\r\n        var rootComponent = {};\r\n        if (fn) {\r\n            app = new fn();\r\n        }\r\n        else {\r\n            $log.error('函数' + fn + '未找到');\r\n        }\r\n        var obj = Object.create(app);\r\n        var propertyObj = obj.__proto__;\r\n        var prototypeObj = obj.__proto__.__proto__;\r\n        var arr = Object.entries(propertyObj).concat(Object.entries(prototypeObj).slice(1));\r\n        var protoNames = Object.getOwnPropertyNames(prototypeObj);\r\n        var componentJson = {};\r\n        for (var i = 1; i < protoNames.length; i++) {\r\n            componentJson[protoNames[i]] = prototypeObj[protoNames[i]];\r\n        }\r\n        arr.forEach(function (v, i) {\r\n            componentJson[v[0]] = v[1];\r\n            if (isRoot) {\r\n                rootComponent[v[0]] = v[1];\r\n            }\r\n        });\r\n        return {\r\n            componentJson: componentJson, rootComponent: rootComponent\r\n        };\r\n    };\r\n    return util;\r\n}());\r\nexports.util = util;\r\nmixins_1.applyMixins(util, [handelType_1.default, handelCoding_1.default]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/util.ts\n// module id = 36\n// module chunks = 0"],"sourceRoot":""}